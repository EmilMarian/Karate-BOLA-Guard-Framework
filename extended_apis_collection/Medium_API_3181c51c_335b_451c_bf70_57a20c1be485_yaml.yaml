basePath: /v1
definitions:
  Contributor:
    properties:
      publicationId:
        description: An ID for the publication. This can be lifted from response of
          publications above
        type: string
      role:
        description: Role of the user identified by userId in the publication identified
          by publicationId. 'editor' or 'writer'
        type: string
      userId:
        description: A user ID of the contributor.
        type: string
  ContributorListData:
    properties:
      data:
        description: a list of contributor objects within a data envelope
        items:
          $ref: "#/definitions/Contributor"
        type: array
  Image:
    properties:
      md5:
        description: An MD5 hash of the image data.
        type: string
      url:
        description: The URL of the image.
        type: string
  ImageData:
    properties:
      data:
        $ref: "#/definitions/Image"
        description: an image object within a data envelope
  Post:
    properties:
      authorId:
        description: The userId of the post’s author
        type: string
      canonicalUrl:
        description: The canonical URL of the post. If canonicalUrl was not specified in
          the creation of the post, this field will not be present.
        type: string
      id:
        description: A unique identifier for the post.
        type: string
      license:
        description: The license of the post.
        type: string
      licenseUrl:
        description: The URL to the license of the post.
        type: string
      publishStatus:
        description: The publish status of the post.
        type: string
      publishedAt:
        description: The post’s published date. If created as a draft, this field will
          not be present.
        type: string
      tags:
        description: The post’s tags
        type: string
      title:
        description: The post’s title
        type: string
      url:
        description: The URL of the post on Medium
        type: string
  PostData:
    properties:
      data:
        $ref: "#/definitions/Post"
        description: a post object within a data envelope
  PostRequest:
    properties:
      canonicalUrl:
        description: The original home of this content, if it was originally published
          elsewhere.
        type: string
      content:
        description: The body of the post, in a valid, semantic, HTML fragment, or
          Markdown. Further markups may be supported in the future. For a full
          list of accepted HTML tags, see here. If you want your title to appear
          on the post page, you must also include it as part of the post
          content.
        type: string
      contentFormat:
        description: The format of the "content" field. There are two valid values,
          "html", and "markdown"
        type: string
      license:
        description: The license of the post. Valid values are “all-rights-reserved”,
          “cc-40-by”, “cc-40-by-sa”, “cc-40-by-nd”, “cc-40-by-nc”,
          “cc-40-by-nc-nd”, “cc-40-by-nc-sa”, “cc-40-zero”, “public-domain”. The
          default is “all-rights-reserved”.
        enum:
          - all-rights-reserved
          - cc-40-by
          - cc-40-by-sa
          - cc-40-by-nd
          - cc-40-by-nc
          - cc-40-by-nc-nd
          - cc-40-by-nc-sa
          - cc-40-zero
          - public-domain
        type: string
      publishStatus:
        description: The status of the post. Valid values are “public”, “draft”, or
          “unlisted”. The default is “public”.
        enum:
          - public
          - draft
          - unlisted
        type: string
      tags:
        description: Tags to classify the post. Only the first three will be used. Tags
          longer than 25 characters will be ignored.
        items:
          type: string
        type: string
      title:
        description: The title of the post. Note that this title is used for SEO and
          when rendering the post as a listing, but will not appear in the
          actual post—for that, the title must be specified in the content field
          as well. Titles longer than 100 characters will be ignored. In that
          case, a title will be synthesized from the first content in the post
          when it is published.
        type: string
  Publication:
    properties:
      description:
        description: Short description of the publication
        type: string
      id:
        description: A unique identifier for the publication.
        type: string
      imageUrl:
        description: The URL to the publication’s image/logo
        type: string
      name:
        description: The publication’s name on Medium.
        type: string
      url:
        description: The URL to the publication’s homepage
        type: string
  PublicationListData:
    properties:
      data:
        description: a list of publication objects within a data envelope
        items:
          $ref: "#/definitions/Publication"
        type: array
  User:
    properties:
      id:
        description: A unique identifier for the user.
        type: string
      imageUrl:
        description: The URL to the user’s avatar on Medium.
        type: string
      name:
        description: The user’s name on Medium.
        type: string
      url:
        description: The URL to the user’s profile on Medium.
        type: string
      username:
        description: The user’s username on Medium.
        type: string
  UserData:
    properties:
      data:
        $ref: "#/definitions/User"
        description: a user object within a data envelope
host: api.medium.com
info:
  description: Articles that matter on social publishing platform
  title: Medium API
  version: 1.0.0
paths:
  /images:
    post:
      description: Medium will automatically side-load any images specified by the src
        attribute on an <img> tag in post content when creating a post. However,
        if you are building a desktop integration and have local image files
        that you wish to send, you may use the images endpoint.
      responses:
        "200":
          description: an Image object within a data envelope.
          examples:
            application/json: |-
              {
                "data": {
                  "url": "https://images.medium.com/0*fkfQiTzT7TlUGGyI.png",
                  "md5": "fkfQiTzT7TlUGGyI"
                }
              }
          schema:
            $ref: "#/definitions/ImageData"
      summary: Uploading an image
  /me:
    get:
      description: Getting the authenticated user’s details
      produces:
        - application/json
      responses:
        "200":
          description: a User object within a data envelope.
          examples:
            application/json: |-
              {
                "data": {
                  "id": "5303d74c64f66366f00cb9b2a94f3251bf5",
                  "username": "majelbstoat",
                  "name": "Jamie Talbot",
                  "url": "https://medium.com/@majelbstoat",
                  "imageUrl": "https://images.medium.com/0*fkfQiTzT7TlUGGyI.png"
                }
              }
          schema:
            $ref: "#/definitions/UserData"
        "401":
          description: The "accessToken" is invalid or has been revoked.
      summary: User Profile
      tags:
        - User
  "/publications/{publicationId}/contributors":
    get:
      description: Fetching contributors for a publication
      parameters:
        - description: The id of the publication being queried
          in: path
          name: publicationId
          required: true
          type: string
      responses:
        "200":
          description: the contributors as list of resources under a publication
          examples:
            application/json: >-
              {
                "data": [
                  {
                    "publicationId": "b45573563f5a",
                    "userId": "13a06af8f81849c64dafbce822cbafbfab7ed7cecf82135bca946807ea351290d",
                    "role": "editor"
                  },
                  {
                    "publicationId": "b45573563f5a",
                    "userId": "1c9c63b15b874d3e354340b7d7458d55e1dda0f6470074df1cc99608a372866ac",
                    "role": "editor"
                  },
                  {
                    "publicationId": "b45573563f5a",
                    "userId": "1cc07499453463518b77d31650c0b53609dc973ad8ebd33690c7be9236e9384ad",
                    "role": "editor"
                  },
                  {
                    "publicationId": "b45573563f5a",
                    "userId": "196f70942410555f4b3030debc4f199a0d5a0309a7b9df96c57b8ec6e4b5f11d7",
                    "role": "writer"
                  },
                  {
                    "publicationId": "b45573563f5a",
                    "userId": "14d4a581f21ff537d245461b8ff2ae9b271b57d9554e25d863e3df6ef03ddd480",
                    "role": "writer"
                  }
                ]
              }
          schema:
            $ref: "#/definitions/ContributorListData"
        "401":
          description: "Unauthorized: The accessToken is invalid, or has been revoked."
      summary: Publication Contributors
      tags:
        - Publications
  "/publications/{publicationId}/posts":
    post:
      description: This API allows creating a post and associating it with a
        publication on Medium
      parameters:
        - description: ID of the publication this post was created under. This matches the
            publication ID requested in the URL of the request
          in: path
          name: publicationId
          required: true
          type: string
        - description: Create post JSON body
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/PostRequest"
      responses:
        "200":
          description: a post object response within a data envelope.
          examples:
            application/json: |-
              {
                "data": {
                  "id": "e6f36a",
                  "title": "Liverpool FC",
                  "authorId": "5303d74c64f66366f00cb9b2a94f3251bf5",
                  "tags": ["football", "sport", "Liverpool"],
                  "url": "https://medium.com/@majelbstoat/liverpool-fc-e6f36a",
                  "canonicalUrl": "http://jamietalbot.com/posts/liverpool-fc",
                  "publishStatus": "public",
                  "publishedAt": 1442286338435,
                  "license": "all-rights-reserved",
                  "licenseUrl": "https://medium.com/policy/9db0094a1e0f"
                }
              }
          schema:
            $ref: "#/definitions/PostData"
        "400":
          description: "Bad Request: Required fields were invalid, not specified."
        "401":
          description: "Unauthorized: The access token is invalid or has been revoked."
        "403":
          description: "Forbidden: The publicationId in request path doesn’t point to a
            publication that the user can publish into."
      summary: Creating a post under a publication
  "/users/{authorId}/posts":
    post:
      description: Creates a post on the authenticated user’s profile.
      parameters:
        - description: The userId of the post’s author
          in: path
          name: authorId
          required: true
          type: string
        - description: Create post JSON body
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/PostRequest"
      responses:
        "200":
          description: a post object response within a data envelope.
          examples:
            application/json: |-
              {
                "data": {
                  "id": "e6f36a",
                  "title": "Liverpool FC",
                  "authorId": "5303d74c64f66366f00cb9b2a94f3251bf5",
                  "tags": ["football", "sport", "Liverpool"],
                  "url": "https://medium.com/@majelbstoat/liverpool-fc-e6f36a",
                  "canonicalUrl": "http://jamietalbot.com/posts/liverpool-fc",
                  "publishStatus": "public",
                  "publishedAt": 1442286338435,
                  "license": "all-rights-reserved",
                  "licenseUrl": "https://medium.com/policy/9db0094a1e0f"
                }
              }
          schema:
            $ref: "#/definitions/PostData"
        "400":
          description: "Bad Request: Required fields were invalid, not specified."
        "401":
          description: "Unauthorized: The access token is invalid or has been revoked."
        "403":
          description: "Forbidden: The user does not have permission to publish, or the
            authorId in the request path points to wrong/non-existent user."
      summary: Creating a post
  "/users/{userId}/publications":
    get:
      description: Listing the user’s publications
      parameters:
        - description: The id of the user being queried
          in: path
          name: userId
          required: true
          type: string
      responses:
        "200":
          description: a list of publication objects
          examples:
            application/json: >-
              {
                "data": [
                  {
                    "id": "b969ac62a46b",
                    "name": "About Medium",
                    "description": "What is this thing and how does it work?",
                    "url": "https://medium.com/about",
                    "imageUrl": "https://cdn-images-1.medium.com/fit/c/200/200/0*ae1jbP_od0W6EulE.jpeg"
                  },
                  {
                    "id": "b45573563f5a",
                    "name": "Developers",
                    "description": "Medium’s Developer resources",
                    "url": "https://medium.com/developers",
                    "imageUrl": "https://cdn-images-1.medium.com/fit/c/200/200/1*ccokMT4VXmDDO1EoQQHkzg@2x.png"
                  }
                ]
              }
          schema:
            $ref: "#/definitions/PublicationListData"
        "401":
          description: "Unauthorized: The accessToken is invalid, lacks the
            listPublications scope or has been revoked."
        "403":
          description: "Forbidden: The request attempts to list publications for another
            user."
      summary: User Publications
      tags:
        - Publications
produces:
  - application/json
schemes:
  - https
swagger: "2.0"
