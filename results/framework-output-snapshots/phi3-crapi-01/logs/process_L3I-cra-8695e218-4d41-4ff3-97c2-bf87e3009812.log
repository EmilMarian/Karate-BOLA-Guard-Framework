2024-11-13 09:27:45,538 - __main__ - INFO - Skipping fragment creation: False
2024-11-13 09:27:45,627 - __main__ - DEBUG - Starting fragment retrieval process.
2024-11-13 09:27:46,007 - __main__ - DEBUG - Retrieved fragments: [{'content': '{"method": "POST", "parameters": [{"example": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36", "in": "header", "name": "User-Agent", "schema": {"type": "string"}}, {"example": "application/json", "in": "header", "name": "Content-Type", "schema": {"type": "string"}}, {"example": "*/*", "in": "header", "name": "Accept", "schema": {"type": "string"}}], "path": "/identity/api/auth/signup", "requestBody": {"content": {"*/*": {"schema": {"example": "\\"{\\\\\\"name\\\\\\":\\\\\\"{{name}}\\\\\\",\\\\\\"email\\\\\\":\\\\\\"{{email}}\\\\\\",\\\\\\"number\\\\\\":\\\\\\"{{phone}}\\\\\\",\\\\\\"password\\\\\\":\\\\\\"{{password}}\\\\\\"}\\"", "type": "string"}}}}, "responses": {"200": {"content": {"application/json": {}}, "description": "Successful response"}}}', 'metadata': {'filename': '0001_identity_api_auth_signup_post_200.json'}}, {'content': '{"method": "POST", "parameters": [{"example": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJtb25zdGVyQGRhcmt3ZWIuY29tIiwiaWF0IjoxNjA4NTQzODI0LCJleHAiOjE2MDg2MzAyMjR9.AAIvhrtstlloPf7-NNCcmhEZm-XkO1aO3x3CLns1em7ft9U77B88LpK9jIrF8C-IH32JPWVazRFo0gBIBZ9FpA", "in": "header", "name": "Authorization", "schema": {"type": "string"}}, {"example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 11_1_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36", "in": "header", "name": "User-Agent", "schema": {"type": "string"}}, {"example": "application/json", "in": "header", "name": "Content-Type", "schema": {"type": "string"}}, {"example": "*/*", "in": "header", "name": "Accept", "schema": {"type": "string"}}], "path": "/workshop/api/merchant/contact_mechanic", "requestBody": {"content": {"*/*": {"schema": {"example": "\\"{\\\\r\\\\n    \\\\\\"mechanic_code\\\\\\": \\\\\\"TRAC_JHN\\\\\\",\\\\r\\\\n    \\\\\\"problem_details\\\\\\": \\\\\\"Hi Jhon\\\\\\",\\\\r\\\\n    \\\\\\"vin\\\\\\": \\\\\\"{{VIN}}\\\\\\",\\\\r\\\\n    \\\\\\"mechanic_api\\\\\\": \\\\\\"{{url}}/workshop/api/mechanic/receive_report\\\\\\",\\\\r\\\\n    \\\\\\"repeat_request_if_failed\\\\\\": false,\\\\r\\\\n    \\\\\\"number_of_repeats\\\\\\": 1\\\\r\\\\n}\\"", "type": "string"}}}}, "responses": {"200": {"content": {"application/json": {}}, "description": "Successful response"}}}', 'metadata': {'filename': '0019_workshop_api_merchant_contact_mechanic_post_200.json'}}, {'content': '{"method": "POST", "parameters": [], "path": "/identity/api/auth/verify", "requestBody": {"content": {"application/json": {"schema": {"example": {"token": "{{token}}"}, "type": "object"}}}}, "responses": {"200": {"content": {"application/json": {}}, "description": "Successful response"}}}', 'metadata': {'filename': '0003_identity_api_auth_verify_post_200.json'}}]
2024-11-13 09:27:46,008 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2024-11-13 09:27:46,009 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2024-11-13 09:27:46,567 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2024-11-13 09:27:46,568 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.106:4893/v1/chat/completions
2024-11-13 09:28:23,923 - karate_llm_test_gen - INFO - Response status code: 200
2024-11-13 09:28:23,924 - karate_llm_test_gen - INFO - Generated test case: Here is the Karate DSL test script to check for potential Broken Authentication/Authorization vulner...
2024-11-13 09:28:23,925 - __main__ - INFO - Generated Karate test for /identity/api/auth/signup POST at output/karate_feature_files/ID_001_krtestcra_identity_api_auth_signup_POST.feature
2024-11-13 09:28:23,925 - karate_compatibility_verifier - INFO - Original content:
2024-11-13 09:28:23,925 - karate_compatibility_verifier - INFO - Here is the Karate DSL test script to check for potential Broken Authentication/Authorization vulnerabilities on the `/identity/api/auth/signup` endpoint:

```karate
Feature: Test API for Account Enumeration during Signup

Scenario: Verify that the signup process does not allow account enumeration
Given url 'http://192.168.1.112:8888/identity/api/auth/signup'
And request { username: 'newUser', password: 'Password123!', email: 'new@user.com' }
When method post
Then status 200
And match response contains 'A verification email has been sent. Please check your inbox.'
```

This test scenario attempts to sign up a new user with an existing username, expecting the API to respond with a successful message and not allow account enumeration.

Please note that this is just one possible way to test for Broken Authentication/Authorization vulnerabilities on the `/identity/api/auth/signup` endpoint using Karate DSL. You may need to modify or add more scenarios based on your specific requirements and testing goals.
2024-11-13 09:28:36,333 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2024-11-13 09:28:36,333 - karate_compatibility_verifier - INFO - Here is the corrected Karate DSL test script:

```karate
Feature: Test API for Account Enumeration during Signup

Scenario: Verify that the signup process does not allow account enumeration
Given url 'http://192.168.1.112:8888/identity/api/auth/signup'
And request { username: 'newUser', password: 'Password123!', email: 'new@user.com' }
When method post
Then status 200
And match response contains "A verification email has been sent. Please check your inbox."
```
2024-11-13 09:28:40,420 - karate_compatibility_verifier - INFO - 
Final verified content:
2024-11-13 09:28:40,420 - karate_compatibility_verifier - INFO - Here is the corrected Karate DSL script:

```karate
Feature: Test API for Account Enumeration during Signup

Scenario: Verify that the signup process does not allow account enumeration
Given url 'http://192.168.1.112:8888/identity/api/auth/signup'
And request { username: 'newUser', password: 'Password123!', email: 'new@user.com' }
When method post
Then status 200
And match response contains "A verification email has been sent. Please check your inbox."
```
2024-11-13 09:28:40,420 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_001_krtestcra_identity_api_auth_signup_POST_verified.feature
2024-11-13 09:28:40,421 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_001_krtestcra_identity_api_auth_signup_POST.feature: Here is the corrected Karate DSL script:

```karate
Feature: Test API for Account Enumeration during Signup

Scenario: Verify that the signup process does not allow account enumeration
Given url 'http://192.168.1.112:8888/identity/api/auth/signup'
And request { username: 'newUser', password: 'Password123!', email: 'new@user.com' }
When method post
Then status 200
And match response contains "A verification email has been sent. Please check your inbox."
```
2024-11-13 09:28:40,421 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2024-11-13 09:28:40,422 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2024-11-13 09:28:40,448 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2024-11-13 09:28:40,449 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.106:4893/v1/chat/completions
2024-11-13 09:28:59,622 - karate_llm_test_gen - INFO - Response status code: 200
2024-11-13 09:28:59,623 - karate_llm_test_gen - INFO - Generated test case: Here are the Karate DSL test scripts for each scenario:

**Scenario 1: OAuth Token Generation Flaw**...
2024-11-13 09:28:59,624 - __main__ - INFO - Generated Karate test for /workshop/api/merchant/contact_mechanic POST at output/karate_feature_files/ID_002_krtestcra_workshop_api_merchant_contact_mechanic_POST.feature
2024-11-13 09:28:59,624 - karate_compatibility_verifier - INFO - Original content:
2024-11-13 09:28:59,624 - karate_compatibility_verifier - INFO - Here are the Karate DSL test scripts for each scenario:

**Scenario 1: OAuth Token Generation Flaw**
```karate
Feature: Test API for OAuth Token Generation Flaw

Scenario: Attempt to exploit OAuth token generation with a stolen authorization code
Given url 'http://192.168.1.112:8888/workshop/api/merchant/contact_mechanic'
And request {
  grant_type: 'authorization_code',
  code: 'stolen_code',
  redirect_uri: 'http://evil.example.com',
  client_id: 'client_id',
  client_secret: 'client_secret'
}
When method post
Then status 400
And match response contains 'Invalid grant: authorization code is invalid'
```

**Scenario 2: Improper Authorization on User Documents Access**
```karate
Feature: Test for Improper Authorization on User Documents Access

Scenario: Attempt to access a document without being an admin or editor
Given url 'http://192.168.1.112:8888/workshop/api/merchant/contact_mechanic'
And header Authorization = 'Bearer <regular_user_token>'
When method get
Then status 403
And match response contains 'You do not have permission to access this document.'

* def adminAccess = callonce read('classpath:helpers/adminAccess.feature')
* switch adminAccess.status
case 200:
  * assert adminAccess.response == 'Document details'
case 403:
  * fail 'Admin should have access'
```

**Scenario 3: Broken Object Level Authorization on Private Messages**
```karate
Feature: Test API for Broken Object Level Authorization on Private Messages

Scenario: Attempt to send a private message on behalf of another user
Given url 'http://192.168.1.112:8888/workshop/api/merchant/contact_mechanic'
And request {
  senderId: 'user7',
  receiverId: 'user8',
  messageContent: 'Hello from the other side!'
}
And header Authorization = 'Bearer <user7_token>'
When method post
Then status 403
And match response contains 'Unauthorized to send messages as another user.'
```

Note that I've used the provided API endpoint information and added the corresponding URL for each scenario.
2024-11-13 09:29:53,369 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2024-11-13 09:29:53,369 - karate_compatibility_verifier - INFO - Here are the corrected Karate DSL test scripts:

**Scenario 1: OAuth Token Generation Flaw**
```karate
Feature:
Scenario: Attempt to exploit OAuth token generation with a stolen authorization code
Given url 'http://192.168.1.112:8888/workshop/api/merchant/contact_mechanic'
And request {
    grant_type: 'authorization_code',
    code: 'stolen_code',
    redirect_uri: 'http://evil.example.com',
    client_id: 'client_id',
    client_secret: 'client_secret'
}
When method post
Then status 400
And match response contains 'Invalid grant: authorization code is invalid'
```

**Scenario 2: Improper Authorization on User Documents Access**
```karate
Feature:
Background:
* def adminAccess = callonce read('classpath:helpers/adminAccess.feature')
* switch adminAccess.status
case 200:
    * assert adminAccess.response == 'Document details'
case 403:
    * fail 'Admin should have access'

Scenario: Attempt to access a document without being an admin or editor
Given url 'http://192.168.1.112:8888/workshop/api/merchant/contact_mechanic'
And header Authorization = 'Bearer <regular_user_token>'
When method get
Then status 403
And match response contains 'You do not have permission to access this document.'
```

**Scenario 3: Broken Object Level Authorization on Private Messages**
```karate
Feature:
Scenario: Attempt to send a private message on behalf of another user
Given url 'http://192.168.1.112:8888/workshop/api/merchant/contact_mechanic'
And request {
    senderId: 'user7',
    receiverId: 'user8',
    messageContent: 'Hello from the other side!'
}
And header Authorization = 'Bearer <user7_token>'
When method post
Then status 403
And match response contains 'Unauthorized to send messages as another user.'
```
2024-11-13 09:30:35,449 - karate_compatibility_verifier - INFO - 
Final verified content:
2024-11-13 09:30:35,449 - karate_compatibility_verifier - INFO - Here are the corrected Karate DSL test scripts:

**Scenario 1: OAuth Token Generation Flaw**
```karate
Feature:
Scenario: Attempt to exploit OAuth token generation with a stolen authorization code
Given url 'http://192.168.1.112:8888/workshop/api/merchant/contact_mechanic'
And request {
    grant_type: 'authorization_code',
    code: 'stolen_code',
    redirect_uri: 'http://evil.example.com',
    client_id: 'client_id',
    client_secret: 'client_secret'
}
When method post
Then status 400
And match response contains 'Invalid grant: authorization code is invalid'
```

**Scenario 2: Improper Authorization on User Documents Access**
```karate
Feature:
Background:
* def adminAccess = callonce read('classpath:helpers/adminAccess.feature')
* switch adminAccess.status
case 200:
    * assert adminAccess.response == 'Document details'
case 403:
    * fail 'Admin should have access'

Scenario: Attempt to access a document without being an admin or editor
Given url 'http://192.168.1.112:8888/workshop/api/merchant/contact_mechanic'
And header Authorization = 'Bearer <regular_user_token>'
When method get
Then status 403
And match response contains 'You do not have permission to access this document.'
```

**Scenario 3: Broken Object Level Authorization on Private Messages**
```karate
Feature:
Scenario: Attempt to send a private message on behalf of another user
Given url 'http://192.168.1.112:8888/workshop/api/merchant/contact_mechanic'
And request {
    senderId: 'user7',
    receiverId: 'user8',
    messageContent: 'Hello from the other side!'
}
And header Authorization = 'Bearer <user7_token>'
When method post
Then status 403
And match response contains 'Unauthorized to send messages as another user.'
```
2024-11-13 09:30:35,449 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_002_krtestcra_workshop_api_merchant_contact_mechanic_POST_verified.feature
2024-11-13 09:30:35,450 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_002_krtestcra_workshop_api_merchant_contact_mechanic_POST.feature: Here are the corrected Karate DSL test scripts:

**Scenario 1: OAuth Token Generation Flaw**
```karate
Feature:
Scenario: Attempt to exploit OAuth token generation with a stolen authorization code
Given url 'http://192.168.1.112:8888/workshop/api/merchant/contact_mechanic'
And request {
    grant_type: 'authorization_code',
    code: 'stolen_code',
    redirect_uri: 'http://evil.example.com',
    client_id: 'client_id',
    client_secret: 'client_secret'
}
When method post
Then status 400
And match response contains 'Invalid grant: authorization code is invalid'
```

**Scenario 2: Improper Authorization on User Documents Access**
```karate
Feature:
Background:
* def adminAccess = callonce read('classpath:helpers/adminAccess.feature')
* switch adminAccess.status
case 200:
    * assert adminAccess.response == 'Document details'
case 403:
    * fail 'Admin should have access'

Scenario: Attempt to access a document without being an admin or editor
Given url 'http://192.168.1.112:8888/workshop/api/merchant/contact_mechanic'
And header Authorization = 'Bearer <regular_user_token>'
When method get
Then status 403
And match response contains 'You do not have permission to access this document.'
```

**Scenario 3: Broken Object Level Authorization on Private Messages**
```karate
Feature:
Scenario: Attempt to send a private message on behalf of another user
Given url 'http://192.168.1.112:8888/workshop/api/merchant/contact_mechanic'
And request {
    senderId: 'user7',
    receiverId: 'user8',
    messageContent: 'Hello from the other side!'
}
And header Authorization = 'Bearer <user7_token>'
When method post
Then status 403
And match response contains 'Unauthorized to send messages as another user.'
```
2024-11-13 09:30:35,450 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2024-11-13 09:30:35,451 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2024-11-13 09:30:35,629 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2024-11-13 09:30:35,630 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.106:4893/v1/chat/completions
2024-11-13 09:31:18,118 - karate_llm_test_gen - INFO - Response status code: 200
2024-11-13 09:31:18,119 - karate_llm_test_gen - INFO - Generated test case: Here is the Karate DSL test script to check for potential Broken Authentication/Authorization vulner...
2024-11-13 09:31:18,120 - __main__ - INFO - Generated Karate test for /identity/api/auth/verify POST at output/karate_feature_files/ID_003_krtestcra_identity_api_auth_verify_POST.feature
2024-11-13 09:31:18,121 - karate_compatibility_verifier - INFO - Original content:
2024-11-13 09:31:18,121 - karate_compatibility_verifier - INFO - Here is the Karate DSL test script to check for potential Broken Authentication/Authorization vulnerabilities:

```karate
Feature: Test API for Broken Authentication/Authorization

Scenario: Verify that the /auth/verify endpoint does not allow unauthorized access
Given url 'http://192.168.1.112:8888'
And request { username: '', password: '' }
When method post
Then status 401
And match response contains "Invalid credentials"

Scenario: Attempt to verify an existing user with incorrect password
Given url 'http://192.168.1.112:8888'
And request { username: 'existingUser', password: 'wrongPassword' }
When method post
Then status 401
And match response contains "Invalid credentials"

Scenario: Verify that the /auth/verify endpoint returns a specific error message for incorrect usernames
Given url 'http://192.168.1.112:8888'
And request { username: 'nonExistingUser', password: 'Password123!' }
When method post
Then status 401
And match response contains "Invalid credentials"

Scenario: Verify that the /auth/verify endpoint returns a specific error message for incorrect passwords
Given url 'http://192.168.1.112:8888'
And request { username: 'existingUser', password: 'wrongPassword' }
When method post
Then status 401
And match response contains "Invalid credentials"
```

This script tests the `/auth/verify` endpoint for potential Broken Authentication/Authorization vulnerabilities by attempting to access it with incorrect or missing credentials, and verifying that the expected error messages are returned.
2024-11-13 09:31:48,956 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2024-11-13 09:31:48,956 - karate_compatibility_verifier - INFO - Here is the corrected Karate DSL test script:

```karate
Feature: Test API for Broken Authentication/Authorization

Scenario: Verify that the /auth/verify endpoint does not allow unauthorized access
Given url 'http://192.168.1.112:8888'
And request { username: '', password: '' }
When method post
Then status 401
And match response == {"error": "Invalid credentials"}

Scenario: Attempt to verify an existing user with incorrect password
Given url 'http://192.168.1.112:8888'
And request { username: 'existingUser', password: 'wrongPassword' }
When method post
Then status 401
And match response == {"error": "Invalid credentials"}

Scenario: Verify that the /auth/verify endpoint returns a specific error message for incorrect usernames
Given url 'http://192.168.1.112:8888'
And request { username: 'nonExistingUser', password: 'Password123!' }
When method post
Then status 401
And match response == {"error": "Invalid credentials"}

Scenario: Verify that the /auth/verify endpoint returns a specific error message for incorrect passwords
Given url 'http://192.168.1.112:8888'
And request { username: 'existingUser', password: 'wrongPassword' }
When method post
Then status 401
And match response == {"error": "Invalid credentials"}
```
2024-11-13 09:32:10,689 - karate_compatibility_verifier - INFO - 
Final verified content:
2024-11-13 09:32:10,690 - karate_compatibility_verifier - INFO - Here is the corrected Karate DSL script:

```karate
Feature: Test API for Broken Authentication/Authorization

Scenario: Verify that the /auth/verify endpoint does not allow unauthorized access
Given url 'http://192.168.1.112:8888'
And request { username: '', password: '' }
When method post
Then status 401
And match response == {"error": "Invalid credentials"}

Scenario: Attempt to verify an existing user with incorrect password
Given url 'http://192.168.1.112:8888'
And request { username: 'existingUser', password: 'wrongPassword' }
When method post
Then status 401
And match response == {"error": "Invalid credentials"}

Scenario: Verify that the /auth/verify endpoint returns a specific error message for incorrect usernames
Given url 'http://192.168.1.112:8888'
And request { username: 'nonExistingUser', password: 'Password123!' }
When method post
Then status 401
And match response == {"error": "Invalid credentials"}

Scenario: Verify that the /auth/verify endpoint returns a specific error message for incorrect passwords
Given url 'http://192.168.1.112:8888'
And request { username: 'existingUser', password: 'wrongPassword' }
When method post
Then status 401
And match response == {"error": "Invalid credentials"}
```
2024-11-13 09:32:10,690 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_003_krtestcra_identity_api_auth_verify_POST_verified.feature
2024-11-13 09:32:10,690 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_003_krtestcra_identity_api_auth_verify_POST.feature: Here is the corrected Karate DSL script:

```karate
Feature: Test API for Broken Authentication/Authorization

Scenario: Verify that the /auth/verify endpoint does not allow unauthorized access
Given url 'http://192.168.1.112:8888'
And request { username: '', password: '' }
When method post
Then status 401
And match response == {"error": "Invalid credentials"}

Scenario: Attempt to verify an existing user with incorrect password
Given url 'http://192.168.1.112:8888'
And request { username: 'existingUser', password: 'wrongPassword' }
When method post
Then status 401
And match response == {"error": "Invalid credentials"}

Scenario: Verify that the /auth/verify endpoint returns a specific error message for incorrect usernames
Given url 'http://192.168.1.112:8888'
And request { username: 'nonExistingUser', password: 'Password123!' }
When method post
Then status 401
And match response == {"error": "Invalid credentials"}

Scenario: Verify that the /auth/verify endpoint returns a specific error message for incorrect passwords
Given url 'http://192.168.1.112:8888'
And request { username: 'existingUser', password: 'wrongPassword' }
When method post
Then status 401
And match response == {"error": "Invalid credentials"}
```
2024-11-13 09:32:10,690 - __main__ - INFO - Moving generated Karate feature files...
2024-11-13 09:32:10,692 - __main__ - INFO - Creating the Karate Test Framework with generated feature files
2024-11-13 09:32:14,219 - karate_test_framework - INFO - Starting to move Karate feature files...
2024-11-13 09:32:14,219 - karate_test_framework - INFO - Removed ID_002_krtestcra_workshop_api_merchant_contact_mechanic_POST_verified.feature from ./output/karate_framework/bolatestingframework/src/test/resources
2024-11-13 09:32:14,219 - karate_test_framework - INFO - Removed ID_003_krtestcra_identity_api_auth_verify_POST_verified.feature from ./output/karate_framework/bolatestingframework/src/test/resources
2024-11-13 09:32:14,219 - karate_test_framework - INFO - Removed ID_001_krtestcra_identity_api_auth_signup_POST_verified.feature from ./output/karate_framework/bolatestingframework/src/test/resources
2024-11-13 09:32:14,219 - karate_test_framework - INFO - Moved ID_002_krtestcra_workshop_api_merchant_contact_mechanic_POST_verified.feature to ./output/karate_framework/bolatestingframework/src/test/resources
2024-11-13 09:32:14,219 - karate_test_framework - INFO - Moved ID_003_krtestcra_identity_api_auth_verify_POST_verified.feature to ./output/karate_framework/bolatestingframework/src/test/resources
2024-11-13 09:32:14,219 - karate_test_framework - INFO - Moved ID_001_krtestcra_identity_api_auth_signup_POST_verified.feature to ./output/karate_framework/bolatestingframework/src/test/resources
2024-11-13 09:32:14,219 - karate_test_framework - INFO - Finished moving Karate feature files.
2024-11-13 09:32:14,219 - karate_test_framework - INFO - Running Karate tests in Docker...
2024-11-13 09:32:14,219 - karate_test_framework - INFO - Building Docker image...
2024-11-13 09:33:17,775 - karate_test_framework - INFO - Running Karate tests in Docker...
2024-11-13 09:33:34,533 - karate_test_framework - INFO - Docker run logs saved to: /home/mango/Desktop/2024/1104/karate-bola-guard/output/karate_framework/target/karate-reports_L3I-cra-8695e218-4d41-4ff3-97c2-bf87e3009812/docker_run_logs_L3I-cra-8695e218-4d41-4ff3-97c2-bf87e3009812.txt
2024-11-13 09:33:34,533 - karate_test_framework - INFO - Test reports are available in: /home/mango/Desktop/2024/1104/karate-bola-guard/output/karate_framework/target/karate-reports_L3I-cra-8695e218-4d41-4ff3-97c2-bf87e3009812
2024-11-13 09:33:34,922 - karate_test_framework - INFO - Starting iteration 1 of 3
2024-11-13 09:33:34,922 - karate_test_framework - INFO - Building Docker image...
2024-11-13 09:33:39,080 - karate_test_framework - INFO - Running Karate tests in Docker...
2024-11-13 09:33:48,650 - karate_test_framework - INFO - Docker run logs saved to: /home/mango/Desktop/2024/1104/karate-bola-guard/output/karate_framework/target/karate-reports_L3I-cra-8695e218-4d41-4ff3-97c2-bf87e3009812/docker_run_logs_L3I-cra-8695e218-4d41-4ff3-97c2-bf87e3009812.txt
2024-11-13 09:33:48,650 - karate_test_framework - INFO - Test reports are available in: /home/mango/Desktop/2024/1104/karate-bola-guard/output/karate_framework/target/karate-reports_L3I-cra-8695e218-4d41-4ff3-97c2-bf87e3009812
2024-11-13 09:33:49,305 - karate_test_framework - INFO - Rewriting 1 broken tests in iteration 1
2024-11-13 09:33:49,317 - karate_test_framework - INFO - errors found: [('verified', "mismatched input 'd' expecting <EOF>, mismatched input 'd' expecting <EOF>, mismatched input 'd' expecting <EOF>, mismatched input 'd' expecting <EOF>"), ('verified', "mismatched input '}' expecting <EOF>, mismatched input '}' expecting <EOF>, mismatched input '}' expecting <EOF>, mismatched input '}' expecting <EOF>"), ('verified', "mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>")]
2024-11-13 09:33:57,931 - karate_test_framework - INFO - Updated test script: ID_001_krtestcra_identity_api_auth_signup_POST_verified.feature
2024-11-13 09:33:57,931 - karate_test_framework - INFO - Starting iteration 2 of 3
2024-11-13 09:33:57,931 - karate_test_framework - INFO - Building Docker image...
2024-11-13 09:34:33,385 - karate_test_framework - INFO - Running Karate tests in Docker...
2024-11-13 09:34:42,011 - karate_test_framework - INFO - Docker run logs saved to: /home/mango/Desktop/2024/1104/karate-bola-guard/output/karate_framework/target/karate-reports_L3I-cra-8695e218-4d41-4ff3-97c2-bf87e3009812/docker_run_logs_L3I-cra-8695e218-4d41-4ff3-97c2-bf87e3009812.txt
2024-11-13 09:34:42,011 - karate_test_framework - INFO - Test reports are available in: /home/mango/Desktop/2024/1104/karate-bola-guard/output/karate_framework/target/karate-reports_L3I-cra-8695e218-4d41-4ff3-97c2-bf87e3009812
2024-11-13 09:34:42,543 - karate_test_framework - INFO - Rewriting 1 broken tests in iteration 2
2024-11-13 09:34:42,582 - karate_test_framework - INFO - errors found: [('verified', "mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>"), ('verified', "mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>"), ('verified', "mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>")]
2024-11-13 09:34:51,279 - karate_test_framework - INFO - Updated test script: ID_001_krtestcra_identity_api_auth_signup_POST_verified.feature
2024-11-13 09:34:51,280 - karate_test_framework - INFO - Starting iteration 3 of 3
2024-11-13 09:34:51,280 - karate_test_framework - INFO - Building Docker image...
2024-11-13 09:34:55,107 - karate_test_framework - INFO - Running Karate tests in Docker...
2024-11-13 09:35:04,142 - karate_test_framework - INFO - Docker run logs saved to: /home/mango/Desktop/2024/1104/karate-bola-guard/output/karate_framework/target/karate-reports_L3I-cra-8695e218-4d41-4ff3-97c2-bf87e3009812/docker_run_logs_L3I-cra-8695e218-4d41-4ff3-97c2-bf87e3009812.txt
2024-11-13 09:35:04,143 - karate_test_framework - INFO - Test reports are available in: /home/mango/Desktop/2024/1104/karate-bola-guard/output/karate_framework/target/karate-reports_L3I-cra-8695e218-4d41-4ff3-97c2-bf87e3009812
2024-11-13 09:35:04,660 - karate_test_framework - INFO - Rewriting 1 broken tests in iteration 3
2024-11-13 09:35:04,671 - karate_test_framework - INFO - errors found: [('verified', "mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>"), ('verified', "mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>"), ('verified', "mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>")]
2024-11-13 09:35:13,436 - karate_test_framework - INFO - Updated test script: ID_001_krtestcra_identity_api_auth_signup_POST_verified.feature
2024-11-13 09:35:13,437 - karate_test_framework - ERROR - Reached maximum iterations (3). Some tests may still be failing.
2024-11-13 09:35:13,437 - karate_test_framework - INFO - Opening final test report...
2024-11-13 09:35:13,437 - karate_test_framework - ERROR - Test report not found. Make sure tests have been run.
