2024-11-12 21:22:56,498 - __main__ - INFO - Skipping fragment creation: False
2024-11-12 21:22:56,599 - __main__ - DEBUG - Starting fragment retrieval process.
2024-11-12 21:22:56,826 - __main__ - DEBUG - Retrieved fragments: [{'content': '{"method": "POST", "parameters": [{"example": "application/json", "in": "header", "name": "Content-Type", "schema": {"type": "string"}}], "path": "/api/Users/", "requestBody": {"content": {"*/*": {"schema": {"example": "\\"{\\\\\\"email\\\\\\":\\\\\\"{{_email}}\\\\\\",\\\\\\"password\\\\\\":\\\\\\"{{_password}}\\\\\\",\\\\\\"passwordRepeat\\\\\\":\\\\\\"{{_password}}\\\\\\",\\\\\\"securityQuestion\\\\\\":{\\\\\\"id\\\\\\":7,\\\\\\"question\\\\\\":\\\\\\"Name of your favorite pet?\\\\\\",\\\\\\"createdAt\\\\\\":\\\\\\"2022-05-20T17:09:53.991Z\\\\\\",\\\\\\"updatedAt\\\\\\":\\\\\\"2022-05-20T17:09:53.991Z\\\\\\"},\\\\\\"securityAnswer\\\\\\":\\\\\\"MIX MIX\\\\\\"}\\"", "type": "string"}}}}, "responses": {"201": {"content": {"application/json": {}}, "description": "Successful response"}}}', 'metadata': {'filename': '0001_api_Users_post_201.json'}}, {'content': '{"method": "POST", "parameters": [{"example": "application/json", "in": "header", "name": "Content-Type", "schema": {"type": "string"}}], "path": "/rest/user/login", "requestBody": {"content": {"*/*": {"schema": {"example": "\\"{\\\\\\"email\\\\\\":\\\\\\"{{_email}}\\\\\\",\\\\\\"password\\\\\\":\\\\\\"{{_password}}\\\\\\"}\\"", "type": "string"}}}}, "responses": {"200": {"content": {"application/json": {}}, "description": "Successful response"}}}', 'metadata': {'filename': '0002_rest_user_login_post_200.json'}}, {'content': '{"method": "POST", "parameters": [{"example": "{{_token}}", "in": "header", "name": "Authorization", "schema": {"type": "string"}}, {"example": "application/json; charset=utf-8", "in": "header", "name": "Content-Type", "schema": {"type": "string"}}], "path": "/api/BasketItems/", "requestBody": {"content": {"*/*": {"schema": {"example": "\\"{\\\\\\"ProductId\\\\\\":{{_product_2_id}},\\\\\\"BasketId\\\\\\":\\\\\\"{{_bid}}\\\\\\",\\\\\\"quantity\\\\\\":1}\\"", "type": "string"}}}}, "responses": {"200": {"content": {"application/json": {}}, "description": "Successful response"}}}', 'metadata': {'filename': '0004_api_BasketItems_post_200.json'}}]
2024-11-12 21:22:56,827 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2024-11-12 21:22:56,827 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2024-11-12 21:22:57,270 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2024-11-12 21:22:57,271 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.106:4893/v1/chat/completions
2024-11-12 21:23:11,701 - karate_llm_test_gen - INFO - Response status code: 200
2024-11-12 21:23:11,702 - karate_llm_test_gen - INFO - Generated test case: Here is the Karate DSL test script to check for potential Broken Authentication/Authorization vulner...
2024-11-12 21:23:11,702 - __main__ - INFO - Generated Karate test for /api/Users/ POST at output/karate_feature_files/ID_001_krtestjui_api_Users__POST.feature
2024-11-12 21:23:11,703 - karate_compatibility_verifier - INFO - Original content:
2024-11-12 21:23:11,703 - karate_compatibility_verifier - INFO - Here is the Karate DSL test script to check for potential Broken Authentication/Authorization vulnerabilities:

```
Feature: Test API for Broken Authentication/Authorization

Scenario: Attempt to access user documents without being an 'admin' or 'editor'
Given url http://192.168.1.112:3133/api/Users/
And header Authorization = 'Bearer <regular_user_token>'
When method post
Then status 403
And match response contains "You do not have permission to access this document."

Scenario: Verify the '/api/Users' endpoint does not allow user enumeration
Given url http://192.168.1.112:3133/api/Users/
And request { username: 'nonexistent_user', password: 'Password123' }
When method post
Then status 401
And match response contains "Incorrect username or password."

Scenario: Verify the '/api/Users' endpoint does not allow account enumeration during signup
Given url http://192.168.1.112:3133/api/Users/
And request { username: 'existingUser', password: 'Password123!', email: 'existing@example.com' }
When method post
Then status 200
And match response contains "A verification email has been sent. Please check your inbox."
```

Note that the `http://192.168.1.112:3133` URL is used for each scenario, as per your request.
2024-11-12 21:24:04,372 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2024-11-12 21:24:04,372 - karate_compatibility_verifier - INFO - Here is the corrected Karate DSL test script:

````
Feature: Test API for Broken Authentication/Authorization

Scenario: Attempt to access user documents without being an 'admin' or 'editor'
Given url 'http://192.168.1.112:3133/api/Users/'
And header Authorization = 'Bearer <regular_user_token>'
When method post
Then status 403
And match response contains "You do not have permission to access this document."

Scenario: Verify the '/api/Users' endpoint does not allow user enumeration
Given url 'http://192.168.1.112:3133/api/Users/'
And request { username: 'nonexistent_user', password: 'Password123' }
When method post
Then status 401
And match response contains "Incorrect username or password."

Scenario: Verify the '/api/Users' endpoint does not allow account enumeration during signup
Given url 'http://192.168.1.112:3133/api/Users/'
And request { 
    username: 'existingUser', 
    password: 'Password123!', 
    email: 'existing@example.com'
}
When method post
Then status 200
And match response contains "A verification email has been sent. Please check your inbox."
```
2024-11-12 21:24:43,023 - karate_compatibility_verifier - INFO - 
Final verified content:
2024-11-12 21:24:43,023 - karate_compatibility_verifier - INFO - Here is the corrected Karate DSL script:

```
Feature: Test API for Broken Authentication/Authorization

Scenario: Attempt to access user documents without being an 'admin' or 'editor'
Given url 'http://192.168.1.112:3133/api/Users/'
And header Authorization = 'Bearer <regular_user_token>'
When method post
Then status 403
And match response contains "You do not have permission to access this document."

Scenario: Verify the '/api/Users' endpoint does not allow user enumeration
Given url 'http://192.168.1.112:3133/api/Users/'
And request { username: 'nonexistent_user', password: 'Password123' }
When method post
Then status 401
And match response contains "Incorrect username or password."

Scenario: Verify the '/api/Users' endpoint does not allow account enumeration during signup
Given url 'http://192.168.1.112:3133/api/Users/'
And request { 
    username: 'existingUser', 
    password: 'Password123!', 
    email: 'existing@example.com'
}
When method post
Then status 200
And match response contains "A verification email has been sent. Please check your inbox."
```
2024-11-12 21:24:43,023 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_001_krtestjui_api_Users__POST_verified.feature
2024-11-12 21:24:43,023 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_001_krtestjui_api_Users__POST.feature: Here is the corrected Karate DSL script:

```
Feature: Test API for Broken Authentication/Authorization

Scenario: Attempt to access user documents without being an 'admin' or 'editor'
Given url 'http://192.168.1.112:3133/api/Users/'
And header Authorization = 'Bearer <regular_user_token>'
When method post
Then status 403
And match response contains "You do not have permission to access this document."

Scenario: Verify the '/api/Users' endpoint does not allow user enumeration
Given url 'http://192.168.1.112:3133/api/Users/'
And request { username: 'nonexistent_user', password: 'Password123' }
When method post
Then status 401
And match response contains "Incorrect username or password."

Scenario: Verify the '/api/Users' endpoint does not allow account enumeration during signup
Given url 'http://192.168.1.112:3133/api/Users/'
And request { 
    username: 'existingUser', 
    password: 'Password123!', 
    email: 'existing@example.com'
}
When method post
Then status 200
And match response contains "A verification email has been sent. Please check your inbox."
```
2024-11-12 21:24:43,024 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2024-11-12 21:24:43,024 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2024-11-12 21:24:43,050 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2024-11-12 21:24:43,051 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.106:4893/v1/chat/completions
2024-11-12 21:25:30,558 - karate_llm_test_gen - INFO - Response status code: 200
2024-11-12 21:25:30,559 - karate_llm_test_gen - INFO - Generated test case: Here is the Karate DSL test script to check for potential Broken Authentication/Authorization vulner...
2024-11-12 21:25:30,560 - __main__ - INFO - Generated Karate test for /rest/user/login POST at output/karate_feature_files/ID_002_krtestjui_rest_user_login_POST.feature
2024-11-12 21:25:30,560 - karate_compatibility_verifier - INFO - Original content:
2024-11-12 21:25:30,560 - karate_compatibility_verifier - INFO - Here is the Karate DSL test script to check for potential Broken Authentication/Authorization vulnerabilities on the `/rest/user/login` endpoint:
```
Feature: Testing User Enumeration and Session Management

Scenario: Verify user enumeration vulnerability
Given url 'http://192.168.1.112:3133/rest/user/login'
And request { username: 'nonexistent_user', password: 'Password123' }
When method post
Then status 401
And match response.contains('Incorrect username or password.')

* def loginExistingUser = function() {
    And request { username: 'existing_user', password: 'WrongPassword' }
    When method post
    Then status 401
    And match response.contains('Incorrect username or password.')
}

Scenario Outline: Test for session management vulnerability
Given url 'http://192.168.1.112:3133/rest/user/login'
And request { username: '<username>', password: '<password>' }
When method post
Then status 200
And match response.contains('Login successful.')

Examples:
| username | password |
| existing_user | Password123! |
| nonexistent_user | WrongPassword |

Scenario: Verify session invalidation on logout
Given url 'http://192.168.1.112:3133/rest/session/logout'
And header Authorization = 'Bearer <user_token>'
When method post
Then status 200
And match response.contains('Successfully logged out.')

* def testSessionReuse = function() {
    Given url 'http://192.168.1.112:3133/api/secure'
    And header Authorization = 'Bearer <user_token>'
    When method get
    Then status 401
    And match response.contains('Session is not valid.')
}
```
This script tests for user enumeration vulnerabilities by attempting to login with a nonexistent username and an incorrect password, verifying that the application responds with generic error messages. It also includes scenarios to test session management vulnerability by logging in successfully and then testing if the session can be reused after logout.

Please note that you should replace `<user_token>` with actual token value obtained from successful login.
2024-11-12 21:27:29,032 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2024-11-12 21:27:29,032 - karate_compatibility_verifier - INFO - Here is the corrected Karate DSL test script:

````
Feature: Testing User Enumeration and Session Management

Scenario: Verify user enumeration vulnerability
Given url 'http://192.168.1.112:3133/rest/user/login'
And request { username: 'nonexistent_user', password: 'Password123' }
When method post
Then status 401
And match response contains 'Incorrect username or password.'

* def loginExistingUser = function() {
    And request { username: 'existing_user', password: 'WrongPassword' }
    When method post
    Then status 401
    And match response contains 'Incorrect username or password.'
}

Scenario Outline: Test for session management vulnerability
Given url 'http://192.168.1.112:3133/rest/user/login'
And request { username: '<username>', password: '<password>' }
When method post
Then status 200
And match response contains 'Login successful.'

Examples:
| username | password |
| existing_user | Password123! |
| nonexistent_user | WrongPassword |

Scenario: Verify session invalidation on logout
Given url 'http://192.168.1.112:3133/rest/session/logout'
And header Authorization = karate.get('user_token')
When method post
Then status 200
And match response contains 'Successfully logged out.'

* def testSessionReuse = function() {
    Given url 'http://192.168.1.112:3133/api/secure'
    And header Authorization = karate.get('user_token')
    When method get
    Then status 401
    And match response contains 'Session is not valid.'
}
```

Note that I replaced `<user_ token>` with `karate.get('user_token')`, assuming you have a variable named `user_token` defined elsewhere in your test script.
2024-11-12 21:28:53,934 - karate_compatibility_verifier - INFO - 
Final verified content:
2024-11-12 21:28:53,934 - karate_compatibility_verifier - INFO - Here is the corrected Karate DSL script:

```
Feature: Testing User Enumeration and Session Management

Scenario: Verify user enumeration vulnerability
Given url 'http://192.168.1.112:3133/rest/user/login'
And request { username: 'nonexistent_user', password: 'Password123' }
When method post
Then status 401
And match response contains 'Incorrect username or password.'

* def loginExistingUser = function() {
    And request { username: 'existing_user', password: 'WrongPassword' }
    When method post
    Then status 401
    And match response contains 'Incorrect username or password.'
}

Scenario Outline: Test for session management vulnerability
Given url 'http://192.168.1.112:3133/rest/user/login'
And request { username: '<username>', password: '<password>' }
When method post
Then status 200
And match response contains 'Login successful.'

Examples:
| username | password |
| existing_user | Password123! |
| nonexistent_user | WrongPassword |

Scenario: Verify session invalidation on logout
Given url 'http://192.168.1.112:3133/rest/session/logout'
And header Authorization = karate.get('user_token')
When method post
Then status 200
And match response contains 'Successfully logged out.'

* def testSessionReuse = function() {
    Given url 'http://192.168.1.112:3133/api/secure'
    And header Authorization = karate.get('user_token')
    When method get
    Then status 401
    And match response contains 'Session is not valid.'
}
```
2024-11-12 21:28:53,935 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_002_krtestjui_rest_user_login_POST_verified.feature
2024-11-12 21:28:53,935 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_002_krtestjui_rest_user_login_POST.feature: Here is the corrected Karate DSL script:

```
Feature: Testing User Enumeration and Session Management

Scenario: Verify user enumeration vulnerability
Given url 'http://192.168.1.112:3133/rest/user/login'
And request { username: 'nonexistent_user', password: 'Password123' }
When method post
Then status 401
And match response contains 'Incorrect username or password.'

* def loginExistingUser = function() {
    And request { username: 'existing_user', password: 'WrongPassword' }
    When method post
    Then status 401
    And match response contains 'Incorrect username or password.'
}

Scenario Outline: Test for session management vulnerability
Given url 'http://192.168.1.112:3133/rest/user/login'
And request { username: '<username>', password: '<password>' }
When method post
Then status 200
And match response contains 'Login successful.'

Examples:
| username | password |
| existing_user | Password123! |
| nonexistent_user | WrongPassword |

Scenario: Verify session invalidation on logout
Given url 'http://192.168.1.112:3133/rest/session/logout'
And header Authorization = karate.get('user_token')
When method post
Then status 200
And match response contains 'Successfully logged out.'

* def testSessionReuse = function() {
    Given url 'http://192.168.1.112:3133/api/secure'
    And header Authorization = karate.get('user_token')
    When method get
    Then status 401
    And match response contains 'Session is not valid.'
}
```
2024-11-12 21:28:53,935 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2024-11-12 21:28:53,936 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2024-11-12 21:28:53,963 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2024-11-12 21:28:53,964 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.106:4893/v1/chat/completions
2024-11-12 21:30:09,354 - karate_llm_test_gen - INFO - Response status code: 200
2024-11-12 21:30:09,354 - karate_llm_test_gen - INFO - Generated test case: Here are the Karate DSL test scripts for each of the given API endpoints:

**Scenario 1: Test API fo...
2024-11-12 21:30:09,355 - __main__ - INFO - Generated Karate test for /api/BasketItems/ POST at output/karate_feature_files/ID_003_krtestjui_api_BasketItems__POST.feature
2024-11-12 21:30:09,355 - karate_compatibility_verifier - INFO - Original content:
2024-11-12 21:30:09,355 - karate_compatibility_verifier - INFO - Here are the Karate DSL test scripts for each of the given API endpoints:

**Scenario 1: Test API for Account Enumeration during Signup**
```karate
Feature: Test API for Account Enumeration during Signup

Scenario: Verify that the signup process does not allow account enumeration

* url = 'http://192.168.1.112:3133/api/BasketItems/'
* request = { username: 'existingUser', password: 'Password123!', email: 'existing@example.com' }
* method post
* status 200
* match response contains "A verification email has been sent."
```

**Scenario 2: Test API for OAuth Token Generation Flaw**
```karate
Feature: Test API for OAuth Token Generation Flaw

Scenario: Attempt to exploit OAuth token generation with a stolen authorization code

* url = 'http://192.168.1.112:3133/api/BasketItems/'
* request = { grant_type: 'authorization_code', code: 'stolen_ code', redirect_uri: 'http://evil.example.com', client_id: 'client_id', client_secret: 'client_secret' }
* method post
* status 400
* match response contains "Invalid grant"
```

**Scenario 3: Design a Karate DSL test scenario to evaluate the system's resilience against access token theft**
```karate
Feature: Access Token Theft Mitigation

Scenario: Assess protections against unauthorized access token usage

* url = 'http://192.168.1.112:3133/api/BasketItems/'
* header Authorization = 'Bearer <stolen_token>'
* method get
* status 401
* match response contains "Invalid or expired token."
```

Note that these test scripts are designed to check for potential Broken Authentication/Authorization vulnerabilities in the given API endpoints.
2024-11-12 21:31:37,328 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2024-11-12 21:31:37,328 - karate_compatibility_verifier - INFO - Here are the corrected Karate DSL test scripts:

**Scenario 1: Test API for Account Enumeration during Signup**
```karate
Feature: Test API for Account Enumeration during Signup

Scenario: Verify that the signup process does not allow account enumeration

Given url 'http://192.168.1.112:3133/api/BasketItems/'
And request { username: 'existingUser', password: 'Password123!', email: 'existing@example.com' }
When method post
Then status 200
And match response contains "A verification email has been sent."
```

**Scenario 2: Test API for OAuth Token Generation Flaw**
```karate
Feature: Test API for OAuth Token Generation Flaw

Scenario: Attempt to exploit OAuth token generation with a stolen authorization code

Given url 'http://192.168.1.112:3133/api/BasketItems/'
And request { grant_type: 'authorization_code', code: 'stolen_code', redirect_uri: 'http://evil.example.com', client_id: 'client_id', client_secret: 'client_secret' }
When method post
Then status 400
And match response contains "Invalid grant"
```

**Scenario 3: Design a Karate DSL test scenario to evaluate the system's resilience against access token theft**
```karate
Feature: Access Token Theft Mitigation

Scenario: Assess protections against unauthorized access token usage

Given url 'http://192.168.1.112:3133/api/BasketItems/'
And header Authorization = 'Bearer <stolen_token>'
When method get
Then status 401
And match response contains "Invalid or expired token."
```
2024-11-12 21:32:49,047 - karate_compatibility_verifier - INFO - 
Final verified content:
2024-11-12 21:32:49,047 - karate_compatibility_verifier - INFO - Here are the corrected Karate DSL test scripts:

**Scenario 1: Test API for Account Enumeration during Signup**
```karate
Feature: Test API for Account Enumeration during Signup
Scenario: Verify that the signup process does not allow account enumeration
Given url 'http://192.168.1.112:3133/api/BasketItems/'
And request { username: 'existingUser', password: 'Password123!', email: 'existing@example.com' }
When method post
Then status 200
And match response contains "A verification email has been sent."
```

**Scenario 2: Test API for OAuth Token Generation Flaw**
```karate
Feature: Test API for OAuth Token Generation Flaw
Scenario: Attempt to exploit OAuth token generation with a stolen authorization code
Given url 'http://192.168.1.112:3133/api/BasketItems/'
And request { grant_type: 'authorization_code', code: 'stolen_code', redirect_uri: 'http://evil.example.com', client_id: 'client_id', client_secret: 'client_secret' }
When method post
Then status 400
And match response contains "Invalid grant"
```

**Scenario 3: Design a Karate DSL test scenario to evaluate the system's resilience against access token theft**
```karate
Feature: Access Token Theft Mitigation
Scenario: Assess protections against unauthorized access token usage
Given url 'http://192.168.1.112:3133/api/BasketItems/'
And header Authorization = 'Bearer <stolen_token>'
When method get
Then status 401
And match response contains "Invalid or expired token."
```
2024-11-12 21:32:49,047 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_003_krtestjui_api_BasketItems__POST_verified.feature
2024-11-12 21:32:49,047 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_003_krtestjui_api_BasketItems__POST.feature: Here are the corrected Karate DSL test scripts:

**Scenario 1: Test API for Account Enumeration during Signup**
```karate
Feature: Test API for Account Enumeration during Signup
Scenario: Verify that the signup process does not allow account enumeration
Given url 'http://192.168.1.112:3133/api/BasketItems/'
And request { username: 'existingUser', password: 'Password123!', email: 'existing@example.com' }
When method post
Then status 200
And match response contains "A verification email has been sent."
```

**Scenario 2: Test API for OAuth Token Generation Flaw**
```karate
Feature: Test API for OAuth Token Generation Flaw
Scenario: Attempt to exploit OAuth token generation with a stolen authorization code
Given url 'http://192.168.1.112:3133/api/BasketItems/'
And request { grant_type: 'authorization_code', code: 'stolen_code', redirect_uri: 'http://evil.example.com', client_id: 'client_id', client_secret: 'client_secret' }
When method post
Then status 400
And match response contains "Invalid grant"
```

**Scenario 3: Design a Karate DSL test scenario to evaluate the system's resilience against access token theft**
```karate
Feature: Access Token Theft Mitigation
Scenario: Assess protections against unauthorized access token usage
Given url 'http://192.168.1.112:3133/api/BasketItems/'
And header Authorization = 'Bearer <stolen_token>'
When method get
Then status 401
And match response contains "Invalid or expired token."
```
2024-11-12 21:32:49,048 - __main__ - INFO - Moving generated Karate feature files...
2024-11-12 21:32:49,052 - __main__ - INFO - Creating the Karate Test Framework with generated feature files
2024-11-12 21:32:51,541 - karate_test_framework - INFO - Starting to move Karate feature files...
2024-11-12 21:32:51,542 - karate_test_framework - INFO - Removed ID_002_krtestjui_rest_user_login_POST_verified.feature from ./output/karate_framework/bolatestingframework/src/test/resources
2024-11-12 21:32:51,542 - karate_test_framework - INFO - Removed ID_001_krtestjui_api_Users__POST_verified.feature from ./output/karate_framework/bolatestingframework/src/test/resources
2024-11-12 21:32:51,542 - karate_test_framework - INFO - Removed ID_003_krtestjui_api_BasketItems__POST_verified.feature from ./output/karate_framework/bolatestingframework/src/test/resources
2024-11-12 21:32:51,542 - karate_test_framework - INFO - Moved ID_002_krtestjui_rest_user_login_POST_verified.feature to ./output/karate_framework/bolatestingframework/src/test/resources
2024-11-12 21:32:51,542 - karate_test_framework - INFO - Moved ID_001_krtestjui_api_Users__POST_verified.feature to ./output/karate_framework/bolatestingframework/src/test/resources
2024-11-12 21:32:51,542 - karate_test_framework - INFO - Moved ID_003_krtestjui_api_BasketItems__POST_verified.feature to ./output/karate_framework/bolatestingframework/src/test/resources
2024-11-12 21:32:51,542 - karate_test_framework - INFO - Finished moving Karate feature files.
2024-11-12 21:32:51,542 - karate_test_framework - INFO - Running Karate tests in Docker...
2024-11-12 21:32:51,542 - karate_test_framework - INFO - Building Docker image...
2024-11-12 21:33:27,736 - karate_test_framework - INFO - Running Karate tests in Docker...
2024-11-12 21:33:36,702 - karate_test_framework - INFO - Docker run logs saved to: /home/mango/Desktop/2024/1104/karate-bola-guard/output/karate_framework/target/karate-reports_L3I-jui-ba9c0806-571a-47e9-bcc5-f6206f5ec9a9/docker_run_logs_L3I-jui-ba9c0806-571a-47e9-bcc5-f6206f5ec9a9.txt
2024-11-12 21:33:36,702 - karate_test_framework - INFO - Test reports are available in: /home/mango/Desktop/2024/1104/karate-bola-guard/output/karate_framework/target/karate-reports_L3I-jui-ba9c0806-571a-47e9-bcc5-f6206f5ec9a9
2024-11-12 21:33:36,990 - karate_test_framework - INFO - Starting iteration 1 of 3
2024-11-12 21:33:36,990 - karate_test_framework - INFO - Building Docker image...
2024-11-12 21:33:41,279 - karate_test_framework - INFO - Running Karate tests in Docker...
2024-11-12 21:33:51,077 - karate_test_framework - INFO - Docker run logs saved to: /home/mango/Desktop/2024/1104/karate-bola-guard/output/karate_framework/target/karate-reports_L3I-jui-ba9c0806-571a-47e9-bcc5-f6206f5ec9a9/docker_run_logs_L3I-jui-ba9c0806-571a-47e9-bcc5-f6206f5ec9a9.txt
2024-11-12 21:33:51,077 - karate_test_framework - INFO - Test reports are available in: /home/mango/Desktop/2024/1104/karate-bola-guard/output/karate_framework/target/karate-reports_L3I-jui-ba9c0806-571a-47e9-bcc5-f6206f5ec9a9
2024-11-12 21:33:51,768 - karate_test_framework - INFO - Rewriting 1 broken tests in iteration 1
2024-11-12 21:33:51,781 - karate_test_framework - INFO - errors found: [('failed', "mismatched input 'u' expecting <EOF>, mismatched input 'u' expecting <EOF>, mismatched input 'u' expecting <EOF>, mismatched input 'u' expecting <EOF>"), ('verified', "mismatched input 'u' expecting <EOF>, mismatched input 'u' expecting <EOF>, mismatched input 'u' expecting <EOF>, mismatched input 'u' expecting <EOF>"), ('verified', "mismatched input 'd' expecting <EOF>, mismatched input 'd' expecting <EOF>, mismatched input 'd' expecting <EOF>, mismatched input 'd' expecting <EOF>")]
2024-11-12 21:34:44,872 - karate_test_framework - INFO - Updated test script: ID_001_krtestjui_api_Users__POST_verified.feature
2024-11-12 21:34:44,872 - karate_test_framework - INFO - Starting iteration 2 of 3
2024-11-12 21:34:44,872 - karate_test_framework - INFO - Building Docker image...
2024-11-12 21:35:19,986 - karate_test_framework - INFO - Running Karate tests in Docker...
2024-11-12 21:35:28,525 - karate_test_framework - INFO - Docker run logs saved to: /home/mango/Desktop/2024/1104/karate-bola-guard/output/karate_framework/target/karate-reports_L3I-jui-ba9c0806-571a-47e9-bcc5-f6206f5ec9a9/docker_run_logs_L3I-jui-ba9c0806-571a-47e9-bcc5-f6206f5ec9a9.txt
2024-11-12 21:35:28,525 - karate_test_framework - INFO - Test reports are available in: /home/mango/Desktop/2024/1104/karate-bola-guard/output/karate_framework/target/karate-reports_L3I-jui-ba9c0806-571a-47e9-bcc5-f6206f5ec9a9
2024-11-12 21:35:29,078 - karate_test_framework - INFO - Rewriting 1 broken tests in iteration 2
2024-11-12 21:35:29,116 - karate_test_framework - INFO - errors found: [('failed', "mismatched input 'u' expecting <EOF>, mismatched input 'u' expecting <EOF>, mismatched input 'u' expecting <EOF>, mismatched input 'u' expecting <EOF>"), ('verified', "mismatched input 'u' expecting <EOF>, mismatched input 'u' expecting <EOF>, mismatched input 'u' expecting <EOF>, mismatched input 'u' expecting <EOF>"), ('verified', "mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>")]
2024-11-12 21:36:19,477 - karate_test_framework - INFO - Updated test script: ID_001_krtestjui_api_Users__POST_verified.feature
2024-11-12 21:36:19,477 - karate_test_framework - INFO - Starting iteration 3 of 3
2024-11-12 21:36:19,477 - karate_test_framework - INFO - Building Docker image...
2024-11-12 21:36:52,303 - karate_test_framework - INFO - Running Karate tests in Docker...
2024-11-12 21:37:00,867 - karate_test_framework - INFO - Docker run logs saved to: /home/mango/Desktop/2024/1104/karate-bola-guard/output/karate_framework/target/karate-reports_L3I-jui-ba9c0806-571a-47e9-bcc5-f6206f5ec9a9/docker_run_logs_L3I-jui-ba9c0806-571a-47e9-bcc5-f6206f5ec9a9.txt
2024-11-12 21:37:00,867 - karate_test_framework - INFO - Test reports are available in: /home/mango/Desktop/2024/1104/karate-bola-guard/output/karate_framework/target/karate-reports_L3I-jui-ba9c0806-571a-47e9-bcc5-f6206f5ec9a9
2024-11-12 21:37:01,461 - karate_test_framework - INFO - Rewriting 1 broken tests in iteration 3
2024-11-12 21:37:01,510 - karate_test_framework - INFO - errors found: [('failed', "mismatched input 'u' expecting <EOF>, mismatched input 'u' expecting <EOF>, mismatched input 'u' expecting <EOF>, mismatched input 'u' expecting <EOF>"), ('verified', "mismatched input 'u' expecting <EOF>, mismatched input 'u' expecting <EOF>, mismatched input 'u' expecting <EOF>, mismatched input 'u' expecting <EOF>"), ('verified', "mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>, mismatched input '`' expecting <EOF>")]
2024-11-12 21:37:52,181 - karate_test_framework - INFO - Updated test script: ID_001_krtestjui_api_Users__POST_verified.feature
2024-11-12 21:37:52,181 - karate_test_framework - ERROR - Reached maximum iterations (3). Some tests may still be failing.
2024-11-12 21:37:52,181 - karate_test_framework - INFO - Opening final test report...
2024-11-12 21:37:52,181 - karate_test_framework - ERROR - Test report not found. Make sure tests have been run.
