2025-02-01 10:55:23,562 - __main__ - INFO - Skipping fragment creation: False
2025-02-01 10:55:23,642 - __main__ - DEBUG - Starting fragment retrieval process.
2025-02-01 10:55:24,041 - __main__ - DEBUG - Retrieved fragments: [{'content': '{"method": "GET", "parameters": [{"description": "Name of organisation.", "in": "path", "name": "org", "required": true, "schema": {"type": "string"}}, {"description": "Issues assigned to you / created by you / mentioning you / you\'re\\nsubscribed to updates for / All issues the authenticated user can see\\n", "in": "query", "name": "filter", "required": true, "schema": {"default": "all", "enum": ["assigned", "created", "mentioned", "subscribed", "all"], "type": "string"}}, {"in": "query", "name": "state", "required": true, "schema": {"default": "open", "enum": ["open", "closed"], "type": "string"}}, {"description": "String list of comma separated Label names. Example - bug,ui,@high.", "in": "query", "name": "labels", "required": true, "schema": {"type": "string"}}, {"in": "query", "name": "sort", "required": true, "schema": {"default": "created", "enum": ["created", "updated", "comments"], "type": "string"}}, {"in": "query", "name": "direction", "required": true, "schema": {"default": "desc", "enum": ["asc", "desc"], "type": "string"}}, {"description": "Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\\nOnly issues updated at or after this time are returned.\\n", "in": "query", "name": "since", "schema": {"type": "string"}}, {"description": "You can check the current version of media type in responses.\\n", "in": "header", "name": "X-GitHub-Media-Type", "schema": {"type": "string"}}, {"description": "Is used to set specified media type.", "in": "header", "name": "Accept", "schema": {"type": "string"}}, {"in": "header", "name": "X-RateLimit-Limit", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Remaining", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Reset", "schema": {"type": "integer"}}, {"in": "header", "name": "X-GitHub-Request-Id", "schema": {"type": "integer"}}], "path": "/orgs/{org}/issues", "requestBody": {}, "responses": {"403": {"content": {}, "description": "API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\\nfor details.\\n"}}}', 'metadata': {'filename': '0084_orgs_org_issues_get_403.json'}}, {'content': '{"method": "GET", "parameters": [{"description": "Name of organisation.", "in": "path", "name": "org", "required": true, "schema": {"type": "string"}}, {"description": "Issues assigned to you / created by you / mentioning you / you\'re\\nsubscribed to updates for / All issues the authenticated user can see\\n", "in": "query", "name": "filter", "required": true, "schema": {"default": "all", "enum": ["assigned", "created", "mentioned", "subscribed", "all"], "type": "string"}}, {"in": "query", "name": "state", "required": true, "schema": {"default": "open", "enum": ["open", "closed"], "type": "string"}}, {"description": "String list of comma separated Label names. Example - bug,ui,@high.", "in": "query", "name": "labels", "required": true, "schema": {"type": "string"}}, {"in": "query", "name": "sort", "required": true, "schema": {"default": "created", "enum": ["created", "updated", "comments"], "type": "string"}}, {"in": "query", "name": "direction", "required": true, "schema": {"default": "desc", "enum": ["asc", "desc"], "type": "string"}}, {"description": "Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\\nOnly issues updated at or after this time are returned.\\n", "in": "query", "name": "since", "schema": {"type": "string"}}, {"description": "You can check the current version of media type in responses.\\n", "in": "header", "name": "X-GitHub-Media-Type", "schema": {"type": "string"}}, {"description": "Is used to set specified media type.", "in": "header", "name": "Accept", "schema": {"type": "string"}}, {"in": "header", "name": "X-RateLimit-Limit", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Remaining", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Reset", "schema": {"type": "integer"}}, {"in": "header", "name": "X-GitHub-Request-Id", "schema": {"type": "integer"}}], "path": "/orgs/{org}/issues", "requestBody": {}, "responses": {"200": {"content": {"application/json": {"schema": {"items": {"properties": {"assignee": {"properties": {"avatar_url": {"type": "string"}, "gravatar_id": {"type": "string"}, "id": {"type": "integer"}, "login": {"type": "string"}, "url": {"type": "string"}}, "type": "object"}, "body": {"type": "string"}, "closed_at": {"description": "ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ", "type": "string"}, "comments": {"type": "integer"}, "created_at": {"description": "ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ", "type": "string"}, "html_url": {"type": "string"}, "labels": {"items": {"properties": {"color": {"type": "string"}, "name": {"type": "string"}, "url": {"type": "string"}}, "type": "object"}, "type": "array"}, "milestone": {"properties": {"closed_issues": {"type": "integer"}, "created_at": {"description": "ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ", "type": "string"}, "creator": {"properties": {"avatar_url": {"type": "string"}, "gravatar_id": {"type": "string"}, "id": {"type": "integer"}, "login": {"type": "string"}, "url": {"type": "string"}}, "type": "object"}, "description": {"type": "string"}, "due_on": {"description": "ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ", "type": "string"}, "number": {"type": "integer"}, "open_issues": {"type": "integer"}, "state": {"type": "object"}, "title": {"type": "string"}, "url": {"type": "string"}}, "type": "object"}, "number": {"type": "integer"}, "pull_request": {"properties": {"diff_url": {"type": "string"}, "html_url": {"type": "string"}, "patch_url": {"type": "string"}}, "type": "object"}, "state": {"type": "object"}, "title": {"type": "string"}, "updated_at": {"description": "ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ", "type": "string"}, "url": {"type": "string"}, "user": {"properties": {"avatar_url": {"type": "string"}, "gravatar_id": {"type": "string"}, "id": {"type": "integer"}, "login": {"type": "string"}, "url": {"type": "string"}}, "type": "object"}}, "type": "object"}, "type": "array"}}}, "description": "OK"}}}', 'metadata': {'filename': '0083_orgs_org_issues_get_200.json'}}, {'content': '{"method": "GET", "parameters": [{"description": "Name of repository owner.", "in": "path", "name": "owner", "required": true, "schema": {"type": "string"}}, {"description": "Name of repository.", "in": "path", "name": "repo", "required": true, "schema": {"type": "string"}}, {"description": "Issues assigned to you / created by you / mentioning you / you\'re\\nsubscribed to updates for / All issues the authenticated user can see\\n", "in": "query", "name": "filter", "required": true, "schema": {"default": "all", "enum": ["assigned", "created", "mentioned", "subscribed", "all"], "type": "string"}}, {"in": "query", "name": "state", "required": true, "schema": {"default": "open", "enum": ["open", "closed"], "type": "string"}}, {"description": "String list of comma separated Label names. Example - bug,ui,@high.", "in": "query", "name": "labels", "required": true, "schema": {"type": "string"}}, {"in": "query", "name": "sort", "required": true, "schema": {"default": "created", "enum": ["created", "updated", "comments"], "type": "string"}}, {"in": "query", "name": "direction", "required": true, "schema": {"default": "desc", "enum": ["asc", "desc"], "type": "string"}}, {"description": "Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\\nOnly issues updated at or after this time are returned.\\n", "in": "query", "name": "since", "schema": {"type": "string"}}, {"description": "You can check the current version of media type in responses.\\n", "in": "header", "name": "X-GitHub-Media-Type", "schema": {"type": "string"}}, {"description": "Is used to set specified media type.", "in": "header", "name": "Accept", "schema": {"type": "string"}}, {"in": "header", "name": "X-RateLimit-Limit", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Remaining", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Reset", "schema": {"type": "integer"}}, {"in": "header", "name": "X-GitHub-Request-Id", "schema": {"type": "integer"}}], "path": "/repos/{owner}/{repo}/issues", "requestBody": {}, "responses": {"403": {"content": {}, "description": "API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\\nfor details.\\n"}}}', 'metadata': {'filename': '0224_repos_owner_repo_issues_get_403.json'}}], form collection oas_github_fragments
2025-02-01 10:55:24,041 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-01 10:55:24,042 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-01 10:55:24,484 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-01 10:55:24,484 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-01 10:58:19,856 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-01 10:58:19,857 - karate_llm_test_gen - INFO - Generated test case: ```yaml
Feature: Testing broken authentication and authorization on /orgs/{org}/issues endpoint
Give...
2025-02-01 10:58:19,857 - __main__ - INFO - Generated Karate test for /orgs/{org}/issues GET at output/karate_feature_files/ID_001_krtestoas_orgs_org_issues_GET.feature
2025-02-01 10:58:19,858 - karate_compatibility_verifier - INFO - Original content:
2025-02-01 10:58:19,858 - karate_compatibility_verifier - INFO - ```yaml
Feature: Testing broken authentication and authorization on /orgs/{org}/issues endpoint
Given url 'http://oas_github.api'
Scenario: Unauthorized access attempt with invalid credentials
    And def orgId = 'invalidOrgId' // Assuming the ID is used in URL for identification purposes
    When method get '/orgs/' + orgId + '/issues'
    Then status 401 or 403
Scenario: Exploiting potential vulnerabilities with manipulated parameters (e.g., SQL injection)
    Given url 'http://oas_github.api'
    When method get '/orgs/{org}/issues?user='; DROP TABLE sessions; -- This is a hypothetical example, not actual code to be executed in production environments
    Then status 500 or unexpected behavior (e.g., error message indicating SQL injection attempt)
Scenario: Attempting access without required scopes/permissions if any are specified later on API specification revisions
    Given url 'http://oas_github.api' // If the endpoint requires specific scopes, replace with '/orgs/{org}/issues?scope=<requiredScope>' where <requiredScope> is a placeholder for actual scope values as per OAuth 2.0 spec or similar authorization framework used
    When method get '/orgs/{org}/issues'
    Then status 403 and response contains 'Insufficient permissions to access this resource.' // Or appropriate error message based on the API documentation/specification for unauthorized requests due to missing scopes.
```
2025-02-01 11:01:44,784 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-01 11:01:44,784 - karate_compatibility_verifier - INFO - ```yaml
Feature: Testing broken authentication and authorization on /orgs/{org}/issues endpoint
Given url 'http://oas_github.api'
Scenario: Unauthorized access attempt with invalid credentials
    And def orgId = 'invalidOrgId' // Assuming the ID is used in URL for identification purposes
    When method get '/orgs/' + orgId + '/issues'
    Then status 401 or 403
Scenario: Exploiting potential vulnerabilities with manipulated parameters (e.g., SQL injection)
    Given url 'http://oas_github.api'
    When method get '/orgs/{org}/issues?user='; DROP TABLE sessions -- This is a hypothetical example, not actual code to be executed in production environments
    Then status 500 or unexpected behavior (e.g., error message indicating SQL injection attempt)
Scenario: Attempting access without required scopes/permissions if any are specified later on API specification revisions
    Given url 'http://oas_github.api' // If the endpoint requires specific scopes, replace with '/orgs/{org}/issues?scope=<requiredScope>' where <requiredScope> is a placeholder for actual scope values as per OAuth 2.0 spec or similar authorization framework used
    When method get '/orgs/' + orgId + '/issues' // Assuming the API does not require scopes, otherwise use WithScopes('scope=<requiredScope>) if needed based on documentation/specification for unauthorized requests due to missing scopes.
    Then status 403 and response contains 'Insufficient permissions to access this resource.' // Or appropriate error message as per the API's handling of insufficient permissions or scope-related errors.
```
2025-02-01 11:03:42,915 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-01 11:03:42,915 - karate_compatibility_verifier - INFO - ```yaml
Feature: Testing broken authentication and authorization on /orgs/{org}/issues endpoint
    Given url 'http://oas_github.api'
Scenario: Unauthorized access attempt with invalid credentials
    And def orgId = 'invalidOrgId' // Assuming the ID is used in URL for identification purposes
    When method get '/orgs/' + orgId + '/issues'
    Then status 401 or 403
Scenario: Exploiting potential vulnerabilities with manipulated parameters (e.g., SQL injection)
    Given url 'http://oas_github.api'
    When method get '/orgs/{org}/issues?user='; DROP TABLE sessions -- This is a hypothetical example, not actual code to be executed in production environments
    Then status 500 or unexpected behavior (e.g., error message indicating SQL injection attempt)
Scenario: Attempting access without required scopes/permissions if any are specified later on API specification revisions
    Given url 'http://oas_github.api' // If the endpoint requires specific scopes, replace with '/orgs/{org}/issues?scope=<requiredScope>' where <requiredScope> is a placeholder for actual scope values as per OAuth 2.0 spec or similar authorization framework used
    When method get '/orgs/' + orgId + '/issues' // Assuming the API does not require scopes, otherwise use WithScopes('scope=<requiredScope>) if needed based on documentation/specification for unauthorized requests due to missing scopes.
    Then status 403 and response contains 'Insufficient permissions to access this resource.' // Or appropriate error message as per the API's handling of insufficient permissions or scope-related errors.
```
2025-02-01 11:03:42,916 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_001_krtestoas_orgs_org_issues_GET_verified.feature
2025-02-01 11:03:42,916 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_001_krtestoas_orgs_org_issues_GET.feature: ```yaml
Feature: Testing broken authentication and authorization on /orgs/{org}/issues endpoint
    Given url 'http://oas_github.api'
Scenario: Unauthorized access attempt with invalid credentials
    And def orgId = 'invalidOrgId' // Assuming the ID is used in URL for identification purposes
    When method get '/orgs/' + orgId + '/issues'
    Then status 401 or 403
Scenario: Exploiting potential vulnerabilities with manipulated parameters (e.g., SQL injection)
    Given url 'http://oas_github.api'
    When method get '/orgs/{org}/issues?user='; DROP TABLE sessions -- This is a hypothetical example, not actual code to be executed in production environments
    Then status 500 or unexpected behavior (e.g., error message indicating SQL injection attempt)
Scenario: Attempting access without required scopes/permissions if any are specified later on API specification revisions
    Given url 'http://oas_github.api' // If the endpoint requires specific scopes, replace with '/orgs/{org}/issues?scope=<requiredScope>' where <requiredScope> is a placeholder for actual scope values as per OAuth 2.0 spec or similar authorization framework used
    When method get '/orgs/' + orgId + '/issues' // Assuming the API does not require scopes, otherwise use WithScopes('scope=<requiredScope>) if needed based on documentation/specification for unauthorized requests due to missing scopes.
    Then status 403 and response contains 'Insufficient permissions to access this resource.' // Or appropriate error message as per the API's handling of insufficient permissions or scope-related errors.
```
2025-02-01 11:03:42,917 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-01 11:03:42,918 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-01 11:03:42,958 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-01 11:03:42,959 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-01 11:07:10,279 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-01 11:07:10,280 - karate_llm_test_gen - INFO - Generated test case: ```diff
+++ file:///path/to/karate-examples/orgsIssuesTestScenarios.feature
@@ -1,6 +1,20 @@: Org Is...
2025-02-01 11:07:10,280 - __main__ - INFO - Generated Karate test for /orgs/{org}/issues GET at output/karate_feature_files/ID_002_krtestoas_orgs_org_issues_GET.feature
2025-02-01 11:07:10,281 - karate_compatibility_verifier - INFO - Original content:
2025-02-01 11:07:10,281 - karate_compatibility_verifier - INFO - ```diff
+++ file:///path/to/karate-examples/orgsIssuesTestScenarios.feature
@@ -1,6 +1,20 @@: Org Issues Security Test Cases using Karate DSL
 title: 'Broken Authentication and Authorization Check for /orgs/{org}/issues'
 scn: BrokenAuthOrAuthorizationIssueAccessingOrganisationalIssues
---
- Given url http://oas_github.api/orgs/12345/issues
+ Given url http://oas_github.com/orgs/{org}/issues
  when user is not authenticated or authorized to access the org's issues
+ And attempt with invalid credentials, such as an expired token or null session ID
+ When method get
+ Then status code should be either 401 (Unautmouted) or 403 (Forbidden), depending on specific error handling in API implementation.
- Switch unauthenticatedStatus = callonce read('classpath:helpers/unauthenticatedAccess'),
-   switch authenticatedStatus = callonce read('classpath:helpers/authenticatedIssueReading'),
+ def unauthenticatedResponse = karate.find(read('features/data/orgs_issueUnauthorizedResponses.json'), { org: 12345 }) or {}
+   * switch on (unauthenticatedStatus ? authenticatedStatus : null)
+     case 401:
+       then status == 401
+       and message in unauthenticatedResponse?.message ?? 'Unauthorized access attempt'
+     break
+   
+   def validCredentials = { orgId: 12345, userRole: ['admin', 'editor'] }
+   * switch on (authenticatedStatus ? null : unauthenticatedResponse)
+     case 403:
+       then status == 4 fixture.json'orgs_issueReading') or {}
-    and message in authenticatedResponse?.message ?? 'Not authorized to access this resource.'
```
2025-02-01 11:10:47,511 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-01 11:10:47,511 - karate_compatibility_verifier - INFO - ```diff
+++ file:///path/to/karate-examples/orgsIssuesTestScenarios.feature
@@ -1,6 +1,20 @@: Org Issues Security Test Cases using Karate DSL
 title: 'Broken Authentication and Authorization Check for /orgs/{org}/issues'
 scn: BrokenAuthOrAuthorizationIssueAccessingOrganisationalIssues
---
+ Given url http://oas_github.com/orgs/{org}/issues
   when user is not authenticated or authorized to access the org's issues
  and def invalidCredentials = { 'organizationId': 12345, 'userRole': ['nonexistentUser'] }
+ And attempt with invalid credentials using HTTP request method POST instead of GET for better control over error handling.
+ When post
+   With valid headers from karate-config.js or manually set if needed
+ Then status code should be 401 (Unauthorized) and message in response matches 'Invalid user role'
+     switch on invalidCredentials?.userRole
+       case null:
+         then status == 403 // Assuming API returns a 403 when no valid roles are provided. Adjust based on actual implementation details.
+         and message is equal to response()['message'] ?? 'Invalid user role'
+       break
+   
   * def authenticatedCredentials = { 'organizationId': 12345, 'userRole': ['admin', 'editor'] } // Assuming this represents valid credentials. Adjust as per actual implementation details.
+ And attempt with valid credentials using HTTP request method GET instead of POST for standard access test cases.
+ When get
+   With headers set to include necessary authentication tokens or cookies from karate-config.js
+ Then status code should be 200 (OK) and message in response is empty, indicating successful access without errors.
```
2025-02-01 11:13:01,185 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-01 11:13:01,185 - karate_compatibility_verifier - INFO - ```diff
+++ file:///path/to/karate-examples/orgsIssuesTestScenarios.feature
@@ -1,6 +1,9 @@: Org Issues Security Test Cases using Karate DSL
 title: 'Broken Authentication and Authorization Check for /orgs/{org}/issues'
 scn: BrokenAuthOrAuthorizationIssueAccessingOrganisationalIssues
---
 Given url http://oas_github.com/orgs/{org}/issues
 When user is not authenticated or authorized to access the org's issues
 And def invalidCredentials = { 'organizationId': 12345, 'userRole': ['nonexistentUser'] }
 Then status code should be 401 (Unautzhorized) and message in response is "Invalid user role"
 When post with valid headers from karate-config.js or manually set if needed
   And attempt to access org's issues using invalid credentials
+When get // Changed request method for standard test case as per best practices, assuming POST was initially used erroneously here.
    With valid headers including necessary authentication tokens or cookies from karate-config.js
 Then status code should be 401 (Unauthorized) and message in response is "Invalid user role"
+ // Added a switch statement for handling different invalid roles, assuming API returns specific error messages based on the provided 'userRole'. Adjust as per actual implementation details.
   * def validCredentials = { 'organizationId': 12345, 'userRole': ['admin', 'editor'] } // Assuming this represents a set of valid credentials for testing access with correct roles.
 When get With authenticatedHeaders from karate-config.js or manually set if needed
   And attempt to access org's issues using valid credentials
 Then status code should be 200 (OK) and message in response is empty, indicating successful unauthorized request handling as per API design for testing purposes only.
```
2025-02-01 11:13:01,185 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_002_krtestoas_orgs_org_issues_GET_verified.feature
2025-02-01 11:13:01,186 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_002_krtestoas_orgs_org_issues_GET.feature: ```diff
+++ file:///path/to/karate-examples/orgsIssuesTestScenarios.feature
@@ -1,6 +1,9 @@: Org Issues Security Test Cases using Karate DSL
 title: 'Broken Authentication and Authorization Check for /orgs/{org}/issues'
 scn: BrokenAuthOrAuthorizationIssueAccessingOrganisationalIssues
---
 Given url http://oas_github.com/orgs/{org}/issues
 When user is not authenticated or authorized to access the org's issues
 And def invalidCredentials = { 'organizationId': 12345, 'userRole': ['nonexistentUser'] }
 Then status code should be 401 (Unautzhorized) and message in response is "Invalid user role"
 When post with valid headers from karate-config.js or manually set if needed
   And attempt to access org's issues using invalid credentials
+When get // Changed request method for standard test case as per best practices, assuming POST was initially used erroneously here.
    With valid headers including necessary authentication tokens or cookies from karate-config.js
 Then status code should be 401 (Unauthorized) and message in response is "Invalid user role"
+ // Added a switch statement for handling different invalid roles, assuming API returns specific error messages based on the provided 'userRole'. Adjust as per actual implementation details.
   * def validCredentials = { 'organizationId': 12345, 'userRole': ['admin', 'editor'] } // Assuming this represents a set of valid credentials for testing access with correct roles.
 When get With authenticatedHeaders from karate-config.js or manually set if needed
   And attempt to access org's issues using valid credentials
 Then status code should be 200 (OK) and message in response is empty, indicating successful unauthorized request handling as per API design for testing purposes only.
```
2025-02-01 11:13:01,186 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-01 11:13:01,187 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-01 11:13:01,218 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-01 11:13:01,219 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-01 11:15:55,976 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-01 11:15:55,977 - karate_llm_test_gen - INFO - Generated test case: ```yaml

features:
- name: Testing Potential Broken Authentication and Authorization on Repos Issues...
2025-02-01 11:15:55,978 - __main__ - INFO - Generated Karate test for /repos/{owner}/{repo}/issues GET at output/karate_feature_files/ID_003_krtestoas_repos_owner_repo_issues_GET.feature
2025-02-01 11:15:55,978 - karate_compatibility_verifier - INFO - Original content:
2025-02-01 11:15:55,978 - karate_compatibility_verifier - INFO - ```yaml

features:
- name: Testing Potential Broken Authentication and Authorization on Repos Issues Endpoint

scenarios:
- context: 'Attempt unauthorized access using an invalid API key'

  given url: http://oas_github.api/repos/{owner}/{repo}/issues

  when request body:

    { "Authorization": "Bearer INVALID_API_KEY" }

  then status should be equal to 401

  and response message should contain 'Invalid API key' or similar error indicating unauthorized access.

- context: 'Attempt with a stolen but expired token for an admin user trying to view private issues without permission'

  given url: http://oas_github.api/repos/{owner}/{repo}/issues?state=closed (assuming closed state is required)

  and header Authorization = 'Bearer stolen_expired_admin_token'

  when method get

  then status should be equal to 401 or similar error message indicating unauthorized access due to token expiration.

- context: 'Attempt with a non-existent API key for an admin user trying to view private issues without permission'

  given url: http://oas_github.api/repos/{owner}/{repo}/issues?state=closed (assuming closed state is required)

  and header Authorization = 'Bearer non-existent_admin_key'

  when method get

  then status should be equal to 401 or similar error message indicating unauthorized access due to invalid API key.

```
2025-02-01 11:18:49,610 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-01 11:18:49,610 - karate_compatibility_verifier - INFO - features:
- name: Testing Potential Broken Authentication and Authorization on Repos Issues Endpoint

scenarios:
* context: 'Attempt unauthorized access using an invalid API key'
  given url = 'http://oas_github.api/repos/{owner}/{repo}/issues'
  when request body = { "Authorization": "Bearer INVALID_API_KEY" }
  then status should be equal to 401 and response message contains 'Invalid API key' or similar error indicating unauthorized access.

* context: 'Attempt with a stolen but expired token for an admin user trying to view private issues without permission'
  given url = 'http://oas_github.api/repos/{owner}/{repo}/issues?state=closed'
  and header Authorization = "Bearer {stolen_expired_admin_token}"
  when method get
  then status should be equal to 401 or similar error message indicating unauthorized access due to token expiration.

* context: 'Attempt with a non-existent API key for an admin user trying to view private issues without permission'
  given url = 'http://oas_github.api/repos/{owner}/{repo}/issues?state=closed'
  and header Authorization = "Bearer {non-existent_admin_key}"
  when method get
  then status should be equal to 401 or similar error message indicating unauthorized access due to invalid API key.
2025-02-01 11:20:35,079 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-01 11:20:35,080 - karate_compatibility_verifier - INFO - features:
- name: Testing Potential Broken Authentication and Authorization on Repos Issues Endpoint

scenarios:
* context: 'Attempt unauthorized access using an invalid API key'
  given url = 'http://oas_github.api/repos/{owner}/{repo}/issues'
  when request body = { "Authorization": "Bearer INVALID_API_KEY" }
  then status should be equal to 401 and response message contains 'Invalid API key' or similar error indicating unauthorized access.

* context: 'Attempt with a stolen but expired token for an admin user trying to view private issues without permission'
  given url = 'http://oas_github.api/repos/{owner}/{repo}/issues?state=closed'
  and header Authorization = "Bearer {stolen_expired_admin_token}"
  when method get
  then status should be equal to 401 or similar error message indicating unauthorized access due to token expiration.

* context: 'Attempt with a non-existent API key for an admin user trying to view private issues without permission'
  given url = 'http://oas_github.api/repos/{owner}/{repo}/issues?state=closed'
  and header Authorization = "Bearer {non-existent_admin_key}"
  when method get
  then status should be equal to 401 or similar error message indicating unauthorized access due to invalid API key.
2025-02-01 11:20:35,080 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_003_krtestoas_repos_owner_repo_issues_GET_verified.feature
2025-02-01 11:20:35,081 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_003_krtestoas_repos_owner_repo_issues_GET.feature: features:
- name: Testing Potential Broken Authentication and Authorization on Repos Issues Endpoint

scenarios:
* context: 'Attempt unauthorized access using an invalid API key'
  given url = 'http://oas_github.api/repos/{owner}/{repo}/issues'
  when request body = { "Authorization": "Bearer INVALID_API_KEY" }
  then status should be equal to 401 and response message contains 'Invalid API key' or similar error indicating unauthorized access.

* context: 'Attempt with a stolen but expired token for an admin user trying to view private issues without permission'
  given url = 'http://oas_github.api/repos/{owner}/{repo}/issues?state=closed'
  and header Authorization = "Bearer {stolen_expired_admin_token}"
  when method get
  then status should be equal to 401 or similar error message indicating unauthorized access due to token expiration.

* context: 'Attempt with a non-existent API key for an admin user trying to view private issues without permission'
  given url = 'http://oas_github.api/repos/{owner}/{repo}/issues?state=closed'
  and header Authorization = "Bearer {non-existent_admin_key}"
  when method get
  then status should be equal to 401 or similar error message indicating unauthorized access due to invalid API key.
2025-02-01 11:20:35,081 - __main__ - INFO - Moving generated Karate feature files...
2025-02-01 11:20:35,084 - __main__ - INFO - Creating the Karate Test Framework with generated feature files
2025-02-01 11:20:38,479 - __main__ - INFO - Skipping karate test run.
