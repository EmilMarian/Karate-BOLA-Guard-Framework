2025-02-02 13:57:38,137 - __main__ - INFO - Skipping fragment creation: False
2025-02-02 13:57:38,198 - __main__ - DEBUG - Starting fragment retrieval process.
2025-02-02 13:57:38,431 - __main__ - DEBUG - Retrieved fragments: [{'content': '{"method": "POST", "parameters": [], "path": "/v1/identity/verification_sessions", "requestBody": {"content": {"application/x-www-form-urlencoded": {"encoding": {"expand": {"explode": true, "style": "deepObject"}, "metadata": {"explode": true, "style": "deepObject"}, "options": {"explode": true, "style": "deepObject"}, "provided_details": {"explode": true, "style": "deepObject"}}, "schema": {"additionalProperties": false, "properties": {"client_reference_id": {"description": "A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.", "maxLength": 5000, "type": "string"}, "expand": {"description": "Specifies which fields in the response should be expanded.", "items": {"maxLength": 5000, "type": "string"}, "type": "array"}, "metadata": {"additionalProperties": {"type": "string"}, "description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.", "type": "object"}, "options": {"description": "A set of options for the session\\u2019s verification checks.", "properties": {"document": {"anyOf": [{"properties": {"allowed_types": {"items": {"enum": ["driving_license", "id_card", "passport"], "type": "string"}, "type": "array"}, "require_id_number": {"type": "boolean"}, "require_live_capture": {"type": "boolean"}, "require_matching_selfie": {"type": "boolean"}}, "title": "document_options", "type": "object"}, {"enum": [""], "type": "string"}]}}, "title": "session_options_param", "type": "object"}, "provided_details": {"description": "Details provided about the user being verified. These details may be shown to the user.", "properties": {"email": {"type": "string"}, "phone": {"type": "string"}}, "title": "provided_details_param", "type": "object"}, "related_customer": {"description": "Token referencing a Customer resource.", "maxLength": 5000, "type": "string"}, "return_url": {"description": "The URL that the user will be redirected to upon completing the verification flow.", "type": "string"}, "type": {"description": "The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed. You must provide a `type` if not passing `verification_flow`.", "enum": ["document", "id_number"], "type": "string", "x-stripeBypassValidation": true}, "verification_flow": {"description": "The ID of a verification flow from the Dashboard. See https://docs.stripe.com/identity/verification-flows.", "maxLength": 5000, "type": "string"}}, "type": "object"}}}, "required": false}, "responses": {"default": {"content": {"application/json": {"schema": {"description": "An error response from the Stripe API", "properties": {"error": {"$ref": "#/components/schemas/api_errors"}}, "required": ["error"], "type": "object"}}}, "description": "Error response."}}}', 'metadata': {'filename': '0430_v1_identity_verification_sessions_post_default.json'}}, {'content': '{"method": "POST", "parameters": [], "path": "/v1/identity/verification_sessions", "requestBody": {"content": {"application/x-www-form-urlencoded": {"encoding": {"expand": {"explode": true, "style": "deepObject"}, "metadata": {"explode": true, "style": "deepObject"}, "options": {"explode": true, "style": "deepObject"}, "provided_details": {"explode": true, "style": "deepObject"}}, "schema": {"additionalProperties": false, "properties": {"client_reference_id": {"description": "A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.", "maxLength": 5000, "type": "string"}, "expand": {"description": "Specifies which fields in the response should be expanded.", "items": {"maxLength": 5000, "type": "string"}, "type": "array"}, "metadata": {"additionalProperties": {"type": "string"}, "description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.", "type": "object"}, "options": {"description": "A set of options for the session\\u2019s verification checks.", "properties": {"document": {"anyOf": [{"properties": {"allowed_types": {"items": {"enum": ["driving_license", "id_card", "passport"], "type": "string"}, "type": "array"}, "require_id_number": {"type": "boolean"}, "require_live_capture": {"type": "boolean"}, "require_matching_selfie": {"type": "boolean"}}, "title": "document_options", "type": "object"}, {"enum": [""], "type": "string"}]}}, "title": "session_options_param", "type": "object"}, "provided_details": {"description": "Details provided about the user being verified. These details may be shown to the user.", "properties": {"email": {"type": "string"}, "phone": {"type": "string"}}, "title": "provided_details_param", "type": "object"}, "related_customer": {"description": "Token referencing a Customer resource.", "maxLength": 5000, "type": "string"}, "return_url": {"description": "The URL that the user will be redirected to upon completing the verification flow.", "type": "string"}, "type": {"description": "The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed. You must provide a `type` if not passing `verification_flow`.", "enum": ["document", "id_number"], "type": "string", "x-stripeBypassValidation": true}, "verification_flow": {"description": "The ID of a verification flow from the Dashboard. See https://docs.stripe.com/identity/verification-flows.", "maxLength": 5000, "type": "string"}}, "type": "object"}}}, "required": false}, "responses": {"200": {"content": {"application/json": {"schema": {"description": "A VerificationSession guides you through the process of collecting and verifying the identities\\nof your users. It contains details about the type of verification, such as what [verification\\ncheck](/docs/identity/verification-checks) to perform. Only create one VerificationSession for\\neach verification in your system.\\n\\nA VerificationSession transitions through [multiple\\nstatuses](/docs/identity/how-sessions-work) throughout its lifetime as it progresses through\\nthe verification flow. The VerificationSession contains the user\'s verified data after\\nverification checks are complete.\\n\\nRelated guide: [The Verification Sessions API](https://stripe.com/docs/identity/verification-sessions)", "properties": {"client_reference_id": {"description": "A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.", "maxLength": 5000, "nullable": true, "type": "string"}, "client_secret": {"description": "The short-lived client secret used by Stripe.js to [show a verification modal](https://stripe.com/docs/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don\\u2019t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://stripe.com/docs/identity/verification-sessions#client-secret) to learn more.", "maxLength": 5000, "nullable": true, "type": "string"}, "created": {"description": "Time at which the object was created. Measured in seconds since the Unix epoch.", "format": "unix-time", "type": "integer"}, "id": {"description": "Unique identifier for the object.", "maxLength": 5000, "type": "string"}, "last_error": {"anyOf": [{"$ref": "#/components/schemas/gelato_session_last_error"}], "description": "If present, this property tells you the last error encountered when processing the verification.", "nullable": true}, "last_verification_report": {"anyOf": [{"maxLength": 5000, "type": "string"}, {"$ref": "#/components/schemas/identity.verification_report"}], "description": "ID of the most recent VerificationReport. [Learn more about accessing detailed verification results.](https://stripe.com/docs/identity/verification-sessions#results)", "nullable": true, "x-expansionResources": {"oneOf": [{"$ref": "#/components/schemas/identity.verification_report"}]}}, "livemode": {"description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.", "type": "boolean"}, "metadata": {"additionalProperties": {"maxLength": 500, "type": "string"}, "description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.", "type": "object"}, "object": {"description": "String representing the object\'s type. Objects of the same type share the same value.", "enum": ["identity.verification_session"], "type": "string"}, "options": {"anyOf": [{"$ref": "#/components/schemas/gelato_verification_session_options"}], "description": "A set of options for the session\\u2019s verification checks.", "nullable": true}, "provided_details": {"anyOf": [{"$ref": "#/components/schemas/gelato_provided_details"}], "description": "Details provided about the user being verified. These details may be shown to the user.", "nullable": true}, "redaction": {"anyOf": [{"$ref": "#/components/schemas/verification_session_redaction"}], "description": "Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null.", "nullable": true}, "related_customer": {"description": "Token referencing a Customer resource.", "maxLength": 5000, "nullable": true, "type": "string"}, "status": {"description": "Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).", "enum": ["canceled", "processing", "requires_input", "verified"], "type": "string"}, "type": {"description": "The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.", "enum": ["document", "id_number", "verification_flow"], "type": "string", "x-stripeBypassValidation": true}, "url": {"description": "The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 48 hours and can only be used once. Don\\u2019t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://stripe.com/docs/identity/verify-identity-documents?platform=web&type=redirect) to learn how to redirect users to Stripe.", "maxLength": 5000, "nullable": true, "type": "string"}, "verification_flow": {"description": "The configuration token of a verification flow from the dashboard.", "maxLength": 5000, "type": "string"}, "verified_outputs": {"anyOf": [{"$ref": "#/components/schemas/gelato_verified_outputs"}], "description": "The user\\u2019s verified data.", "nullable": true}}, "required": ["created", "id", "livemode", "metadata", "object", "status", "type"], "title": "GelatoVerificationSession", "type": "object", "x-expandableFields": ["last_error", "last_verification_report", "options", "provided_details", "redaction", "verified_outputs"], "x-resourceId": "identity.verification_session"}}}, "description": "Successful response."}}}', 'metadata': {'filename': '0429_v1_identity_verification_sessions_post_200.json'}}, {'content': '{"method": "GET", "parameters": [{"description": "A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.", "in": "query", "name": "client_reference_id", "required": false, "schema": {"maxLength": 5000, "type": "string"}, "style": "form"}, {"description": "Only return VerificationSessions that were created during the given date interval.", "explode": true, "in": "query", "name": "created", "required": false, "schema": {"anyOf": [{"properties": {"gt": {"type": "integer"}, "gte": {"type": "integer"}, "lt": {"type": "integer"}, "lte": {"type": "integer"}}, "title": "range_query_specs", "type": "object"}, {"type": "integer"}]}, "style": "deepObject"}, {"description": "A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.", "in": "query", "name": "ending_before", "required": false, "schema": {"maxLength": 5000, "type": "string"}, "style": "form"}, {"description": "Specifies which fields in the response should be expanded.", "explode": true, "in": "query", "name": "expand", "required": false, "schema": {"items": {"maxLength": 5000, "type": "string"}, "type": "array"}, "style": "deepObject"}, {"description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.", "in": "query", "name": "limit", "required": false, "schema": {"type": "integer"}, "style": "form"}, {"in": "query", "name": "related_customer", "required": false, "schema": {"maxLength": 5000, "type": "string"}, "style": "form"}, {"description": "A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.", "in": "query", "name": "starting_after", "required": false, "schema": {"maxLength": 5000, "type": "string"}, "style": "form"}, {"description": "Only return VerificationSessions with this status. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).", "in": "query", "name": "status", "required": false, "schema": {"enum": ["canceled", "processing", "requires_input", "verified"], "type": "string"}, "style": "form"}], "path": "/v1/identity/verification_sessions", "requestBody": {"content": {"application/x-www-form-urlencoded": {"encoding": {}, "schema": {"additionalProperties": false, "properties": {}, "type": "object"}}}, "required": false}, "responses": {"default": {"content": {"application/json": {"schema": {"description": "An error response from the Stripe API", "properties": {"error": {"$ref": "#/components/schemas/api_errors"}}, "required": ["error"], "type": "object"}}}, "description": "Error response."}}}', 'metadata': {'filename': '0428_v1_identity_verification_sessions_get_default.json'}}], form collection oas_stripe_fragments
2025-02-02 13:57:38,432 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-02 13:57:38,433 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-02 13:57:38,855 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-02 13:57:38,855 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-02 13:57:43,747 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-02 13:57:43,748 - karate_llm_test_gen - INFO - Generated test case:  {
  "feature": "Test for Broken Authentication/Authorization on Identity Verification Sessions",
  ...
2025-02-02 13:57:43,749 - __main__ - INFO - Generated Karate test for /v1/identity/verification_sessions POST at output/karate_feature_files/ID_001_krtestoas_v1_identity_verification_sessions_POST.feature
2025-02-02 13:57:43,749 - karate_compatibility_verifier - INFO - Original content:
2025-02-02 13:57:43,749 - karate_compatibility_verifier - INFO - {
  "feature": "Test for Broken Authentication/Authorization on Identity Verification Sessions",
  "scenario": "User attempts to create a verification session without proper authentication or authorization",
  "steps": [
    "Given url 'http://oas_stripe.api/v1/identity/verification_sessions'",
    "And header Authorization = ''" , // Assuming no token is provided for this test case
    "When method post",
    "Then status 403",
    "And match response contains 'Invalid credentials or insufficient permissions'"
  ]
}
2025-02-02 13:57:47,860 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-02 13:57:47,860 - karate_compatibility_verifier - INFO -  Given url 'http://oas_stripe.api/v1/identity/verification_sessions'
And header Authorization = ''
When method post
Then status 403
And match response contains "Invalid credentials or insufficient permissions"
2025-02-02 13:57:49,684 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-02 13:57:49,684 - karate_compatibility_verifier - INFO -  Given url 'https://oas_stripe.api/v1/identity/verification_sessions'
And header Authorization = '#create('Authorization', 'Bearer yourAccessTokenHere')' // Replace with actual access token if available
When method post
Then status 403
And match response contains "Invalid credentials or insufficient permissions"
2025-02-02 13:57:49,684 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_001_krtestoas_v1_identity_verification_sessions_POST_verified.feature
2025-02-02 13:57:49,685 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_001_krtestoas_v1_identity_verification_sessions_POST.feature:  Given url 'https://oas_stripe.api/v1/identity/verification_sessions'
And header Authorization = '#create('Authorization', 'Bearer yourAccessTokenHere')' // Replace with actual access token if available
When method post
Then status 403
And match response contains "Invalid credentials or insufficient permissions"
2025-02-02 13:57:49,685 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-02 13:57:49,686 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-02 13:57:49,707 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-02 13:57:49,708 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-02 13:57:55,113 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-02 13:57:55,114 - karate_llm_test_gen - INFO - Generated test case:  {
  "feature": "Test for Broken Authentication/Authorization on Identity Verification Sessions",
  ...
2025-02-02 13:57:55,115 - __main__ - INFO - Generated Karate test for /v1/identity/verification_sessions POST at output/karate_feature_files/ID_002_krtestoas_v1_identity_verification_sessions_POST.feature
2025-02-02 13:57:55,115 - karate_compatibility_verifier - INFO - Original content:
2025-02-02 13:57:55,116 - karate_compatibility_verifier - INFO - {
  "feature": "Test for Broken Authentication/Authorization on Identity Verification Sessions",
  "scenario": "User without valid credentials attempts to create a verification session.",
  "steps": [
    "Given url 'http://oas_stripe.api/v1/identity/verification_sessions'",
    "And header Authorization = ''" , // Assuming no authentication specified, but should be properly set for real-world testing
    "When method post",
    "Then status 403 or 500",
    "And match response contains 'Invalid credentials.' or 'Unauthorized' or 'Forbidden'"
  ]
}
2025-02-02 13:57:59,639 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-02 13:57:59,639 - karate_compatibility_verifier - INFO -  Given url 'http://oas_stripe.api/v1/identity/verification_sessions'
And header Authorization = '' // Assuming no authentication specified, but should be properly set for real-world testing
When method post
Then status 403 or 500
And match response contains 'Invalid credentials.'
2025-02-02 13:58:01,754 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-02 13:58:01,755 - karate_compatibility_verifier - INFO -  Feature: Verify API Authentication
  Scenario: Incorrect Credentials POST request
    Given url 'http://oas_stripe.api/v1/identity/verification_sessions'
    And header Authorization = "Bearer <your-access-token>" // Replace with actual access token for real testing
    When method post
    Then status 403 or 5 fearing 'Invalid credentials.'
2025-02-02 13:58:01,755 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_002_krtestoas_v1_identity_verification_sessions_POST_verified.feature
2025-02-02 13:58:01,755 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_002_krtestoas_v1_identity_verification_sessions_POST.feature:  Feature: Verify API Authentication
  Scenario: Incorrect Credentials POST request
    Given url 'http://oas_stripe.api/v1/identity/verification_sessions'
    And header Authorization = "Bearer <your-access-token>" // Replace with actual access token for real testing
    When method post
    Then status 403 or 5 fearing 'Invalid credentials.'
2025-02-02 13:58:01,756 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-02 13:58:01,756 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-02 13:58:01,773 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-02 13:58:01,774 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-02 13:58:19,349 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-02 13:58:19,350 - karate_llm_test_gen - INFO - Generated test case:  {
  "feature": "Test for Broken Authentication/Authorization on Identity Verification Sessions",
  ...
2025-02-02 13:58:19,351 - __main__ - INFO - Generated Karate test for /v1/identity/verification_sessions GET at output/karate_feature_files/ID_003_krtestoas_v1_identity_verification_sessions_GET.feature
2025-02-02 13:58:19,352 - karate_compatibility_verifier - INFO - Original content:
2025-02-02 13:58:19,353 - karate_compatibility_verifier - INFO - {
  "feature": "Test for Broken Authentication/Authorization on Identity Verification Sessions",
  "scenario": "User attempts to access verification session without proper authentication or authorization.",
  "steps": [
    "Given url 'http://oas_stripe.api/v1/identity/verification_sessions'",
    
    // Attempt with no credentials, expecting a 403 Forbidden response due to broken authentication
    "* def unautmousRequest = karate.request(method: 'GET', params: {})",
    "When method get using the above request",
    "Then status should be equalTo 401 or 403",
    
    // Attempt with invalid credentials, expecting a 401 Unauthorized response due to broken authorization checks
    "* def badCredentials = { 'username': '', 'password': '' }",
    "And header Authorization should be equalTo: \"Basic \\\"<base64 encoded string derived from empty username and password>\"", // Note that this is a placeholder, as base64 encoding of an empty string doesn't make sense. This step assumes there are no credentials provided at all for the purpose of testing broken authorization checks.
    "When method get using request with badCredentials in header Authorization",
    "Then status should be equalTo 401 or 403"
    
    // Attempt to access as a non-admin user, expecting an unauthorized response due to insufficient permissions.
    "* def regularUser = { 'username': 'regular_user', 'password': '<valid password>' }",
    "And header Authorization should be equalTo: \"Basic \\\"<base64 encoded string derived from valid user credentials>\"", // Again, this is a placeholder for the purpose of testing broken authorization checks.
    "When method get using request with regularUser in header Authorization",
    "Then status should be greater than 300 and less than or equal to 599"
    
    "* def adminCredentials = { 'username': 'admin', 'password': '<valid password>' }", // Assuming there is a valid credential for an actual admin user. In practice, this step would require proper handling of sensitive data (e.g., using environment variables or mock credentials).
    "And header Authorization should be equalTo: \"Basic \\\"<base64 encoded string derived from admin credentials>\"", // This is a placeholder for the purpose of testing broken authorization checks, and in real scenarios must handle authentication securely without exposing actual user data.
    
    "* switch response status",
    "  case 200: then fail 'Admin should not have access to this test scenario'",
    // Additional cases can be added here for different unauthorized or forbidden responses based on the API implementation details and expected behavior under broken authentication/authorization conditions.
    
    "* switch response status"
  ]
}
2025-02-02 13:58:34,942 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-02 13:58:34,942 - karate_compatibility_verifier - INFO -  Feature: Test for Broken Authentication/Authorization on Identity Verification Sessions
    url 'http://oas_stripe.api/v1/identity/verification_sessions'
    
    * def unautmousRequest = karate.request(method: 'GET', params:{})
    When method get using the above request
    Then status should be equalTo 403 or 401
        
    * def badCredentials = { username: '', password: '' }
    And header Authorization should be equalTo "Basic " + Base64.encode(new String(":fakecredentials")) // placeholder, in real scenarios use secure methods to handle credentials
    When method get using request with badCredentials in header Authorization
    Then status should be greater than 300 and less than or equal to 599
    
    * def regularUser = { username: 'regular_user', password: '<validPassword>' } // placeholder, replace <validPassword> with a real valid user credential for testing purposes. In practice use environment variables or mock credentials securely.
    And header Authorization should be equalTo "Basic " + Base64.encode(new String(":fakecredentials")) // placeholder, in actual scenarios handle authentication data properly without exposing sensitive information
    When method get using request with regularUser in header Authorization
    Then status should be greater than 300 and less than or equal to 599
    
    * def adminCredentials = { username: 'admin', password: '<validPassword>' } // placeholder, replace <validPassword> with a real valid user credential for testing purposes. In practice use environment variables or mock credentials securely.
    And header Authorization should be equalTo "Basic " + Base64.encode(new String(":fakecredentials")) // placeholder, in actual scenarios handle authentication data properly without exposing sensitive information
    When method get using request with adminCredentials in header Authorization
    Then status code is not within 200-399 range
    
    * switch response.statusCode()
    case 401: then fail('Unauthorized access attempt by a non-admin user')
    case 403: then pass 'Broken authentication/authorization detected'
2025-02-02 13:58:37,754 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-02 13:58:37,754 - karate_compatibility_verifier - INFO -  Feature: Test for Broken Authentication/Authorization on Identity Verification Sessions
    url 'http://oas_stripe.api/v1/identity/verification_sessions'
    
    * def unauthorizedRequest = karate.request(method: 'GET', params:{})
    When method get using the above request
    Then status should be equalTo 403 or 4y
2025-02-02 13:58:37,755 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_003_krtestoas_v1_identity_verification_sessions_GET_verified.feature
2025-02-02 13:58:37,757 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_003_krtestoas_v1_identity_verification_sessions_GET.feature:  Feature: Test for Broken Authentication/Authorization on Identity Verification Sessions
    url 'http://oas_stripe.api/v1/identity/verification_sessions'
    
    * def unauthorizedRequest = karate.request(method: 'GET', params:{})
    When method get using the above request
    Then status should be equalTo 403 or 4y
2025-02-02 13:58:37,758 - __main__ - INFO - Moving generated Karate feature files...
2025-02-02 13:58:37,761 - __main__ - INFO - Creating the Karate Test Framework with generated feature files
2025-02-02 13:58:40,017 - __main__ - INFO - Skipping karate test run.
