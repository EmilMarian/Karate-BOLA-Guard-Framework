2025-01-25 20:33:40,937 - __main__ - INFO - Skipping fragment creation: False
2025-01-25 20:33:40,999 - __main__ - DEBUG - Starting fragment retrieval process.
2025-01-25 20:33:41,284 - __main__ - DEBUG - Retrieved fragments: [{'content': '{"method": "POST", "parameters": [], "path": "/customers/subscribers", "requestBody": {"content": {"application/json": {"schema": {"properties": {"date_created": {"description": "The date on which the subscriber was created.\\n", "format": "data-time", "type": "string"}, "date_modified": {"description": "The date on which the subscriber was modified.\\n", "format": "data-time", "type": "string"}, "email": {"description": "The email of the subscriber. Must be unique.\\n", "type": "string"}, "first_name": {"description": "The first name of the subscriber.\\n", "type": "string"}, "id": {"description": "The unique numeric ID of the subscriber; increments sequentially.\\n", "type": "integer"}, "last_name": {"description": "The last name of the subscriber.\\n", "type": "string"}, "order_id": {"description": "The ID of the source order, if source was an order.\\n", "type": "integer"}, "source": {"description": "The source of the subscriber. Values are: `storefront`, `order`, or `custom`.\\n", "type": "string"}}, "type": "object"}}}, "description": "`Subscriber` object\\n", "required": true}, "responses": {"422": {"content": {"application/json": {"schema": {"allOf": [{"$ref": "#/components/schemas/BaseError"}, {"properties": {"errors": {"$ref": "#/components/schemas/DetailedErrors"}}, "type": "object"}]}}}, "description": "The `Subscriber` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.\\n"}}}', 'metadata': {'filename': '0157_customers_subscribers_post_422.json'}}, {'content': '{"method": "POST", "parameters": [], "path": "/customers/subscribers", "requestBody": {"content": {"application/json": {"schema": {"properties": {"date_created": {"description": "The date on which the subscriber was created.\\n", "format": "data-time", "type": "string"}, "date_modified": {"description": "The date on which the subscriber was modified.\\n", "format": "data-time", "type": "string"}, "email": {"description": "The email of the subscriber. Must be unique.\\n", "type": "string"}, "first_name": {"description": "The first name of the subscriber.\\n", "type": "string"}, "id": {"description": "The unique numeric ID of the subscriber; increments sequentially.\\n", "type": "integer"}, "last_name": {"description": "The last name of the subscriber.\\n", "type": "string"}, "order_id": {"description": "The ID of the source order, if source was an order.\\n", "type": "integer"}, "source": {"description": "The source of the subscriber. Values are: `storefront`, `order`, or `custom`.\\n", "type": "string"}}, "type": "object"}}}, "description": "`Subscriber` object\\n", "required": true}, "responses": {"200": {"content": {"application/json": {"schema": {"description": "Response payload for the Bigcommerce API.\\n", "properties": {"data": {"$ref": "#/components/schemas/Subscriber"}, "meta": {"$ref": "#/components/schemas/Meta"}}, "type": "object"}}}, "description": "A `Subscriber` object.\\n"}}}', 'metadata': {'filename': '0155_customers_subscribers_post_200.json'}}, {'content': '{"method": "POST", "parameters": [], "path": "/customers/subscribers", "requestBody": {"content": {"application/json": {"schema": {"properties": {"date_created": {"description": "The date on which the subscriber was created.\\n", "format": "data-time", "type": "string"}, "date_modified": {"description": "The date on which the subscriber was modified.\\n", "format": "data-time", "type": "string"}, "email": {"description": "The email of the subscriber. Must be unique.\\n", "type": "string"}, "first_name": {"description": "The first name of the subscriber.\\n", "type": "string"}, "id": {"description": "The unique numeric ID of the subscriber; increments sequentially.\\n", "type": "integer"}, "last_name": {"description": "The last name of the subscriber.\\n", "type": "string"}, "order_id": {"description": "The ID of the source order, if source was an order.\\n", "type": "integer"}, "source": {"description": "The source of the subscriber. Values are: `storefront`, `order`, or `custom`.\\n", "type": "string"}}, "type": "object"}}}, "description": "`Subscriber` object\\n", "required": true}, "responses": {"409": {"content": {"application/json": {"schema": {"allOf": [{"$ref": "#/components/schemas/BaseError"}, {"properties": {"errors": {"$ref": "#/components/schemas/DetailedErrors"}}, "type": "object"}]}}}, "description": "The `Subscriber` was in conflict with another subscriber. This is the result of duplicate unique values, such as `email`.\\n"}}}', 'metadata': {'filename': '0156_customers_subscribers_post_409.json'}}], form collection oas_bigecommerce_fragments
2025-01-25 20:33:41,285 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-01-25 20:33:41,285 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-01-25 20:33:41,713 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-01-25 20:33:41,714 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-01-25 20:34:18,799 - karate_llm_test_gen - INFO - Response status code: 200
2025-01-25 20:34:18,800 - karate_llm_test_gen - INFO - Generated test case: ```yaml
* scenario: Broken Authentication/Authorization Test for /customers/subscribers API Endpoint...
2025-01-25 20:34:18,801 - __main__ - INFO - Generated Karate test for /customers/subscribers POST at output/karate_feature_files/ID_001_krtestoas_customers_subscribers_POST.feature
2025-01-25 20:34:18,801 - karate_compatibility_verifier - INFO - Original content:
2025-01-25 20:34:18,801 - karate_compatibility_verifier - INFO - ```yaml
* scenario: Broken Authentication/Authorization Test for /customers/subscribers API Endpoint
  * given url 'http://oas_bigecommerce.api/customers/subscribers'
  
    // Scenario to test unautmized access due to missing authentication details
    * def authDetails = function() { return {} }
    
    * when method post
      | com.bigegecom.model.SubscriberRequest request(null, null)  // Assuming the API expects no specific authorization headers for this endpoint
      
      Then status == 401 or 403
```
2025-01-25 20:34:25,426 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-01-25 20:34:25,426 - karate_compatibility_verifier - INFO - * scenario: Broken Authentication/Authorization Test for /customers/subscribers API Endpoint
  * given url 'http://oas_bigecommerce.api/customers/subscribers'
  
    // Scenario to test unauthorized access due to missing authentication details
    * def authDetails = function() { return {} }
    
    * when method post
      | com.bigegecom.model.SubscriberRequest request(null, null)  // Assuming the API expects no specific authorization headers for this endpoint
      
      Then status in [401, 403]
2025-01-25 20:34:30,960 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-01-25 20:34:30,961 - karate_compatibility_verifier - INFO - * scenario: Broken Authentication/Authorization Test for /customers/subscribers API Endpoint
  * given url 'http://oas_bigecommerce.api/customers/subscribers'
  
    // Scenario to test unauthorized access due to missing authentication details
    * def authDetails = function() { return {} }
    
    * when method post using com.bigegecom.model.SubscriberRequest with no authorization headers, expecting 401 or 403 status codes
      
      | httpMethod('POST', url, body: SubscriberRequest(null, null), authDetails())
      
      Then statusCode should equal [401] //or[403], depending on the API's response to missing authentication details
2025-01-25 20:34:30,961 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_001_krtestoas_customers_subscribers_POST_verified.feature
2025-01-25 20:34:30,961 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_001_krtestoas_customers_subscribers_POST.feature: * scenario: Broken Authentication/Authorization Test for /customers/subscribers API Endpoint
  * given url 'http://oas_bigecommerce.api/customers/subscribers'
  
    // Scenario to test unauthorized access due to missing authentication details
    * def authDetails = function() { return {} }
    
    * when method post using com.bigegecom.model.SubscriberRequest with no authorization headers, expecting 401 or 403 status codes
      
      | httpMethod('POST', url, body: SubscriberRequest(null, null), authDetails())
      
      Then statusCode should equal [401] //or[403], depending on the API's response to missing authentication details
2025-01-25 20:34:30,962 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-01-25 20:34:30,962 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-01-25 20:34:30,982 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-01-25 20:34:30,983 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-01-25 20:34:40,871 - karate_llm_test_gen - INFO - Response status code: 200
2025-01-25 20:34:40,871 - karate_llm_test_gen - INFO - Generated test case: ```yaml
* scenario: Broken Authentication/Authorization Test for /customers/subscribers API Endpoint...
2025-01-25 20:34:40,872 - __main__ - INFO - Generated Karate test for /customers/subscribers POST at output/karate_feature_files/ID_002_krtestoas_customers_subscribers_POST.feature
2025-01-25 20:34:40,872 - karate_compatibility_verifier - INFO - Original content:
2025-01-25 20:34:40,872 - karate_compatibility_verifier - INFO - ```yaml
* scenario: Broken Authentication/Authorization Test for /customers/subscribers API Endpoint
  * given url 'http://oas_bigecommerce.api/customers/subscribers'
  
    // Scenario to test unautmized access due to missing authentication details
    * def authDetails = function() { return {} }
    
    * when method post
      | com.bigegecom.model.SubscriberRequest request(null, null)  // Assuming the API expects no specific authorization headers for this endpoint
      
      Then status == 401 or 403
```
2025-01-25 20:34:47,625 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-01-25 20:34:47,625 - karate_compatibility_verifier - INFO - * scenario: Broken Authentication/Authorization Test for /customers/subscribers API Endpoint
  * given url 'http://oas_bigecommerce.api/customers/subscribers'
  
    // Scenario to test unauthorized access due to missing authentication details
    * def authDetails = function() { return {} }
    
    * when method post
      | com.bigegecom.model.SubscriberRequest request(null, null)  // Assuming the API expects no specific authorization headers for this endpoint
      
      Then status in [401, 403]
2025-01-25 20:34:53,304 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-01-25 20:34:53,304 - karate_compatibility_verifier - INFO - * scenario: Broken Authentication/Authorization Test for /customers/subscribers API Endpoint
  * given url 'http://oas_bigecommerce.api/customers/subscribers'
  
    // Scenario to test unauthorized access due to missing authentication details
    * def authDetails = function() { return {} }
    
    * when method post using com.bigegecom.model.SubscriberRequest with no authorization headers, expecting 401 or 403 status codes
      
      | httpMethod('POST', url, body: SubscriberRequest(null, null), authDetails())
      
      Then statusCode should equal [401] //or[403], depending on the API's response to missing authentication details
2025-01-25 20:34:53,305 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_002_krtestoas_customers_subscribers_POST_verified.feature
2025-01-25 20:34:53,305 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_002_krtestoas_customers_subscribers_POST.feature: * scenario: Broken Authentication/Authorization Test for /customers/subscribers API Endpoint
  * given url 'http://oas_bigecommerce.api/customers/subscribers'
  
    // Scenario to test unauthorized access due to missing authentication details
    * def authDetails = function() { return {} }
    
    * when method post using com.bigegecom.model.SubscriberRequest with no authorization headers, expecting 401 or 403 status codes
      
      | httpMethod('POST', url, body: SubscriberRequest(null, null), authDetails())
      
      Then statusCode should equal [401] //or[403], depending on the API's response to missing authentication details
2025-01-25 20:34:53,305 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-01-25 20:34:53,306 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-01-25 20:34:53,328 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-01-25 20:34:53,328 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-01-25 20:35:03,466 - karate_llm_test_gen - INFO - Response status code: 200
2025-01-25 20:35:03,467 - karate_llm_test_gen - INFO - Generated test case: ```yaml
* scenario: Broken Authentication/Authorization Test for /customers/subscribers API Endpoint...
2025-01-25 20:35:03,467 - __main__ - INFO - Generated Karate test for /customers/subscribers POST at output/karate_feature_files/ID_003_krtestoas_customers_subscribers_POST.feature
2025-01-25 20:35:03,468 - karate_compatibility_verifier - INFO - Original content:
2025-01-25 20:35:03,468 - karate_compatibility_verifier - INFO - ```yaml
* scenario: Broken Authentication/Authorization Test for /customers/subscribers API Endpoint
  * given url 'http://oas_bigecommerce.api/customers/subscribers'
  
    // Scenario to test unautmized access due to missing authentication details
    * def authDetails = function() { return {} }
    
    * when method post
      | com.bigegecom.model.SubscriberRequest request(null, null)  // Assuming the API expects no specific authorization headers for this endpoint
      
      Then status == 401 or 403
```
2025-01-25 20:35:10,269 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-01-25 20:35:10,269 - karate_compatibility_verifier - INFO - * scenario: Broken Authentication/Authorization Test for /customers/subscribers API Endpoint
  * given url 'http://oas_bigecommerce.api/customers/subscribers'
  
    // Scenario to test unauthorized access due to missing authentication details
    * def authDetails = function() { return {} }
    
    * when method post
      | com.bigegecom.model.SubscriberRequest request(null, null)  // Assuming the API expects no specific authorization headers for this endpoint
      
      Then status in [401, 403]
2025-01-25 20:35:16,190 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-01-25 20:35:16,190 - karate_compatibility_verifier - INFO - * scenario: Broken Authentication/Authorization Test for /customers/subscribers API Endpoint
  * given url 'http://oas_bigecommerce.api/customers/subscribers'
  
    // Scenario to test unauthorized access due to missing authentication details
    * def authDetails = function() { return {} }
    
    * when method post using com.bigegecom.model.SubscriberRequest with no authorization headers, expecting 401 or 403 status codes
      
      | httpMethod('POST', url, body: SubscriberRequest(null, null), authDetails())
      
      Then statusCode should equal [401] //or[403], depending on the API's response to missing authentication details
2025-01-25 20:35:16,190 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_003_krtestoas_customers_subscribers_POST_verified.feature
2025-01-25 20:35:16,191 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_003_krtestoas_customers_subscribers_POST.feature: * scenario: Broken Authentication/Authorization Test for /customers/subscribers API Endpoint
  * given url 'http://oas_bigecommerce.api/customers/subscribers'
  
    // Scenario to test unauthorized access due to missing authentication details
    * def authDetails = function() { return {} }
    
    * when method post using com.bigegecom.model.SubscriberRequest with no authorization headers, expecting 401 or 403 status codes
      
      | httpMethod('POST', url, body: SubscriberRequest(null, null), authDetails())
      
      Then statusCode should equal [401] //or[403], depending on the API's response to missing authentication details
2025-01-25 20:35:16,191 - __main__ - INFO - Moving generated Karate feature files...
2025-01-25 20:35:16,192 - __main__ - INFO - Creating the Karate Test Framework with generated feature files
2025-01-25 20:35:18,733 - __main__ - INFO - Skipping karate test run.
