2025-02-02 13:18:23,684 - __main__ - INFO - Skipping fragment creation: False
2025-02-02 13:18:23,744 - __main__ - DEBUG - Starting fragment retrieval process.
2025-02-02 13:18:24,214 - __main__ - DEBUG - Retrieved fragments: [{'content': '{"method": "GET", "parameters": [{"description": "A valid access token from the Spotify Accounts service: see the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/) for details. The `user-library-read` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) must have been authorized by the user.", "in": "header", "name": "Authorization", "required": true, "schema": {"type": "string"}}, {"description": "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). If a country code is specified, only episodes that are available in that market will be returned.  \\nIf a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.  \\n*Note: If neither market or user country are provided, the content is considered unavailable for the client.*   \\nUsers can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).", "in": "query", "name": "market", "required": false, "schema": {"type": "string"}}, {"description": "The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50.", "in": "query", "name": "limit", "required": false, "schema": {"format": "int32", "type": "integer"}}, {"description": "The index of the first object to return. Default: 0 (i.e., the first object). Use with `limit` to get the next set of objects.", "in": "query", "name": "offset", "required": false, "schema": {"format": "int32", "type": "integer"}}], "path": "/me/episodes", "requestBody": {}, "responses": {"default": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorResponseObject"}}}, "description": "Unexpected error"}}}', 'metadata': {'filename': '0052_me_episodes_get_default.json'}}, {'content': '{"method": "GET", "parameters": [{"description": "A valid access token from the Spotify Accounts service: see the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/) for details. The `user-library-read` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) must have been authorized by the user.", "in": "header", "name": "Authorization", "required": true, "schema": {"type": "string"}}, {"description": "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). If a country code is specified, only episodes that are available in that market will be returned.  \\nIf a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.  \\n*Note: If neither market or user country are provided, the content is considered unavailable for the client.*   \\nUsers can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).", "in": "query", "name": "market", "required": false, "schema": {"type": "string"}}, {"description": "The maximum number of objects to return. Default: 20. Minimum: 1. Maximum: 50.", "in": "query", "name": "limit", "required": false, "schema": {"format": "int32", "type": "integer"}}, {"description": "The index of the first object to return. Default: 0 (i.e., the first object). Use with `limit` to get the next set of objects.", "in": "query", "name": "offset", "required": false, "schema": {"format": "int32", "type": "integer"}}], "path": "/me/episodes", "requestBody": {}, "responses": {"200": {"content": {"application/json": {"schema": {"externalDocs": {"description": "Find more info on the official Spotify Web API Reference", "url": "https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject"}, "properties": {"href": {"description": "A link to the Web API endpoint returning the full result of the request", "type": "string"}, "items": {"description": "The requested data.", "items": {"externalDocs": {"description": "Find more info on the official Spotify Web API Reference", "url": "https://developer.spotify.com/documentation/web-api/reference/#object-savedepisodeobject"}, "properties": {"added_at": {"description": "The date and time the episode was saved. Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.", "format": "date-time", "type": "string"}, "episode": {"$ref": "#/components/schemas/EpisodeObject"}}, "type": "object"}, "type": "array"}, "limit": {"description": "The maximum number of items in the response (as set in the query or by default).", "format": "int32", "type": "integer"}, "next": {"description": "URL to the next page of items. ( `null` if none)", "type": "string"}, "offset": {"description": "The offset of the items returned (as set in the query or by default)", "format": "int32", "type": "integer"}, "previous": {"description": "URL to the previous page of items. ( `null` if none)", "type": "string"}, "total": {"description": "The total number of items available to return.", "format": "int32", "type": "integer"}}, "type": "object"}}}, "description": "- On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [saved episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedepisodeobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."}}}', 'metadata': {'filename': '0051_me_episodes_get_200.json'}}, {'content': '{"method": "PUT", "parameters": [{"description": "A valid access token from the Spotify Accounts service: see the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/) for details.  \\nModification of the current user\'s \\"Your Music\\" collection requires authorization of the `user-library-modify` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes).", "in": "header", "name": "Authorization", "required": true, "schema": {"type": "string"}}, {"description": "*Required if the IDs are passed in the request body, otherwise ignored.* The content type of the request body: `application/json`", "in": "header", "name": "Content-Type", "required": false, "schema": {"type": "string"}}, {"description": "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.", "in": "query", "name": "ids", "required": true, "schema": {"type": "string"}}], "path": "/me/albums", "requestBody": {"content": {"application/json": {"schema": {"properties": {"ids": {"description": "A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids). For example: `[\\"4iV5W9uYEdYUVa79Axb7Rh\\", \\"1301WleyT98MSxVHPZCA6M\\"]`  \\nA maximum of 50 items can be specified in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*", "items": {"type": "string"}, "type": "array"}}, "type": "object"}}}, "required": false}, "responses": {"201": {"description": "On success, the HTTP status code in the response header is `201` Created. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to add an album when you do not have the user\'s authorization returns error `403` Forbidden."}}}', 'metadata': {'filename': '0045_me_albums_put_201.json'}}], form collection oas_spotify_fragments
2025-02-02 13:18:24,215 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-02 13:18:24,216 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-02 13:18:24,727 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-02 13:18:24,727 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-02 13:18:34,036 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-02 13:18:34,037 - karate_llm_test_gen - INFO - Generated test case: Here is the Karate DSL test script for the given API endpoint:

```karate
Feature: Test API for Spot...
2025-02-02 13:18:34,037 - __main__ - INFO - Generated Karate test for /me/episodes GET at output/karate_feature_files/ID_001_krtestoas_me_episodes_GET.feature
2025-02-02 13:18:34,038 - karate_compatibility_verifier - INFO - Original content:
2025-02-02 13:18:34,038 - karate_compatibility_verifier - INFO - Here is the Karate DSL test script for the given API endpoint:

```karate
Feature: Test API for Spotify User Episodes

Scenario: Attempt to retrieve user episodes without authentication
Given url 'http://oas_spotify.api/me/episodes'
When method get
Then status 401
And match response contains "Authentication required"

Scenario: Retrieve user episodes with valid authorization token
* url = 'http://oas_spotify.api/me/episodes'
* headers = { Authorization: 'Bearer <valid_token>' }
When method get
Then status 200

Scenario: Attempt to retrieve user episodes with invalid authorization token
* url = 'http://oas_spotify.api/me/episodes'
* headers = { Authorization: 'Bearer <invalid_token>' }
When method get
Then status 401
And match response contains "Authentication required"
```

This test script checks for potential Broken Authentication/Authorization vulnerabilities by attempting to retrieve user episodes without authentication and with an invalid authorization token.
2025-02-02 13:18:41,589 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-02 13:18:41,589 - karate_compatibility_verifier - INFO - Feature: Test API for Spotify User Episodes

Scenario: Attempt to retrieve user episodes without authentication
Given url 'http://oas_spotify.api/me/episodes'
When method get
Then status 401
And match response contains "Authentication required"

Scenario: Retrieve user episodes with valid authorization token
* headers = { Authorization: 'Bearer <valid_token>' }
When method get
Then status 200

Scenario: Attempt to retrieve user episodes with invalid authorization token
* headers = { Authorization: 'Bearer <invalid_token>' }
When method get
Then status 401
And match response contains "Authentication required"
2025-02-02 13:18:46,331 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-02 13:18:46,331 - karate_compatibility_verifier - INFO - Feature: Test API for Spotify User Episodes

Scenario: Attempt to retrieve user episodes without authentication
  Given url 'http://oas_spotify.api/me/episodes'
  When method GET
  Then status 401
  And match response contains "Authentication required"

Scenario: Retrieve user episodes with valid authorization token
* headers = { Authorization: 'Bearer <valid_token>' }
When method get
Then status 200

Scenario: Attempt to retrieve user episodes with invalid authorization token
* headers = { Authorization: 'Bearer <invalid_token>' }
When method GET
Then status 401
And match response contains "Authentication required"
2025-02-02 13:18:46,332 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_001_krtestoas_me_episodes_GET_verified.feature
2025-02-02 13:18:46,333 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_001_krtestoas_me_episodes_GET.feature: Feature: Test API for Spotify User Episodes

Scenario: Attempt to retrieve user episodes without authentication
  Given url 'http://oas_spotify.api/me/episodes'
  When method GET
  Then status 401
  And match response contains "Authentication required"

Scenario: Retrieve user episodes with valid authorization token
* headers = { Authorization: 'Bearer <valid_token>' }
When method get
Then status 200

Scenario: Attempt to retrieve user episodes with invalid authorization token
* headers = { Authorization: 'Bearer <invalid_token>' }
When method GET
Then status 401
And match response contains "Authentication required"
2025-02-02 13:18:46,334 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-02 13:18:46,335 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-02 13:18:46,362 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-02 13:18:46,363 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-02 13:19:00,601 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-02 13:19:00,602 - karate_llm_test_gen - INFO - Generated test case: Here is the Karate DSL test script for the given API endpoint:

```karate
Feature: Test API for Brok...
2025-02-02 13:19:00,603 - __main__ - INFO - Generated Karate test for /me/episodes GET at output/karate_feature_files/ID_002_krtestoas_me_episodes_GET.feature
2025-02-02 13:19:00,603 - karate_compatibility_verifier - INFO - Original content:
2025-02-02 13:19:00,603 - karate_compatibility_verifier - INFO - Here is the Karate DSL test script for the given API endpoint:

```karate
Feature: Test API for Broken Authentication/Authorization

Scenario: Attempt to fetch episodes without authentication
Given url 'http://oas_spotify.api'
And path '/me/episodes'
When method get
Then status 401
And match response contains 'Unauthorized'

Scenario: Attempt to fetch episodes with invalid client_id and client_secret
Given url 'http://oas_spotify.api'
And path '/me/episodes'
And request {client_id: 'invalid_client_id', client_secret: 'invalid_client_secret'}
When method get
Then status 401
And match response contains 'Unauthorized'

Scenario: Attempt to fetch episodes with valid but expired access token
Given url 'http://oas_spotify.api'
And path '/me/episodes'
And request {access_token: 'expired_access_token'}
When method get
Then status 401
And match response contains 'Invalid access token'

Scenario: Fetch episodes successfully with a valid access token
Given url 'http://oas_.spotify.com/api/v1/me/episodes'
And path '/me/episodes'
And request {access_token: 'valid_access_token'}
When method get
Then status 200
```

This test script covers the following scenarios:

* Attempting to fetch episodes without authentication, which should return a 401 Unauthorized response.
* Providing an invalid client_id and client_secret, which should also result in a 401 Unauthorized response.
* Using a valid but expired access token, which should again return a 401 Unauthorized response.
* Fetching episodes successfully with a valid access token.
2025-02-02 13:19:13,504 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-02 13:19:13,504 - karate_compatibility_verifier - INFO - ```
Feature: Test API for Broken Authentication/Authorization

Scenario: Attempt to fetch episodes without authentication
Given url 'http://oas_spotify.api'
And path '/me/episodes'
When method get
Then status 401
And match response contains 'Unauthorized'

Scenario: Attempt to fetch episodes with invalid client_id and client_secret
Given url 'http://oas_spotify.api'
And path '/me/episodes'
* request {client_id: 'invalid_client_id', client_secret: 'invalid_client_secret'}
When method get
Then status 401
And match response contains 'Unauthorized'

Scenario: Attempt to fetch episodes with valid but expired access token
Given url 'http://oas_spotify.api'
And path '/me/episodes'
* request {access_token: 'expired_access_token'}
When method get
Then status 401
And match response contains 'Invalid access token'

Scenario: Fetch episodes successfully with a valid access token
Given url 'http://oas_.spotify.com/api/v1/me/episodes'
And path '/me/episodes'
* request {access_token: 'valid_access_token'}
When method get
Then status 200
2025-02-02 13:19:23,682 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-02 13:19:23,682 - karate_compatibility_verifier - INFO - Here is the corrected Karate DSL script:

````
Feature: Test API for Broken Authentication/Authorization

Scenario: Attempt to fetch episodes without authentication
  Given url 'http://oas_spotify.api'
  And path '/me/episodes'
  When method get
  Then status 401
  And match response contains 'Unauthorized'

Scenario: Attempt to fetch episodes with invalid client_id and client_secret
  Given url 'http://oas_spotify.api'
  And path '/me/episodes'
  * request {client_id: 'invalid_client_id', client_secret: 'invalid_client_secret'}
  When method get
  Then status 401
  And match response contains 'Unauthorized'

Scenario: Attempt to fetch episodes with valid but expired access token
  Given url 'http://oas_spotify.com/api/v1/me/episodes'
  And path '/me/episodes'
  * request {access_token: 'expired_access_token'}
  When method get
  Then status 401
  And match response contains 'Invalid access token'

Scenario: Fetch episodes successfully with a valid access token
  Given url 'http://oas_spotify.com/api/v1/me/episodes'
  And path '/me/episodes'
  * request {access_token: 'valid_access_token'}
  When method get
  Then status 200
2025-02-02 13:19:23,682 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_002_krtestoas_me_episodes_GET_verified.feature
2025-02-02 13:19:23,682 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_002_krtestoas_me_episodes_GET.feature: Here is the corrected Karate DSL script:

````
Feature: Test API for Broken Authentication/Authorization

Scenario: Attempt to fetch episodes without authentication
  Given url 'http://oas_spotify.api'
  And path '/me/episodes'
  When method get
  Then status 401
  And match response contains 'Unauthorized'

Scenario: Attempt to fetch episodes with invalid client_id and client_secret
  Given url 'http://oas_spotify.api'
  And path '/me/episodes'
  * request {client_id: 'invalid_client_id', client_secret: 'invalid_client_secret'}
  When method get
  Then status 401
  And match response contains 'Unauthorized'

Scenario: Attempt to fetch episodes with valid but expired access token
  Given url 'http://oas_spotify.com/api/v1/me/episodes'
  And path '/me/episodes'
  * request {access_token: 'expired_access_token'}
  When method get
  Then status 401
  And match response contains 'Invalid access token'

Scenario: Fetch episodes successfully with a valid access token
  Given url 'http://oas_spotify.com/api/v1/me/episodes'
  And path '/me/episodes'
  * request {access_token: 'valid_access_token'}
  When method get
  Then status 200
2025-02-02 13:19:23,683 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-02 13:19:23,683 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-02 13:19:23,708 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-02 13:19:23,708 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-02 13:19:40,455 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-02 13:19:40,456 - karate_llm_test_gen - INFO - Generated test case: Here are the Karate DSL test scripts for each of the given API endpoints:

**Scenario 1: OAuth Token...
2025-02-02 13:19:40,456 - __main__ - INFO - Generated Karate test for /me/albums PUT at output/karate_feature_files/ID_003_krtestoas_me_albums_PUT.feature
2025-02-02 13:19:40,457 - karate_compatibility_verifier - INFO - Original content:
2025-02-02 13:19:40,457 - karate_compatibility_verifier - INFO - Here are the Karate DSL test scripts for each of the given API endpoints:

**Scenario 1: OAuth Token Generation Flaw**
```karate
Feature: Test API for OAuth Token Generation Flaw

Scenario: Attempt to exploit OAuth token generation with a stolen authorization code
Given url 'http://oas_spotify.api/me/albums'
And request { grant_type: 'authorization_code', code: 'stolen_code', redirect_uri: 'http://evil. example.com', client_id: 'client_id', client_secret: 'client_secret' }
When method put
Then status 400
And match response contains "Invalid grant: authorization code is invalid"
```

**Scenario 2: Improper Authorization on User Documents Access**
```karate
Feature: Test for Improper Authorization on User Documents Access

Scenario: Attempt to access a document without being an 'admin' or 'editor'
Given url 'http://oas_spotify.api/me/albums'
And header Authorization = 'Bearer <regular_user_token>'
When method put
Then status 403
And match response contains "You do not have permission to access this album."

* def adminAccess = callonce read('classpath:helpers/adminAccess.feature'),
* switch adminAccess.status,
case 200:
    * assert adminAccess.response == 'Album details',
case 403:
    * fail 'Admin should have access'
```

**Scenario 3: Refresh Token Abuse**
```karate
Feature: Test API for Refresh Token Abuse

Scenario: Attempt to use a leaked refresh token to obtain a new access token
Given url 'http://oas_spotify.api/oauth/refresh'
And request { refresh_token: 'leaked_refresh_token', client_id: 'client_id', client_secret: 'client_secret' }
When method post
Then status 400
And match response contains "Invalid refresh token"
```

These test scripts aim to check for potential Broken Authentication/Authorization vulnerabilities in the given API endpoints.
2025-02-02 13:19:56,414 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-02 13:19:56,414 - karate_compatibility_verifier - INFO - Here are the corrected Karate DSL test scripts:

**Scenario 1: OAuth Token Generation Flaw**
```karate
Feature:
Scenario: Attempt to exploit OAuth token generation with a stolen authorization code
Given url 'http://oas_spotify.api/oauth/token'
And request { grant_type='authorization_code', code='stolen_code', redirect_uri='http://evil.example.com', client_id='client_id', client_secret='client_secret'}
When method post
Then status 400
And match response contains "Invalid grant: authorization code is invalid"
```

**Scenario 2: Improper Authorization on User Documents Access**
```karate
Feature:
Scenario: Attempt to access a document without being an 'admin' or 'editor'
Given url 'http://oas_spotify.api/me/albums'
And header Authorization = 'Bearer <regular_user_token>'
When method get
Then status 403
And match response contains "You do not have permission to access this album."

* def adminAccess = callonce read('classpath:helpers/adminAccess.feature'), 
* switch adminAccess.status, 
case 200:
    * assert adminAccess.response == 'Album details', 
case 403:
    * fail 'Admin should have access'
```

**Scenario 3: Refresh Token Abuse**
```karate
Feature:
Scenario: Attempt to use a leaked refresh token to obtain a new access token
Given url 'http://oas_spotify.api/oauth/refresh'
And request { refresh_token='leaked_refresh_token', client_id='client_id', client_secret='client_secret'}
When method post
Then status 400
And match response contains "Invalid refresh token"
```
2025-02-02 13:20:09,147 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-02 13:20:09,147 - karate_compatibility_verifier - INFO - Here are the corrected Karate DSL test scripts:

**Scenario 1: OAuth Token Generation Flaw**
```karate
Feature:
Scenario: Attempt to exploit OAuth token generation with a stolen authorization code
Given url 'http://oas_spotify.api/oauth/token'
And request { grant_type='authorization_code', code='stolen_code', redirect_uri='http://evil.example.com', client_id='client_id', client_secret='client_secret'}
When method post
Then status 400
And match response contains "Invalid grant: authorization code is invalid"
```

**Scenario 2: Improper Authorization on User Documents Access**
```karate
Feature:
Scenario: Attempt to access a document without being an 'admin' or 'editor'
Given url 'http://oas_spotify.api/me/albums'
And header Authorization = 'Bearer <regular_user_token>'
When method get
Then status 403
And match response contains "You do not have permission to access this album."

* def adminAccess = callonce read('classpath:helpers/adminAccess.feature'), 
* switch adminAccess.status, 
case 200:
    * assert adminAccess.response == 'Album details', 
case 403:
    * fail 'Admin should have access'
```

**Scenario 3: Refresh Token Abuse**
```karate
Feature:
Scenario: Attempt to use a leaked refresh token to obtain a new access token
Given url 'http://oas_spotify.api/oauth/refresh'
And request { refresh_token='leaked_refresh_token', client_id='client_id', client_secret='client_secret'}
When method post
Then status 400
And match response contains "Invalid refresh token"
```
2025-02-02 13:20:09,148 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_003_krtestoas_me_albums_PUT_verified.feature
2025-02-02 13:20:09,148 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_003_krtestoas_me_albums_PUT.feature: Here are the corrected Karate DSL test scripts:

**Scenario 1: OAuth Token Generation Flaw**
```karate
Feature:
Scenario: Attempt to exploit OAuth token generation with a stolen authorization code
Given url 'http://oas_spotify.api/oauth/token'
And request { grant_type='authorization_code', code='stolen_code', redirect_uri='http://evil.example.com', client_id='client_id', client_secret='client_secret'}
When method post
Then status 400
And match response contains "Invalid grant: authorization code is invalid"
```

**Scenario 2: Improper Authorization on User Documents Access**
```karate
Feature:
Scenario: Attempt to access a document without being an 'admin' or 'editor'
Given url 'http://oas_spotify.api/me/albums'
And header Authorization = 'Bearer <regular_user_token>'
When method get
Then status 403
And match response contains "You do not have permission to access this album."

* def adminAccess = callonce read('classpath:helpers/adminAccess.feature'), 
* switch adminAccess.status, 
case 200:
    * assert adminAccess.response == 'Album details', 
case 403:
    * fail 'Admin should have access'
```

**Scenario 3: Refresh Token Abuse**
```karate
Feature:
Scenario: Attempt to use a leaked refresh token to obtain a new access token
Given url 'http://oas_spotify.api/oauth/refresh'
And request { refresh_token='leaked_refresh_token', client_id='client_id', client_secret='client_secret'}
When method post
Then status 400
And match response contains "Invalid refresh token"
```
2025-02-02 13:20:09,148 - __main__ - INFO - Moving generated Karate feature files...
2025-02-02 13:20:09,150 - __main__ - INFO - Creating the Karate Test Framework with generated feature files
2025-02-02 13:20:11,960 - __main__ - INFO - Skipping karate test run.
