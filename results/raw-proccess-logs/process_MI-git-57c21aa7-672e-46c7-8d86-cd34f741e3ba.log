2025-01-30 23:29:32,896 - __main__ - INFO - Skipping fragment creation: False
2025-01-30 23:29:32,988 - __main__ - DEBUG - Starting fragment retrieval process.
2025-01-30 23:29:33,218 - __main__ - DEBUG - Retrieved fragments: [{'content': '{"method": "GET", "parameters": [{"description": "Name of organisation.", "in": "path", "name": "org", "required": true, "schema": {"type": "string"}}, {"description": "Issues assigned to you / created by you / mentioning you / you\'re\\nsubscribed to updates for / All issues the authenticated user can see\\n", "in": "query", "name": "filter", "required": true, "schema": {"default": "all", "enum": ["assigned", "created", "mentioned", "subscribed", "all"], "type": "string"}}, {"in": "query", "name": "state", "required": true, "schema": {"default": "open", "enum": ["open", "closed"], "type": "string"}}, {"description": "String list of comma separated Label names. Example - bug,ui,@high.", "in": "query", "name": "labels", "required": true, "schema": {"type": "string"}}, {"in": "query", "name": "sort", "required": true, "schema": {"default": "created", "enum": ["created", "updated", "comments"], "type": "string"}}, {"in": "query", "name": "direction", "required": true, "schema": {"default": "desc", "enum": ["asc", "desc"], "type": "string"}}, {"description": "Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\\nOnly issues updated at or after this time are returned.\\n", "in": "query", "name": "since", "schema": {"type": "string"}}, {"description": "You can check the current version of media type in responses.\\n", "in": "header", "name": "X-GitHub-Media-Type", "schema": {"type": "string"}}, {"description": "Is used to set specified media type.", "in": "header", "name": "Accept", "schema": {"type": "string"}}, {"in": "header", "name": "X-RateLimit-Limit", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Remaining", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Reset", "schema": {"type": "integer"}}, {"in": "header", "name": "X-GitHub-Request-Id", "schema": {"type": "integer"}}], "path": "/orgs/{org}/issues", "requestBody": {}, "responses": {"403": {"content": {}, "description": "API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\\nfor details.\\n"}}}', 'metadata': {'filename': '0084_orgs_org_issues_get_403.json'}}, {'content': '{"method": "GET", "parameters": [{"description": "Name of organisation.", "in": "path", "name": "org", "required": true, "schema": {"type": "string"}}, {"description": "Issues assigned to you / created by you / mentioning you / you\'re\\nsubscribed to updates for / All issues the authenticated user can see\\n", "in": "query", "name": "filter", "required": true, "schema": {"default": "all", "enum": ["assigned", "created", "mentioned", "subscribed", "all"], "type": "string"}}, {"in": "query", "name": "state", "required": true, "schema": {"default": "open", "enum": ["open", "closed"], "type": "string"}}, {"description": "String list of comma separated Label names. Example - bug,ui,@high.", "in": "query", "name": "labels", "required": true, "schema": {"type": "string"}}, {"in": "query", "name": "sort", "required": true, "schema": {"default": "created", "enum": ["created", "updated", "comments"], "type": "string"}}, {"in": "query", "name": "direction", "required": true, "schema": {"default": "desc", "enum": ["asc", "desc"], "type": "string"}}, {"description": "Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\\nOnly issues updated at or after this time are returned.\\n", "in": "query", "name": "since", "schema": {"type": "string"}}, {"description": "You can check the current version of media type in responses.\\n", "in": "header", "name": "X-GitHub-Media-Type", "schema": {"type": "string"}}, {"description": "Is used to set specified media type.", "in": "header", "name": "Accept", "schema": {"type": "string"}}, {"in": "header", "name": "X-RateLimit-Limit", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Remaining", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Reset", "schema": {"type": "integer"}}, {"in": "header", "name": "X-GitHub-Request-Id", "schema": {"type": "integer"}}], "path": "/orgs/{org}/issues", "requestBody": {}, "responses": {"200": {"content": {"application/json": {"schema": {"items": {"properties": {"assignee": {"properties": {"avatar_url": {"type": "string"}, "gravatar_id": {"type": "string"}, "id": {"type": "integer"}, "login": {"type": "string"}, "url": {"type": "string"}}, "type": "object"}, "body": {"type": "string"}, "closed_at": {"description": "ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ", "type": "string"}, "comments": {"type": "integer"}, "created_at": {"description": "ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ", "type": "string"}, "html_url": {"type": "string"}, "labels": {"items": {"properties": {"color": {"type": "string"}, "name": {"type": "string"}, "url": {"type": "string"}}, "type": "object"}, "type": "array"}, "milestone": {"properties": {"closed_issues": {"type": "integer"}, "created_at": {"description": "ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ", "type": "string"}, "creator": {"properties": {"avatar_url": {"type": "string"}, "gravatar_id": {"type": "string"}, "id": {"type": "integer"}, "login": {"type": "string"}, "url": {"type": "string"}}, "type": "object"}, "description": {"type": "string"}, "due_on": {"description": "ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ", "type": "string"}, "number": {"type": "integer"}, "open_issues": {"type": "integer"}, "state": {"type": "object"}, "title": {"type": "string"}, "url": {"type": "string"}}, "type": "object"}, "number": {"type": "integer"}, "pull_request": {"properties": {"diff_url": {"type": "string"}, "html_url": {"type": "string"}, "patch_url": {"type": "string"}}, "type": "object"}, "state": {"type": "object"}, "title": {"type": "string"}, "updated_at": {"description": "ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ", "type": "string"}, "url": {"type": "string"}, "user": {"properties": {"avatar_url": {"type": "string"}, "gravatar_id": {"type": "string"}, "id": {"type": "integer"}, "login": {"type": "string"}, "url": {"type": "string"}}, "type": "object"}}, "type": "object"}, "type": "array"}}}, "description": "OK"}}}', 'metadata': {'filename': '0083_orgs_org_issues_get_200.json'}}, {'content': '{"method": "GET", "parameters": [{"description": "Name of repository owner.", "in": "path", "name": "owner", "required": true, "schema": {"type": "string"}}, {"description": "Name of repository.", "in": "path", "name": "repo", "required": true, "schema": {"type": "string"}}, {"description": "Issues assigned to you / created by you / mentioning you / you\'re\\nsubscribed to updates for / All issues the authenticated user can see\\n", "in": "query", "name": "filter", "required": true, "schema": {"default": "all", "enum": ["assigned", "created", "mentioned", "subscribed", "all"], "type": "string"}}, {"in": "query", "name": "state", "required": true, "schema": {"default": "open", "enum": ["open", "closed"], "type": "string"}}, {"description": "String list of comma separated Label names. Example - bug,ui,@high.", "in": "query", "name": "labels", "required": true, "schema": {"type": "string"}}, {"in": "query", "name": "sort", "required": true, "schema": {"default": "created", "enum": ["created", "updated", "comments"], "type": "string"}}, {"in": "query", "name": "direction", "required": true, "schema": {"default": "desc", "enum": ["asc", "desc"], "type": "string"}}, {"description": "Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\\nOnly issues updated at or after this time are returned.\\n", "in": "query", "name": "since", "schema": {"type": "string"}}, {"description": "You can check the current version of media type in responses.\\n", "in": "header", "name": "X-GitHub-Media-Type", "schema": {"type": "string"}}, {"description": "Is used to set specified media type.", "in": "header", "name": "Accept", "schema": {"type": "string"}}, {"in": "header", "name": "X-RateLimit-Limit", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Remaining", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Reset", "schema": {"type": "integer"}}, {"in": "header", "name": "X-GitHub-Request-Id", "schema": {"type": "integer"}}], "path": "/repos/{owner}/{repo}/issues", "requestBody": {}, "responses": {"403": {"content": {}, "description": "API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\\nfor details.\\n"}}}', 'metadata': {'filename': '0224_repos_owner_repo_issues_get_403.json'}}], form collection oas_github_fragments
2025-01-30 23:29:33,218 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-01-30 23:29:33,219 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-01-30 23:29:33,636 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-01-30 23:29:33,636 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-01-30 23:34:37,156 - karate_llm_test_gen - INFO - Response status code: 200
2025-01-30 23:34:37,158 - karate_llm_test_gen - INFO - Generated test case: Here's an example of how you can write a security test case using Karate DSL scenario for the given ...
2025-01-30 23:34:37,159 - __main__ - INFO - Generated Karate test for /orgs/{org}/issues GET at output/karate_feature_files/ID_001_krtestoas_orgs_org_issues_GET.feature
2025-01-30 23:34:37,159 - karate_compatibility_verifier - INFO - Original content:
2025-01-30 23:34:37,160 - karate_compatibility_verifier - INFO - Here's an example of how you can write a security test case using Karate DSL scenario for the given API endpoint information:
```kotlin
Feature: Test for Broken Authentication/Authorization on /orgs/{org}/issues Endpoint

Scenario: Attempt to access issues without proper authentication
  Given url "http://oas_github.api/orgs/{org}/issues"
  When method get
  Then status code is 401
  And match response contains "Unauthorized."

Scenario: Attempt to access issues with an invalid token
  Given url "http://oas_github.api/orgs/{org}/issues"
  And header Authorization = "Bearer <invalid-token>"
  When method get
  Then status code is 401
  And match response contains "Unauthorized."
```
This test case checks for two scenarios: one where the user tries to access issues without proper authentication, and another where the user tries to access issues with an invalid token. The first scenario uses a GET request with no Authorization header, while the second scenario sets the Authorization header to a known invalid token. Both scenarios should return a 401 Unauthorized status code and contain the message "Unauthorized."
2025-01-30 23:38:07,329 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-01-30 23:38:07,329 - karate_compatibility_verifier - INFO - Feature: Test for Broken Authentication/Authorization on /orgs/{org}/issues Endpoint

Scenario: Attempt to access issues without proper authentication
Given url "http://oas_github.api/orgs/{org}/issues"
When method get
Then status code is 401
And match response contains "Unauthorized."

Scenario: Attempt to access issues with an invalid token
Given url "http://oas_github.api/orgs/{org}/issues"
And header Authorization = "Bearer <invalid-token>"
When method get
Then status code is 401
And match response contains "Unauthorized."
2025-01-30 23:39:23,866 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-01-30 23:39:23,867 - karate_compatibility_verifier - INFO - Feature: Test for Broken Authentication/Authorization on /orgs/{org}/issues Endpoint

Scenario: Attempt to access issues without proper authentication
Given url "http://oas_github.api/orgs/{org}/issues"
When method get
Then status code is 401
And match response contains "Unauthorized."
2025-01-30 23:39:23,867 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_001_krtestoas_orgs_org_issues_GET_verified.feature
2025-01-30 23:39:23,867 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_001_krtestoas_orgs_org_issues_GET.feature: Feature: Test for Broken Authentication/Authorization on /orgs/{org}/issues Endpoint

Scenario: Attempt to access issues without proper authentication
Given url "http://oas_github.api/orgs/{org}/issues"
When method get
Then status code is 401
And match response contains "Unauthorized."
2025-01-30 23:39:23,868 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-01-30 23:39:23,869 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-01-30 23:39:23,911 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-01-30 23:39:23,911 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-01-30 23:44:20,561 - karate_llm_test_gen - INFO - Response status code: 200
2025-01-30 23:44:20,562 - karate_llm_test_gen - INFO - Generated test case: Here's an example of a security test scenario using Karate DSL for checking Broken Authentication/Au...
2025-01-30 23:44:20,563 - __main__ - INFO - Generated Karate test for /orgs/{org}/issues GET at output/karate_feature_files/ID_002_krtestoas_orgs_org_issues_GET.feature
2025-01-30 23:44:20,564 - karate_compatibility_verifier - INFO - Original content:
2025-01-30 23:44:20,564 - karate_compatibility_verifier - INFO - Here's an example of a security test scenario using Karate DSL for checking Broken Authentication/Authorization vulnerabilities on the API endpoint:
```kotlin
Feature: Test for Broken Authentication/Authorization Vulnerabilities

Scenario: Attempt to access issues without authentication
  Given url http://oas_github.api/orgs/{org}/issues
  When method get
  Then status code is not 401 or 403

Scenario: Attempt to access issues with invalid token
  Given url http://oas_github.api/orgs/{org}/issues
  And header Authorization = 'Bearer <invalid-token>'
  When method get
  Then status code is not 200 or 403
```
Note that the above scenarios are just examples and you may need to modify them based on your specific requirements. Additionally, it's important to note that this test script only checks for Broken Authentication/Authorization vulnerabilities related to accessing issues without authentication or with invalid tokens. You should also consider testing other aspects of the API endpoint such as creating, updating, and deleting issues to ensure comprehensive security testing.
2025-01-30 23:48:02,915 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-01-30 23:48:02,916 - karate_compatibility_verifier - INFO - Feature: Test for Broken Authentication/Authorization Vulnerabilities

Scenario: Attempt to access issues without authentication
  Given url http://oas_github.api/orgs/{org}/issues
  When method get
  Then status code is not 401 or 403

Scenario: Attempt to access issues with invalid token
  Given url http://oas_github.api/orgs/{org}/issues
  And header Authorization = 'Bearer <invalid-token>'
  When method get
  Then status code is not 200 or 403
2025-01-30 23:49:43,850 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-01-30 23:49:43,851 - karate_compatibility_verifier - INFO - Feature: Test for Broken Authentication/Authorization Vulnerabilities

Scenario: Attempt to access issues without authentication
  Given url http://oas_github.api/orgs/{org}/issues
  When method get
  Then status code is not 401 or 403

Scenario: Attempt to access issues with invalid token
  Given url http://oas_github.api/orgs/{org}/issues
  And header Authorization = 'Bearer <invalid-token>'
  When method get
  Then status code is not 200 or 403
2025-01-30 23:49:43,851 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_002_krtestoas_orgs_org_issues_GET_verified.feature
2025-01-30 23:49:43,852 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_002_krtestoas_orgs_org_issues_GET.feature: Feature: Test for Broken Authentication/Authorization Vulnerabilities

Scenario: Attempt to access issues without authentication
  Given url http://oas_github.api/orgs/{org}/issues
  When method get
  Then status code is not 401 or 403

Scenario: Attempt to access issues with invalid token
  Given url http://oas_github.api/orgs/{org}/issues
  And header Authorization = 'Bearer <invalid-token>'
  When method get
  Then status code is not 200 or 403
2025-01-30 23:49:43,852 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-01-30 23:49:43,853 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-01-30 23:49:43,892 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-01-30 23:49:43,893 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-01-30 23:53:42,516 - karate_llm_test_gen - INFO - Response status code: 200
2025-01-30 23:53:42,517 - karate_llm_test_gen - INFO - Generated test case: Here's an example of a security test scenario using Karate DSL for checking Broken Authentication/Au...
2025-01-30 23:53:42,518 - __main__ - INFO - Generated Karate test for /repos/{owner}/{repo}/issues GET at output/karate_feature_files/ID_003_krtestoas_repos_owner_repo_issues_GET.feature
2025-01-30 23:53:42,518 - karate_compatibility_verifier - INFO - Original content:
2025-01-30 23:53:42,518 - karate_compatibility_verifier - INFO - Here's an example of a security test scenario using Karate DSL for checking Broken Authentication/Authorization vulnerabilities on the given API endpoint:
```kotlin
Feature: Testing /repos/{owner}/{repo}/issues Endpoint

Scenario: Unauthorized access to issues
    Given url http://oas_github.api/repos/{owner}/{repo}/issues
    When method get
    Then status 401
    And match response contains 'Unauthorized'
```
This scenario tests the endpoint for unauthorized access by attempting a GET request without any authentication or authorization tokens. If the endpoint returns a `401 Unauthorized` status code and includes an error message indicating that the user is not authorized, then the test case passes.
2025-01-30 23:56:30,000 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-01-30 23:56:30,000 - karate_compatibility_verifier - INFO - Feature: Testing /repos/{owner}/{repo}/issues Endpoint

Scenario: Unauthorized access to issues
    Given url http://oas_github.api/repos/{owner}/{repo}/issues
    When method get
    Then status 401
    And match response contains 'Unauthorized'
2025-01-30 23:57:30,429 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-01-30 23:57:30,430 - karate_compatibility_verifier - INFO - Feature: Testing /repos/{owner}/{repo}/issues Endpoint
Scenario: Unauthorized access to issues
Given url http://oas_github.api/repos/{owner}/{repo}/issues
When method get
Then status 401
And match response contains 'Unauthorized'
2025-01-30 23:57:30,431 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_003_krtestoas_repos_owner_repo_issues_GET_verified.feature
2025-01-30 23:57:30,432 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_003_krtestoas_repos_owner_repo_issues_GET.feature: Feature: Testing /repos/{owner}/{repo}/issues Endpoint
Scenario: Unauthorized access to issues
Given url http://oas_github.api/repos/{owner}/{repo}/issues
When method get
Then status 401
And match response contains 'Unauthorized'
2025-01-30 23:57:30,432 - __main__ - INFO - Moving generated Karate feature files...
2025-01-30 23:57:30,435 - __main__ - INFO - Creating the Karate Test Framework with generated feature files
2025-01-30 23:57:33,916 - __main__ - INFO - Skipping karate test run.
