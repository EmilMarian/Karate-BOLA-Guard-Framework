2025-02-02 13:13:09,198 - __main__ - INFO - Skipping fragment creation: False
2025-02-02 13:13:09,262 - __main__ - DEBUG - Starting fragment retrieval process.
2025-02-02 13:13:09,543 - __main__ - DEBUG - Retrieved fragments: [{'content': '{"method": "POST", "parameters": [], "path": "/apexrest/PB2P", "requestBody": {"content": {"application/json": {"schema": {"properties": {"Company_Name__c": {"example": "Test Company", "maxLength": 30, "type": "string"}, "CreatedDate": {"example": "2021-09-17T16:47:55.000+0000", "type": "integer"}, "Email__c": {"example": "test@wexinc.com", "type": "string"}, "First_Name__c": {"example": "Jane", "type": "string"}, "Id": {"type": "string"}, "Last_Name__c": {"example": "Doe", "type": "string"}, "Name": {"type": "string"}, "Online_Application_Offer__c": {"example": "a3L7g000000kYBmEAM", "type": "string"}, "OwnerId": {"type": "string"}, "Partner_Data_Field_1__c": {"example": "0068971", "type": "string"}, "Partner_Data_Field_2__c": {"example": "UDF 2", "type": "string"}, "Partner_Data_Field_3__c": {"example": "NA", "type": "string"}, "Partner_Data_Field_4__c": {"example": "3-6 months", "type": "string"}, "Partner_Data_Field_5__c": {"example": "Other", "type": "string"}, "Partner_Opportunity_ID__c": {"example": "0067g00000IJDEsAAP", "type": "string"}, "Partner_Sales_Code__c": {"description": "Verification Code generated for Partner or Provided by Partner", "example": "446F2C1A-DC5E-4C7E-9", "type": "string"}, "Partner__c": {"example": "a057g000004v685AAA", "type": "string"}, "Phone__c": {"example": 6155555555, "type": "string"}, "Program__c": {"example": "a0Z7g000002OK02EAG", "type": "string"}, "Sales_Rep_Code__c": {"example": 4759, "type": "string"}, "Sales_Rep_Email__c": {"example": "john@ryder.com", "type": "string"}, "Sales_Rep_First_Name__c": {"example": "John", "type": "string"}, "Sales_Rep_Last_Name__c": {"example": "Smith", "type": "string"}, "Sales_Rep_Phone__c": {"example": 8655551234, "type": "string"}}, "required": ["Program__c", "Online_Application_Offer__c", "Company_Name__c", "First_Name__c", "Last_Name__c", "Email__c", "Phone__c", "Partner_Sales_Code__c", "Sales_Rep_First_Name__c", "Sales_Rep_Last_Name__c", "Sales_Rep_Email__c", "Sales_Rep_Phone__c"], "type": "object"}}}, "description": ""}, "responses": {"200": {"description": "Record Created"}}}', 'metadata': {'filename': '0001_apexrest_PB2P_post_200.json'}}, {'content': '{"method": "POST", "parameters": [], "path": "/apexrest/PB2P", "requestBody": {"content": {"application/json": {"schema": {"properties": {"Company_Name__c": {"example": "Test Company", "maxLength": 30, "type": "string"}, "CreatedDate": {"example": "2021-09-17T16:47:55.000+0000", "type": "integer"}, "Email__c": {"example": "test@wexinc.com", "type": "string"}, "First_Name__c": {"example": "Jane", "type": "string"}, "Id": {"type": "string"}, "Last_Name__c": {"example": "Doe", "type": "string"}, "Name": {"type": "string"}, "Online_Application_Offer__c": {"example": "a3L7g000000kYBmEAM", "type": "string"}, "OwnerId": {"type": "string"}, "Partner_Data_Field_1__c": {"example": "0068971", "type": "string"}, "Partner_Data_Field_2__c": {"example": "UDF 2", "type": "string"}, "Partner_Data_Field_3__c": {"example": "NA", "type": "string"}, "Partner_Data_Field_4__c": {"example": "3-6 months", "type": "string"}, "Partner_Data_Field_5__c": {"example": "Other", "type": "string"}, "Partner_Opportunity_ID__c": {"example": "0067g00000IJDEsAAP", "type": "string"}, "Partner_Sales_Code__c": {"description": "Verification Code generated for Partner or Provided by Partner", "example": "446F2C1A-DC5E-4C7E-9", "type": "string"}, "Partner__c": {"example": "a057g000004v685AAA", "type": "string"}, "Phone__c": {"example": 6155555555, "type": "string"}, "Program__c": {"example": "a0Z7g000002OK02EAG", "type": "string"}, "Sales_Rep_Code__c": {"example": 4759, "type": "string"}, "Sales_Rep_Email__c": {"example": "john@ryder.com", "type": "string"}, "Sales_Rep_First_Name__c": {"example": "John", "type": "string"}, "Sales_Rep_Last_Name__c": {"example": "Smith", "type": "string"}, "Sales_Rep_Phone__c": {"example": 8655551234, "type": "string"}}, "required": ["Program__c", "Online_Application_Offer__c", "Company_Name__c", "First_Name__c", "Last_Name__c", "Email__c", "Phone__c", "Partner_Sales_Code__c", "Sales_Rep_First_Name__c", "Sales_Rep_Last_Name__c", "Sales_Rep_Email__c", "Sales_Rep_Phone__c"], "type": "object"}}}, "description": ""}, "responses": {"400": {"description": "invalid input, object invalid"}}}', 'metadata': {'filename': '0002_apexrest_PB2P_post_400.json'}}, {'content': '{"method": "GET", "parameters": [{"description": "Record Id for fetching specified Partner BOCA to Prospect record", "in": "path", "name": "id", "required": true, "schema": {"type": "string"}}], "path": "/apexrest/PB2P/{id}", "requestBody": {}, "responses": {"400": {"description": "invalid input, object invalid"}}}', 'metadata': {'filename': '0004_apexrest_PB2P_id_get_400.json'}}], form collection oas_salesforce_partner_API_fragments
2025-02-02 13:13:09,544 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-02 13:13:09,544 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-02 13:13:09,960 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-02 13:13:09,960 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-02 13:13:31,130 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-02 13:13:31,131 - karate_llm_test_gen - INFO - Generated test case: Here is the Karate DSL test script to check for potential Broken Authentication/Authorization vulner...
2025-02-02 13:13:31,133 - __main__ - INFO - Generated Karate test for /apexrest/PB2P POST at output/karate_feature_files/ID_001_krtestoas_apexrest_PB2P_POST.feature
2025-02-02 13:13:31,133 - karate_compatibility_verifier - INFO - Original content:
2025-02-02 13:13:31,134 - karate_compatibility_verifier - INFO - Here is the Karate DSL test script to check for potential Broken Authentication/Authorization vulnerabilities:

```
Feature: Test API for PB2P Endpoint Flaw
Scenario: Attempt to exploit PB2P endpoint with invalid authentication
Given url 'http://oas_salesforce_partner_API.api/apexrest/PB2P'
And request { 
    "some_data": 12345, 
    "invalid_token": "<invalid_token>"
}
When method post
Then status 401
And match response contains 'Invalid token'

Scenario: Attempt to exploit PB2P endpoint with valid but unauthorized authentication
Given url 'http://oas_salesforce_partner_API.api/apexrest/PB2P'
And request { 
    "some_data": 12345, 
    "valid_token": "<valid_but_unauthorized_token>"
}
When method post
Then status 403
And match response contains 'Access denied'

Scenario: Attempt to exploit PB2P endpoint with valid and authorized authentication as admin
Given url 'http://oas_salesforce_partner_API.api/apexrest/PB2P'
And request { 
    "some_data": 12345, 
    "admin_token": "<valid_and_authorized_admin_token>"
}
When method post
Then status 200
And match response contains 'PB2P endpoint accessed successfully'

Scenario: Attempt to exploit PB2P endpoint with valid and authorized authentication as editor
Given url 'http://oas_salesforce_partner_API.api/apexrest/PB2P'
And request { 
    "some_data": 12345, 
    "editor_token": "<valid_and_authorized_editor_token>"
}
When method post
Then status 200
And match response contains 'PB2P endpoint accessed successfully'

```

This test script checks for potential Broken Authentication/Authorization vulnerabilities by attempting to access the PB2P endpoint with:

1. An invalid token, which should return a 401 Unauthorized error.
2. A valid but unauthorized token (e.g., as a regular user), which should return a 403 Forbidden error.
3. A valid and authorized admin token, which should allow successful access to the endpoint.
4. A valid and authorized editor token, which should also allow successful access to the endpoint.

Note that you'll need to replace `<invalid_token>`, `<valid_but_unauthorized_token>`, `<valid_and_authorized_admin_token>`, and `<valid_and_authorized_editor_token>` with actual tokens or values specific to your API implementation.
2025-02-02 13:13:46,504 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-02 13:13:46,505 - karate_compatibility_verifier - INFO - Feature: Test API for PB2P Endpoint Flaw
Scenario: Attempt to exploit PB2P endpoint with invalid authentication
Given url 'http://oas_salesforce_partner_API.api/apexrest/PB2P'
And request { "some_data": 12345, "token": "'<invalid_token>'" }
When method post
Then status 401
And match response contains 'Invalid token'

Scenario: Attempt to exploit PB2P endpoint with valid but unauthorized authentication
Given url 'http://oas_salesforce_partner_API.api/apexrest/PB2P'
And request { "some_data": 12345, "token": "'<valid_but_unauthorized_token>'" }
When method post
Then status 403
And match response contains 'Access denied'

Scenario: Attempt to exploit PB2P endpoint with valid and authorized authentication as admin
Given url 'http://oas_salesforce_partner_API.api/apexrest/PB2P'
And request { "some_data": 12345, "token": "'<valid_and_authorized_admin_token>'" }
When method post
Then status 200
And match response contains 'PB2P endpoint accessed successfully'

Scenario: Attempt to exploit PB2P endpoint with valid and authorized authentication as editor
Given url 'http://oas_salesforce_partner_API.api/apexrest/PB2P'
And request { "some_data": 12345, "token": "'<valid_and_authorized_editor_token>'" }
When method post
Then status 200
And match response contains 'PB2P endpoint accessed successfully'
2025-02-02 13:13:59,089 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-02 13:13:59,089 - karate_compatibility_verifier - INFO - Feature: Test API for PB2P Endpoint Flaw

Scenario: Attempt to exploit PB2P endpoint with invalid authentication
  Given url 'http://oas_salesforce_partner_API.api/apexrest/PB2P'
  And request { "some_data": 12345, "token": "<invalid_token>" }
  When method post
  Then status 401
  And match response contains 'Invalid token'

Scenario: Attempt to exploit PB2P endpoint with valid but unauthorized authentication
  Given url 'http://oas_salesforce_partner_API.api/apexrest/PB2P'
  And request { "some_data": 12345, "token": "<valid_but_unauthorized_token>" }
  When method post
  Then status 403
  And match response contains 'Access denied'

Scenario: Attempt to exploit PB2P endpoint with valid and authorized authentication as admin
  Given url 'http://oas_salesforce_partner_API.api/apexrest/PB2P'
  And request { "some_data": 12345, "token": "<valid_and_authorized_admin_token>" }
  When method post
  Then status 200
  And match response contains 'PB2P endpoint accessed successfully'

Scenario: Attempt to exploit PB2P endpoint with valid and authorized authentication as editor
  Given url 'http://oas_salesforce_partner_API.api/apexrest/PB2P'
  And request { "some_data": 12345, "token": "<valid_and_authorized_editor_token>" }
  When method post
  Then status 200
  And match response contains 'PB2P endpoint accessed successfully'
2025-02-02 13:13:59,090 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_001_krtestoas_apexrest_PB2P_POST_verified.feature
2025-02-02 13:13:59,090 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_001_krtestoas_apexrest_PB2P_POST.feature: Feature: Test API for PB2P Endpoint Flaw

Scenario: Attempt to exploit PB2P endpoint with invalid authentication
  Given url 'http://oas_salesforce_partner_API.api/apexrest/PB2P'
  And request { "some_data": 12345, "token": "<invalid_token>" }
  When method post
  Then status 401
  And match response contains 'Invalid token'

Scenario: Attempt to exploit PB2P endpoint with valid but unauthorized authentication
  Given url 'http://oas_salesforce_partner_API.api/apexrest/PB2P'
  And request { "some_data": 12345, "token": "<valid_but_unauthorized_token>" }
  When method post
  Then status 403
  And match response contains 'Access denied'

Scenario: Attempt to exploit PB2P endpoint with valid and authorized authentication as admin
  Given url 'http://oas_salesforce_partner_API.api/apexrest/PB2P'
  And request { "some_data": 12345, "token": "<valid_and_authorized_admin_token>" }
  When method post
  Then status 200
  And match response contains 'PB2P endpoint accessed successfully'

Scenario: Attempt to exploit PB2P endpoint with valid and authorized authentication as editor
  Given url 'http://oas_salesforce_partner_API.api/apexrest/PB2P'
  And request { "some_data": 12345, "token": "<valid_and_authorized_editor_token>" }
  When method post
  Then status 200
  And match response contains 'PB2P endpoint accessed successfully'
2025-02-02 13:13:59,090 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-02 13:13:59,091 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-02 13:13:59,111 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-02 13:13:59,111 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-02 13:14:17,508 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-02 13:14:17,509 - karate_llm_test_gen - INFO - Generated test case: Here is the Karate DSL test script for the given API endpoint:

```karate
Feature: Test Broken Authe...
2025-02-02 13:14:17,511 - __main__ - INFO - Generated Karate test for /apexrest/PB2P POST at output/karate_feature_files/ID_002_krtestoas_apexrest_PB2P_POST.feature
2025-02-02 13:14:17,511 - karate_compatibility_verifier - INFO - Original content:
2025-02-02 13:14:17,512 - karate_compatibility_verifier - INFO - Here is the Karate DSL test script for the given API endpoint:

```karate
Feature: Test Broken Authentication/Authorization on /apexrest/PB2P

Scenario: Attempt to access PB2P without authentication and authorization checks
Given url 'http://oas_salesforce_partner_API.api'
And path '/apexrest/PB2P'
When method post
Then status 401
And match response contains "Invalid username or password"

* def adminAccess = callonce read('classpath:helpers/adminAccess.feature'), 
* switch adminAccess.status
case 200:
    * assert adminAccess.response == 'PB2P accessed successfully.'
case 403:
    * fail 'Admin should have access'

Scenario: Attempt to access PB2P with regular user authentication and authorization checks
Given url 'http://oas_salesforce_partner_API.api'
And path '/apexrest/PB2P'
And header Authorization = 'Bearer <regular_user_token>'
When method post
Then status 403
And match response contains "You do not have permission to access this resource."

Scenario: Attempt to access PB2P with admin user authentication and authorization checks
Given url 'http://oas_salesforce_partner_API.api'
And path '/apexrest/PB2P'
And header Authorization = 'Bearer <admin_user_token>'
When method post
Then status 200
And match response contains "PB2P accessed successfully."
```

This test script covers three scenarios:

1. **No authentication and authorization checks**: This scenario tests the API endpoint without providing any credentials, which should result in a 401 Unauthorized error.
2. **Regular user authentication and authorization checks**: In this scenario, we provide regular user credentials (i.e., <regular_user_token>). The test expects an access denied response with status code 403.
3. **Admin user authentication and authorization checks**: Finally, the script provides admin-level credentials (<admin_user_token>) to ensure that the API endpoint allows authorized access for admins.

Note: Replace `<regular_user_token>` and `<admin_user_token>` placeholders with actual tokens or credentials specific to your Salesforce environment.
2025-02-02 13:14:30,892 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-02 13:14:30,892 - karate_compatibility_verifier - INFO - Feature: Test Broken Authentication/Authorization on /apexrest/PB2P

Scenario: Attempt to access PB2P without authentication and authorization checks
Given url 'http://oas_salesforce_partner_API.api'
And path '/apexrest/PB2P'
When method post
Then status 401
And match response contains "Invalid username or password"

* def adminAccess = callonce read('classpath:helpers/adminAccess.feature')
* switch adminAccess.status
case 200:
    Then assert adminAccess.response == 'PB2P accessed successfully.'
case 403:
    And fail 'Admin should have access'

Scenario: Attempt to access PB2P with regular user authentication and authorization checks
Given url 'http://oas_salesforce_partner_API.api'
And path '/apexrest/PB2P'
And header Authorization = 'Bearer <regular_user_token>'
When method post
Then status 403
And match response contains "You do not have permission to access this resource."

Scenario: Attempt to access PB2P with admin user authentication and authorization checks
Given url 'http://oas_salesforce_partner_API.api'
And path '/apexrest/PB2P'
And header Authorization = 'Bearer <admin_user_token>'
When method post
Then status 200
And match response contains "PB2P accessed successfully."
2025-02-02 13:14:41,289 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-02 13:14:41,289 - karate_compatibility_verifier - INFO - Here is the corrected Karate DSL script:

Feature: Test Broken Authentication/Authorization on /apexrest/PB2P

Scenario: Attempt to access PB2P without authentication and authorization checks
Given url 'http://oas_salesforce_partner_API.api'
And path '/apexrest/PB2P'
When method post
Then status 401
And match response contains "Invalid username or password"

* def adminAccess = callonce read('classpath:helpers/adminAccess.feature')
* switch adminAccess.status
case 200:
    Then assert adminAccess.response == 'PB2P accessed successfully.'
case 403:
    And fail 'Admin should have access'
Scenario: Attempt to access PB2P with regular user authentication and authorization checks
Given url 'http://oas_salesforce_partner_API.api'
And path '/apexrest/PB2P'
And header Authorization = 'Bearer <regular_user_token>'
When method post
Then status 403
And match response contains "You do not have permission to access this resource."

Scenario: Attempt to access PB2P with admin user authentication and authorization checks
Given url 'http://oas_salesforce_partner_API.api'
And path '/apexrest/PB2P'
And header Authorization = 'Bearer <admin_user_token>'
When method post
Then status 200
And match response contains "PB2P accessed successfully."
2025-02-02 13:14:41,290 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_002_krtestoas_apexrest_PB2P_POST_verified.feature
2025-02-02 13:14:41,290 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_002_krtestoas_apexrest_PB2P_POST.feature: Here is the corrected Karate DSL script:

Feature: Test Broken Authentication/Authorization on /apexrest/PB2P

Scenario: Attempt to access PB2P without authentication and authorization checks
Given url 'http://oas_salesforce_partner_API.api'
And path '/apexrest/PB2P'
When method post
Then status 401
And match response contains "Invalid username or password"

* def adminAccess = callonce read('classpath:helpers/adminAccess.feature')
* switch adminAccess.status
case 200:
    Then assert adminAccess.response == 'PB2P accessed successfully.'
case 403:
    And fail 'Admin should have access'
Scenario: Attempt to access PB2P with regular user authentication and authorization checks
Given url 'http://oas_salesforce_partner_API.api'
And path '/apexrest/PB2P'
And header Authorization = 'Bearer <regular_user_token>'
When method post
Then status 403
And match response contains "You do not have permission to access this resource."

Scenario: Attempt to access PB2P with admin user authentication and authorization checks
Given url 'http://oas_salesforce_partner_API.api'
And path '/apexrest/PB2P'
And header Authorization = 'Bearer <admin_user_token>'
When method post
Then status 200
And match response contains "PB2P accessed successfully."
2025-02-02 13:14:41,290 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-02 13:14:41,291 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-02 13:14:41,316 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-02 13:14:41,316 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-02 13:15:01,647 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-02 13:15:01,647 - karate_llm_test_gen - INFO - Generated test case: Here are the Karate DSL test scripts for each scenario:

**Scenario 1: Unauthorized access to `/api/...
2025-02-02 13:15:01,648 - __main__ - INFO - Generated Karate test for /apexrest/PB2P/{id} GET at output/karate_feature_files/ID_003_krtestoas_apexrest_PB2P_id_GET.feature
2025-02-02 13:15:01,649 - karate_compatibility_verifier - INFO - Original content:
2025-02-02 13:15:01,649 - karate_compatibility_verifier - INFO - Here are the Karate DSL test scripts for each scenario:

**Scenario 1: Unauthorized access to `/api/private` endpoint using an API key**

```karate
Feature: Unauthorized Endpoint Access via API Key

Scenario: Evaluate the security of the /api/private endpoint against unauthorized API key usage

* url = 'http://oas_salesforce_partner_API.api'
* path = '/apexrest/PB2P/{id}'
* header Api-Key = 'invalid_api_key'
* method get
Then status 401
And match response contains 'Invalid API key.'

Given header Api-Key = 'valid_api_key_but_not_authorized_for_endpoint'
When method get
Then status 403
And match response contains 'API key not authorized for this endpoint.'
```

**Scenario 2: Improper authorization checks on user documents access**

```karate
Feature: Test for Improper Authorization on User Documents Access

Scenario: Attempt to access a document without being an admin or editor

* url = 'http://oas_salesforce_partner_API.api'
* path = '/apexrest/PB2P/{id}'
* header Authorization = 'Bearer <regular_user_token>'
When method get
Then status 403
And match response contains 'You do not have permission to access this document.'

* def adminAccess = callonce read('classpath:helpers/adminAccess.feature')
* switch adminAccess.status
case 200:
    * assert adminAccess.response == 'Document details'
case 403:
    * fail 'Admin should have access'
```

**Scenario 3: OAuth token generation flaw**

```karate
Feature: Test API for OAuth Token Generation Flaw

Scenario: Attempt to exploit OAuth token generation with a stolen authorization code

* url = 'http://oas_salesforce_partner_API.api'
* path = '/apexrest/PB2P/{id}'
* request {
    grant_type: 'authorization_code',
    code: 'stolen_code',
    redirect_uri: 'http://evil.example.com',
    client_id: 'client_id',
    client_secret: 'client_secret'
}
When method post
Then status 400
And match response contains 'Invalid grant: authorization code is invalid'
```

Note that these scenarios are designed to test potential Broken Authentication/Authorization vulnerabilities in the API endpoints. The actual implementation may vary depending on the specific requirements and constraints of your system.
2025-02-02 13:15:20,045 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-02 13:15:20,045 - karate_compatibility_verifier - INFO - Here are the corrected Karate DSL test scripts:

**Scenario 1: Unauthorized access to `/api/private` endpoint using an API key**
```
Feature:
Scenario: Evaluate the security of the /api/private endpoint against unauthorized API key usage
* url 'http://oas_salesforce_partner_API.api'
* path '/apexrest/PB2P/{id}'
* header Api-Key = 'invalid_api_key'
* method get
Then status 401
And match response contains 'Invalid API key.'
Given header Api-Key = 'valid_api_key_but_not_authorized_for_endpoint'
When method get
Then status 403
And match response contains 'API key not authorized for this endpoint.'
```

**Scenario 2: Improper authorization checks on user documents access**
```
Feature:
Scenario: Attempt to access a document without being an admin or editor
* url 'http://oas_salesforce_partner_API.api'
* path '/apexrest/PB2P/{id}'
* header Authorization = 'Bearer <regular_user_token>'
When method get
Then status 403
And match response contains 'You do not have permission to access this document.'

Given def adminAccess = callonce read('classpath:helpers/adminAccess.feature')
* switch adminAccess.status
case 200:
    Then assert adminAccess.response == 'Document details'
case 403:
    And fail 'Admin should have access'
```

**Scenario 3: OAuth token generation flaw**
```
Feature:
Scenario: Attempt to exploit OAuth token generation with a stolen authorization code
* url 'http://oas_salesforce_partner_API.api'
* path '/apexrest/PB2P/{id}'
* request { grant_type: 'authorization_code', code: 'stolen_code', redirect_uri: 'http://evil.example.com', client_id: 'client_id', client_secret: 'client_secret' }
When method post
Then status 400
And match response contains 'Invalid grant: authorization code is invalid'
```
2025-02-02 13:15:35,360 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-02 13:15:35,360 - karate_compatibility_verifier - INFO - Here are the corrected Karate DSL test scripts:

**Scenario 1: Unauthorized access to `/api/private` endpoint using an API key**
```Feature:
Scenario: Evaluate the security of the /api/private endpoint against unauthorized API key usage
* url 'http://oas_salesforce_partner_API.api'
* path '/apexrest/PB2P/{id}'
* header Api-Key = 'invalid_api_key'
When method get
Then status 401
And match response contains 'Invalid API key.'
Given header Api-Key = 'valid_api_key_but_not_authorized_for_endpoint'
When method get
Then status 403
And match response contains 'API key not authorized for this endpoint.'
```

**Scenario 2: Improper authorization checks on user documents access**
```Feature:
Scenario: Attempt to access a document without being an admin or editor
* url 'http://oas_salesforce_partner_API.api'
* path '/apexrest/PB2P/{id}'
* header Authorization = 'Bearer <regular_user_token>'
When method get
Then status 403
And match response contains 'You do not have permission to access this document.'
Given def adminAccess = callonce read('classpath:helpers/adminAccess.feature')
* switch adminAccess.status
case 200:
    Then assert adminAccess.response == 'Document details'
case 403:
    And fail 'Admin should have access'
```

**Scenario 3: OAuth token generation flaw**
```Feature:
Scenario: Attempt to exploit OAuth token generation with a stolen authorization code
* url 'http://oas_salesforce_partner_API.api'
* path '/apexrest/PB2P/{id}'
* request { grant_type: 'authorization_code', code: 'stolen_code', redirect_uri: 'http://evil.example.com', client_id: 'client_id', client_secret: 'client_secret' }
When method post
Then status 400
And match response contains 'Invalid grant: authorization code is invalid'
```
2025-02-02 13:15:35,360 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_003_krtestoas_apexrest_PB2P_id_GET_verified.feature
2025-02-02 13:15:35,361 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_003_krtestoas_apexrest_PB2P_id_GET.feature: Here are the corrected Karate DSL test scripts:

**Scenario 1: Unauthorized access to `/api/private` endpoint using an API key**
```Feature:
Scenario: Evaluate the security of the /api/private endpoint against unauthorized API key usage
* url 'http://oas_salesforce_partner_API.api'
* path '/apexrest/PB2P/{id}'
* header Api-Key = 'invalid_api_key'
When method get
Then status 401
And match response contains 'Invalid API key.'
Given header Api-Key = 'valid_api_key_but_not_authorized_for_endpoint'
When method get
Then status 403
And match response contains 'API key not authorized for this endpoint.'
```

**Scenario 2: Improper authorization checks on user documents access**
```Feature:
Scenario: Attempt to access a document without being an admin or editor
* url 'http://oas_salesforce_partner_API.api'
* path '/apexrest/PB2P/{id}'
* header Authorization = 'Bearer <regular_user_token>'
When method get
Then status 403
And match response contains 'You do not have permission to access this document.'
Given def adminAccess = callonce read('classpath:helpers/adminAccess.feature')
* switch adminAccess.status
case 200:
    Then assert adminAccess.response == 'Document details'
case 403:
    And fail 'Admin should have access'
```

**Scenario 3: OAuth token generation flaw**
```Feature:
Scenario: Attempt to exploit OAuth token generation with a stolen authorization code
* url 'http://oas_salesforce_partner_API.api'
* path '/apexrest/PB2P/{id}'
* request { grant_type: 'authorization_code', code: 'stolen_code', redirect_uri: 'http://evil.example.com', client_id: 'client_id', client_secret: 'client_secret' }
When method post
Then status 400
And match response contains 'Invalid grant: authorization code is invalid'
```
2025-02-02 13:15:35,361 - __main__ - INFO - Moving generated Karate feature files...
2025-02-02 13:15:35,363 - __main__ - INFO - Creating the Karate Test Framework with generated feature files
2025-02-02 13:15:37,678 - __main__ - INFO - Skipping karate test run.
