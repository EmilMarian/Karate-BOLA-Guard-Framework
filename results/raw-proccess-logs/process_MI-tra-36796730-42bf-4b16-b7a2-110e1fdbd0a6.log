2025-02-02 14:36:54,512 - __main__ - INFO - Skipping fragment creation: False
2025-02-02 14:36:54,574 - __main__ - DEBUG - Starting fragment retrieval process.
2025-02-02 14:36:54,812 - __main__ - DEBUG - Retrieved fragments: [{'content': '{"method": "GET", "parameters": [{"in": "query", "name": "postcode", "required": true, "schema": {"type": "string"}}, {"in": "query", "name": "postcodeInput.postcode", "schema": {"pattern": "^(([gG][iI][rR] {0,}0[aA]{2})|((([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y]?[0-9][0-9]?)|(([a-pr-uwyzA-PR-UWYZ][0-9][a-hjkstuwA-HJKSTUW])|([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y][0-9][abehmnprv-yABEHMNPRV-Y]))) {0,}[0-9][abd-hjlnp-uw-zABD-HJLNP-UW-Z]{2}))$", "type": "string"}}, {"in": "path", "name": "Postcode", "required": true, "schema": {"type": "string"}}], "path": "/Place/Address/Streets/{Postcode}", "requestBody": {}, "responses": {"200": {"content": {"application/json": {"schema": {"type": "object"}}, "application/xml": {"schema": {"type": "object"}}, "text/json": {"schema": {"type": "object"}}, "text/xml": {"schema": {"type": "object"}}}, "description": "OK"}}}', 'metadata': {'filename': '0038_Place_Address_Streets_Postcode_get_200.json'}}, {'content': '{"method": "GET", "parameters": [{"description": "The Vehicle Registration Mark", "in": "query", "name": "vrm", "required": true, "schema": {"type": "string"}}], "path": "/Vehicle/UlezCompliance", "requestBody": {}, "responses": {"200": {"content": {"application/json": {"schema": {"description": "", "properties": {"colour": {"type": "string"}, "compliance": {"enum": ["NotAvailable", "NotCompliant", "Compliant", "Exempt"], "type": "string"}, "make": {"type": "string"}, "model": {"type": "string"}, "type": {"type": "string"}, "vrm": {"type": "string"}}, "type": "object"}}, "application/xml": {"schema": {"description": "", "properties": {"colour": {"type": "string"}, "compliance": {"enum": ["NotAvailable", "NotCompliant", "Compliant", "Exempt"], "type": "string"}, "make": {"type": "string"}, "model": {"type": "string"}, "type": {"type": "string"}, "vrm": {"type": "string"}}, "type": "object"}}, "text/json": {"schema": {"description": "", "properties": {"colour": {"type": "string"}, "compliance": {"enum": ["NotAvailable", "NotCompliant", "Compliant", "Exempt"], "type": "string"}, "make": {"type": "string"}, "model": {"type": "string"}, "type": {"type": "string"}, "vrm": {"type": "string"}}, "type": "object"}}, "text/xml": {"schema": {"description": "", "properties": {"colour": {"type": "string"}, "compliance": {"enum": ["NotAvailable", "NotCompliant", "Compliant", "Exempt"], "type": "string"}, "make": {"type": "string"}, "model": {"type": "string"}, "type": {"type": "string"}, "vrm": {"type": "string"}}, "type": "object"}}}, "description": "OK"}}}', 'metadata': {'filename': '0085_Vehicle_UlezCompliance_get_200.json'}}, {'content': '{"method": "GET", "parameters": [{"description": "A mode name e.g. tube, dlr", "in": "path", "name": "mode", "required": true, "schema": {"type": "string"}}, {"description": "A number of arrivals to return for each stop, -1 to return all available.", "in": "query", "name": "count", "schema": {"format": "int32", "type": "integer"}}], "path": "/Mode/{mode}/Arrivals", "requestBody": {}, "responses": {"200": {"content": {"application/json": {"schema": {"items": {"description": "DTO to capture the prediction details", "properties": {"bearing": {"description": "Bearing (between 0 to 359)", "type": "string"}, "currentLocation": {"description": "The current location of the vehicle.", "type": "string"}, "destinationName": {"description": "Name of the destination", "type": "string"}, "destinationNaptanId": {"description": "Naptan Identifier for the prediction\'s destination", "type": "string"}, "direction": {"description": "Direction (unified to inbound/outbound)", "type": "string"}, "expectedArrival": {"description": "The expected arrival time of the vehicle at the stop/station", "format": "date-time", "type": "string"}, "id": {"description": "The identitier for the prediction", "type": "string"}, "lineId": {"description": "Unique identifier for the Line", "type": "string"}, "lineName": {"description": "Line Name", "type": "string"}, "modeName": {"description": "The mode name of the station/line the prediction relates to", "type": "string"}, "naptanId": {"description": "Identifier for the prediction", "type": "string"}, "operationType": {"description": "The type of the operation (1: is new or has been updated, 2: should be deleted from any client cache)", "format": "int32", "type": "integer"}, "platformName": {"description": "Platform name (for bus, this is the stop letter)", "type": "string"}, "stationName": {"description": "Station name", "type": "string"}, "timeToLive": {"description": "The expiry time for the prediction", "format": "date-time", "type": "string"}, "timeToStation": {"description": "Prediction of the Time to station in seconds", "format": "int32", "type": "integer"}, "timestamp": {"description": "Timestamp for when the prediction was inserted/modified (source column drives what objects are broadcast on each iteration)", "format": "date-time", "type": "string"}, "timing": {"$ref": "#/components/schemas/Tfl.Api.Presentation.Entities.PredictionTiming"}, "towards": {"description": "Routing information or other descriptive text about the path of the vehicle towards the destination", "type": "string"}, "vehicleId": {"description": "The actual vehicle in transit (for train modes, the leading car of the rolling set)", "type": "string"}}, "type": "object"}, "type": "array"}}, "application/xml": {"schema": {"items": {"description": "DTO to capture the prediction details", "properties": {"bearing": {"description": "Bearing (between 0 to 359)", "type": "string"}, "currentLocation": {"description": "The current location of the vehicle.", "type": "string"}, "destinationName": {"description": "Name of the destination", "type": "string"}, "destinationNaptanId": {"description": "Naptan Identifier for the prediction\'s destination", "type": "string"}, "direction": {"description": "Direction (unified to inbound/outbound)", "type": "string"}, "expectedArrival": {"description": "The expected arrival time of the vehicle at the stop/station", "format": "date-time", "type": "string"}, "id": {"description": "The identitier for the prediction", "type": "string"}, "lineId": {"description": "Unique identifier for the Line", "type": "string"}, "lineName": {"description": "Line Name", "type": "string"}, "modeName": {"description": "The mode name of the station/line the prediction relates to", "type": "string"}, "naptanId": {"description": "Identifier for the prediction", "type": "string"}, "operationType": {"description": "The type of the operation (1: is new or has been updated, 2: should be deleted from any client cache)", "format": "int32", "type": "integer"}, "platformName": {"description": "Platform name (for bus, this is the stop letter)", "type": "string"}, "stationName": {"description": "Station name", "type": "string"}, "timeToLive": {"description": "The expiry time for the prediction", "format": "date-time", "type": "string"}, "timeToStation": {"description": "Prediction of the Time to station in seconds", "format": "int32", "type": "integer"}, "timestamp": {"description": "Timestamp for when the prediction was inserted/modified (source column drives what objects are broadcast on each iteration)", "format": "date-time", "type": "string"}, "timing": {"$ref": "#/components/schemas/Tfl.Api.Presentation.Entities.PredictionTiming"}, "towards": {"description": "Routing information or other descriptive text about the path of the vehicle towards the destination", "type": "string"}, "vehicleId": {"description": "The actual vehicle in transit (for train modes, the leading car of the rolling set)", "type": "string"}}, "type": "object"}, "type": "array"}}, "text/json": {"schema": {"items": {"description": "DTO to capture the prediction details", "properties": {"bearing": {"description": "Bearing (between 0 to 359)", "type": "string"}, "currentLocation": {"description": "The current location of the vehicle.", "type": "string"}, "destinationName": {"description": "Name of the destination", "type": "string"}, "destinationNaptanId": {"description": "Naptan Identifier for the prediction\'s destination", "type": "string"}, "direction": {"description": "Direction (unified to inbound/outbound)", "type": "string"}, "expectedArrival": {"description": "The expected arrival time of the vehicle at the stop/station", "format": "date-time", "type": "string"}, "id": {"description": "The identitier for the prediction", "type": "string"}, "lineId": {"description": "Unique identifier for the Line", "type": "string"}, "lineName": {"description": "Line Name", "type": "string"}, "modeName": {"description": "The mode name of the station/line the prediction relates to", "type": "string"}, "naptanId": {"description": "Identifier for the prediction", "type": "string"}, "operationType": {"description": "The type of the operation (1: is new or has been updated, 2: should be deleted from any client cache)", "format": "int32", "type": "integer"}, "platformName": {"description": "Platform name (for bus, this is the stop letter)", "type": "string"}, "stationName": {"description": "Station name", "type": "string"}, "timeToLive": {"description": "The expiry time for the prediction", "format": "date-time", "type": "string"}, "timeToStation": {"description": "Prediction of the Time to station in seconds", "format": "int32", "type": "integer"}, "timestamp": {"description": "Timestamp for when the prediction was inserted/modified (source column drives what objects are broadcast on each iteration)", "format": "date-time", "type": "string"}, "timing": {"$ref": "#/components/schemas/Tfl.Api.Presentation.Entities.PredictionTiming"}, "towards": {"description": "Routing information or other descriptive text about the path of the vehicle towards the destination", "type": "string"}, "vehicleId": {"description": "The actual vehicle in transit (for train modes, the leading car of the rolling set)", "type": "string"}}, "type": "object"}, "type": "array"}}, "text/xml": {"schema": {"items": {"description": "DTO to capture the prediction details", "properties": {"bearing": {"description": "Bearing (between 0 to 359)", "type": "string"}, "currentLocation": {"description": "The current location of the vehicle.", "type": "string"}, "destinationName": {"description": "Name of the destination", "type": "string"}, "destinationNaptanId": {"description": "Naptan Identifier for the prediction\'s destination", "type": "string"}, "direction": {"description": "Direction (unified to inbound/outbound)", "type": "string"}, "expectedArrival": {"description": "The expected arrival time of the vehicle at the stop/station", "format": "date-time", "type": "string"}, "id": {"description": "The identitier for the prediction", "type": "string"}, "lineId": {"description": "Unique identifier for the Line", "type": "string"}, "lineName": {"description": "Line Name", "type": "string"}, "modeName": {"description": "The mode name of the station/line the prediction relates to", "type": "string"}, "naptanId": {"description": "Identifier for the prediction", "type": "string"}, "operationType": {"description": "The type of the operation (1: is new or has been updated, 2: should be deleted from any client cache)", "format": "int32", "type": "integer"}, "platformName": {"description": "Platform name (for bus, this is the stop letter)", "type": "string"}, "stationName": {"description": "Station name", "type": "string"}, "timeToLive": {"description": "The expiry time for the prediction", "format": "date-time", "type": "string"}, "timeToStation": {"description": "Prediction of the Time to station in seconds", "format": "int32", "type": "integer"}, "timestamp": {"description": "Timestamp for when the prediction was inserted/modified (source column drives what objects are broadcast on each iteration)", "format": "date-time", "type": "string"}, "timing": {"$ref": "#/components/schemas/Tfl.Api.Presentation.Entities.PredictionTiming"}, "towards": {"description": "Routing information or other descriptive text about the path of the vehicle towards the destination", "type": "string"}, "vehicleId": {"description": "The actual vehicle in transit (for train modes, the leading car of the rolling set)", "type": "string"}}, "type": "object"}, "type": "array"}}}, "description": "OK"}}}', 'metadata': {'filename': '0031_Mode_mode_Arrivals_get_200.json'}}], form collection oas_transport_for_london_fragments
2025-02-02 14:36:54,813 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-02 14:36:54,814 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-02 14:36:55,227 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-02 14:36:55,227 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-02 14:37:04,896 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-02 14:37:04,896 - karate_llm_test_gen - INFO - Generated test case:  Here is a sample Karate DSL test script to check for potential Broken Authentication/Authorization ...
2025-02-02 14:37:04,897 - __main__ - INFO - Generated Karate test for /Place/Address/Streets/{Postcode} GET at output/karate_feature_files/ID_001_krtestoas_Place_Address_Streets_Postcode_GET.feature
2025-02-02 14:37:04,898 - karate_compatibility_verifier - INFO - Original content:
2025-02-02 14:37:04,898 - karate_compatibility_verifier - INFO - Here is a sample Karate DSL test script to check for potential Broken Authentication/Authorization vulnerabilities:
```kotlin
Feature: Test API Endpoint Security - Broken Authentication/Authorization Vulnerabilities
  Scenario: Verify that the endpoint requires authentication and authorization
    Given url "http://oas_transport_for_london.api/Place/Address/Streets/{Postcode}"
    And request { "Authorization": "Bearer <access_token>" }
    When method get
    Then status 200
    And match response contains "Access granted"
```
This test script assumes that the endpoint requires authentication and authorization using a bearer token. The `<access_token>` placeholder should be replaced with an actual access token obtained through valid authentication credentials. If the endpoint does not require authentication or authorization, you can remove the `Authorization` header from the request in step 2 and modify the expected response accordingly.
2025-02-02 14:37:10,495 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-02 14:37:10,496 - karate_compatibility_verifier - INFO -  Feature: Test API Endpoint Security - Broken Authentication/Authorization Vulnerabilities
  Scenario: Verify that the endpoint requires authentication and authorization
    Given url "http://oas_transport_for_london.api/Place/Address/Streets/{Postcode}"
    And request { "Authorization": "Bearer <access_token>" }
    When method get
    Then status 200
    And match response contains "Access granted"
2025-02-02 14:37:14,149 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-02 14:37:14,149 - karate_compatibility_verifier - INFO -  Feature: Test API Endpoint Security - Broken Authentication/Authorization Vulnerabilities
Scenario: Verify that the endpoint requires authentication and authorization
Given url "http://oas\_transport\_for\_london.api/Place/Address/Streets/{Postcode}"
And request { "Authorization": "Bearer <access\_token>" }
When method get
Then status 200
And match response contains "Access granted"
2025-02-02 14:37:14,150 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_001_krtestoas_Place_Address_Streets_Postcode_GET_verified.feature
2025-02-02 14:37:14,150 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_001_krtestoas_Place_Address_Streets_Postcode_GET.feature:  Feature: Test API Endpoint Security - Broken Authentication/Authorization Vulnerabilities
Scenario: Verify that the endpoint requires authentication and authorization
Given url "http://oas\_transport\_for\_london.api/Place/Address/Streets/{Postcode}"
And request { "Authorization": "Bearer <access\_token>" }
When method get
Then status 200
And match response contains "Access granted"
2025-02-02 14:37:14,151 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-02 14:37:14,151 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-02 14:37:14,177 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-02 14:37:14,178 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-02 14:37:29,647 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-02 14:37:29,648 - karate_llm_test_gen - INFO - Generated test case:  Here is a Karate DSL test script to check for potential Broken Authentication/Authorization vulnera...
2025-02-02 14:37:29,650 - __main__ - INFO - Generated Karate test for /Vehicle/UlezCompliance GET at output/karate_feature_files/ID_002_krtestoas_Vehicle_UlezCompliance_GET.feature
2025-02-02 14:37:29,651 - karate_compatibility_verifier - INFO - Original content:
2025-02-02 14:37:29,651 - karate_compatibility_verifier - INFO - Here is a Karate DSL test script to check for potential Broken Authentication/Authorization vulnerabilities on the API endpoint `/Vehicle/UlezCompliance` using GET method:
```kotlin
Feature: Test for Broken Authentication/Authorization Vulnerabilities on /Vehicle/UlezCompliance Endpoint
  Scenario: Attempt to access Ulez Compliance without proper authentication
    Given url http://oas_transport_for_london.api/Vehicle/UlezCompliance
    When method get
    Then status code is 401
    And match response contains "Unauthorized"

  Scenario: Attempt to access Ulez Compliance with invalid credentials
    Given url http://oas_transport_for_london.api/Vehicle/UlezCompliance
    When method get
    Then status code is 401
    And match response contains "Unauthorized"
```
This test script checks for two scenarios:

1. Scenario 1: Attempt to access Ulez Compliance without proper authentication - This scenario sends a GET request to the `/Vehicle/UlezCompliance` endpoint with an invalid or missing token, and verifies that the response status code is 401 (Unauthorized).
2. Scenario 2: Attempt to access Ulez Compliance with invalid credentials - This scenario sends a GET request to the `/Vehicle/UlezCompliance` endpoint with an invalid username or password, and verifies that the response status code is 401 (Unauthorized).

Note: The URL for this test script assumes that you have access to the actual API endpoint. If the endpoint is hosted on a different domain, you will need to modify the URL accordingly.
2025-02-02 14:37:38,264 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-02 14:37:38,264 - karate_compatibility_verifier - INFO -  Here is the corrected Karate DSL test script:
```kotlin
Feature: Test for Broken Authentication/Authorization Vulnerabilities on /Vehicle/UlezCompliance Endpoint
  Scenario: Attempt to access Ulez Compliance without proper authentication
    Given url http://oas_transport_for_london.api/Vehicle/UlezCompliance
    When method get
    Then status code is 401
    And match response contains "Unauthorized"

  Scenario: Attempt to access Ulez Compliance with invalid credentials
    Given url http://oas_transport_for_london.api/Vehicle/UlezCompliance
    When method get
    Then status code is 401
    And match response contains "Unauthorized"
```
2025-02-02 14:37:44,462 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-02 14:37:44,462 - karate_compatibility_verifier - INFO -  Here is the corrected Karate DSL test script:
```kotlin
Feature: Test for Broken Authentication/Authorization Vulnerabilities on /Vehicle/UlezCompliance Endpoint
  Scenario: Attempt to access Ulez Compliance without proper authentication
    Given url http://oas_transport_for_london.api/Vehicle/UlezCompliance
    When method get
    Then status code is 401
    And match response contains "Unauthorized"

  Scenario: Attempt to access Ulez Compliance with invalid credentials
    Given url http://oas_transport_for_london.api/Vehicle/UlezCompliance
    When method get
    Then status code is 401
    And match response contains "Unauthorized"
```
2025-02-02 14:37:44,463 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_002_krtestoas_Vehicle_UlezCompliance_GET_verified.feature
2025-02-02 14:37:44,463 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_002_krtestoas_Vehicle_UlezCompliance_GET.feature:  Here is the corrected Karate DSL test script:
```kotlin
Feature: Test for Broken Authentication/Authorization Vulnerabilities on /Vehicle/UlezCompliance Endpoint
  Scenario: Attempt to access Ulez Compliance without proper authentication
    Given url http://oas_transport_for_london.api/Vehicle/UlezCompliance
    When method get
    Then status code is 401
    And match response contains "Unauthorized"

  Scenario: Attempt to access Ulez Compliance with invalid credentials
    Given url http://oas_transport_for_london.api/Vehicle/UlezCompliance
    When method get
    Then status code is 401
    And match response contains "Unauthorized"
```
2025-02-02 14:37:44,463 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-02 14:37:44,464 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-02 14:37:44,482 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-02 14:37:44,484 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-02 14:37:57,645 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-02 14:37:57,646 - karate_llm_test_gen - INFO - Generated test case:  Here's a Karate DSL test script to check for potential Broken Authentication/Authorization vulnerab...
2025-02-02 14:37:57,646 - __main__ - INFO - Generated Karate test for /Mode/{mode}/Arrivals GET at output/karate_feature_files/ID_003_krtestoas_Mode_mode_Arrivals_GET.feature
2025-02-02 14:37:57,647 - karate_compatibility_verifier - INFO - Original content:
2025-02-02 14:37:57,647 - karate_compatibility_verifier - INFO - Here's a Karate DSL test script to check for potential Broken Authentication/Authorization vulnerabilities:
```scss
Feature: Test for Broken Authentication/Authorization on /Mode/{mode}/Arrivals endpoint
  Scenario: Attempt to access the endpoint without proper authentication
    Given url http://oas_transport_for_london.api/Mode/{mode}/Arrivals
    When method get
    Then status 401
    And match response contains "Unauthorized"
  
  Scenario: Attempt to access the endpoint with invalid credentials
    Given url http://oas_transport_for_london.api/Mode/{mode}/Arrivals
    And header Authorization = 'Basic <invalid-credentials>'
    When method get
    Then status 401
    And match response contains "Unauthorized"
  
  Scenario: Attempt to access the endpoint with a stolen token
    Given url http://oas_transport_for_london.api/Mode/{mode}/Arrivals
    And header Authorization = 'Bearer <stolen-token>'
    When method get
    Then status 200
    And match response contains "Success"
```
Note: This script assumes that the endpoint requires authentication using a Bearer token. If it uses a different authentication mechanism, you'll need to modify the script accordingly.
2025-02-02 14:38:07,695 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-02 14:38:07,695 - karate_compatibility_verifier - INFO -  Feature: Test for Broken Authentication/Authorization on /Mode/{mode}/Arrivals endpoint
  Scenario: Attempt to access the endpoint without proper authentication
    Given url http://oas_transport_for_london.api/Mode/{mode}/Arrivals
    When method get
    Then status 401
    And match response contains "Unauthorized"
  
  Scenario: Attempt to access the endpoint with invalid credentials
    Given url http://oas_transport_for_london.api/Mode/{mode}/Arrivals
    And header Authorization = 'Basic <invalid-credentials>'
    When method get
    Then status 401
    And match response contains "Unauthorized"
  
  Scenario: Attempt to access the endpoint with a stolen token
    Given url http://oas_transport_for_london.api/Mode/{mode}/Arrivals
    And header Authorization = 'Bearer <stolen-token>'
    When method get
    Then status 200
    And match response contains "Success"
2025-02-02 14:38:11,291 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-02 14:38:11,291 - karate_compatibility_verifier - INFO -  Feature: Test for Broken Authentication/Authorization on /Mode/{mode}/Arrivals endpoint
Scenario: Attempt to access the endpoint without proper authentication
Given url http://oas_transport_for_london.api/Mode/{mode}/Arrivals
And path '/users'
When method GET
Then status 401
And match response contains "Unauthorized"
2025-02-02 14:38:11,292 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_003_krtestoas_Mode_mode_Arrivals_GET_verified.feature
2025-02-02 14:38:11,292 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_003_krtestoas_Mode_mode_Arrivals_GET.feature:  Feature: Test for Broken Authentication/Authorization on /Mode/{mode}/Arrivals endpoint
Scenario: Attempt to access the endpoint without proper authentication
Given url http://oas_transport_for_london.api/Mode/{mode}/Arrivals
And path '/users'
When method GET
Then status 401
And match response contains "Unauthorized"
2025-02-02 14:38:11,292 - __main__ - INFO - Moving generated Karate feature files...
2025-02-02 14:38:11,294 - __main__ - INFO - Creating the Karate Test Framework with generated feature files
2025-02-02 14:38:13,706 - __main__ - INFO - Skipping karate test run.
