2025-02-02 13:40:54,792 - __main__ - INFO - Skipping fragment creation: False
2025-02-02 13:40:54,885 - __main__ - DEBUG - Starting fragment retrieval process.
2025-02-02 13:40:55,127 - __main__ - DEBUG - Retrieved fragments: [{'content': '{"method": "GET", "parameters": [{"description": "Name of organisation.", "in": "path", "name": "org", "required": true, "schema": {"type": "string"}}, {"description": "Issues assigned to you / created by you / mentioning you / you\'re\\nsubscribed to updates for / All issues the authenticated user can see\\n", "in": "query", "name": "filter", "required": true, "schema": {"default": "all", "enum": ["assigned", "created", "mentioned", "subscribed", "all"], "type": "string"}}, {"in": "query", "name": "state", "required": true, "schema": {"default": "open", "enum": ["open", "closed"], "type": "string"}}, {"description": "String list of comma separated Label names. Example - bug,ui,@high.", "in": "query", "name": "labels", "required": true, "schema": {"type": "string"}}, {"in": "query", "name": "sort", "required": true, "schema": {"default": "created", "enum": ["created", "updated", "comments"], "type": "string"}}, {"in": "query", "name": "direction", "required": true, "schema": {"default": "desc", "enum": ["asc", "desc"], "type": "string"}}, {"description": "Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\\nOnly issues updated at or after this time are returned.\\n", "in": "query", "name": "since", "schema": {"type": "string"}}, {"description": "You can check the current version of media type in responses.\\n", "in": "header", "name": "X-GitHub-Media-Type", "schema": {"type": "string"}}, {"description": "Is used to set specified media type.", "in": "header", "name": "Accept", "schema": {"type": "string"}}, {"in": "header", "name": "X-RateLimit-Limit", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Remaining", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Reset", "schema": {"type": "integer"}}, {"in": "header", "name": "X-GitHub-Request-Id", "schema": {"type": "integer"}}], "path": "/orgs/{org}/issues", "requestBody": {}, "responses": {"403": {"content": {}, "description": "API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\\nfor details.\\n"}}}', 'metadata': {'filename': '0084_orgs_org_issues_get_403.json'}}, {'content': '{"method": "GET", "parameters": [{"description": "Name of organisation.", "in": "path", "name": "org", "required": true, "schema": {"type": "string"}}, {"description": "Issues assigned to you / created by you / mentioning you / you\'re\\nsubscribed to updates for / All issues the authenticated user can see\\n", "in": "query", "name": "filter", "required": true, "schema": {"default": "all", "enum": ["assigned", "created", "mentioned", "subscribed", "all"], "type": "string"}}, {"in": "query", "name": "state", "required": true, "schema": {"default": "open", "enum": ["open", "closed"], "type": "string"}}, {"description": "String list of comma separated Label names. Example - bug,ui,@high.", "in": "query", "name": "labels", "required": true, "schema": {"type": "string"}}, {"in": "query", "name": "sort", "required": true, "schema": {"default": "created", "enum": ["created", "updated", "comments"], "type": "string"}}, {"in": "query", "name": "direction", "required": true, "schema": {"default": "desc", "enum": ["asc", "desc"], "type": "string"}}, {"description": "Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\\nOnly issues updated at or after this time are returned.\\n", "in": "query", "name": "since", "schema": {"type": "string"}}, {"description": "You can check the current version of media type in responses.\\n", "in": "header", "name": "X-GitHub-Media-Type", "schema": {"type": "string"}}, {"description": "Is used to set specified media type.", "in": "header", "name": "Accept", "schema": {"type": "string"}}, {"in": "header", "name": "X-RateLimit-Limit", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Remaining", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Reset", "schema": {"type": "integer"}}, {"in": "header", "name": "X-GitHub-Request-Id", "schema": {"type": "integer"}}], "path": "/orgs/{org}/issues", "requestBody": {}, "responses": {"200": {"content": {"application/json": {"schema": {"items": {"properties": {"assignee": {"properties": {"avatar_url": {"type": "string"}, "gravatar_id": {"type": "string"}, "id": {"type": "integer"}, "login": {"type": "string"}, "url": {"type": "string"}}, "type": "object"}, "body": {"type": "string"}, "closed_at": {"description": "ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ", "type": "string"}, "comments": {"type": "integer"}, "created_at": {"description": "ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ", "type": "string"}, "html_url": {"type": "string"}, "labels": {"items": {"properties": {"color": {"type": "string"}, "name": {"type": "string"}, "url": {"type": "string"}}, "type": "object"}, "type": "array"}, "milestone": {"properties": {"closed_issues": {"type": "integer"}, "created_at": {"description": "ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ", "type": "string"}, "creator": {"properties": {"avatar_url": {"type": "string"}, "gravatar_id": {"type": "string"}, "id": {"type": "integer"}, "login": {"type": "string"}, "url": {"type": "string"}}, "type": "object"}, "description": {"type": "string"}, "due_on": {"description": "ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ", "type": "string"}, "number": {"type": "integer"}, "open_issues": {"type": "integer"}, "state": {"type": "object"}, "title": {"type": "string"}, "url": {"type": "string"}}, "type": "object"}, "number": {"type": "integer"}, "pull_request": {"properties": {"diff_url": {"type": "string"}, "html_url": {"type": "string"}, "patch_url": {"type": "string"}}, "type": "object"}, "state": {"type": "object"}, "title": {"type": "string"}, "updated_at": {"description": "ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ", "type": "string"}, "url": {"type": "string"}, "user": {"properties": {"avatar_url": {"type": "string"}, "gravatar_id": {"type": "string"}, "id": {"type": "integer"}, "login": {"type": "string"}, "url": {"type": "string"}}, "type": "object"}}, "type": "object"}, "type": "array"}}}, "description": "OK"}}}', 'metadata': {'filename': '0083_orgs_org_issues_get_200.json'}}, {'content': '{"method": "GET", "parameters": [{"description": "Name of repository owner.", "in": "path", "name": "owner", "required": true, "schema": {"type": "string"}}, {"description": "Name of repository.", "in": "path", "name": "repo", "required": true, "schema": {"type": "string"}}, {"description": "Issues assigned to you / created by you / mentioning you / you\'re\\nsubscribed to updates for / All issues the authenticated user can see\\n", "in": "query", "name": "filter", "required": true, "schema": {"default": "all", "enum": ["assigned", "created", "mentioned", "subscribed", "all"], "type": "string"}}, {"in": "query", "name": "state", "required": true, "schema": {"default": "open", "enum": ["open", "closed"], "type": "string"}}, {"description": "String list of comma separated Label names. Example - bug,ui,@high.", "in": "query", "name": "labels", "required": true, "schema": {"type": "string"}}, {"in": "query", "name": "sort", "required": true, "schema": {"default": "created", "enum": ["created", "updated", "comments"], "type": "string"}}, {"in": "query", "name": "direction", "required": true, "schema": {"default": "desc", "enum": ["asc", "desc"], "type": "string"}}, {"description": "Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\\nOnly issues updated at or after this time are returned.\\n", "in": "query", "name": "since", "schema": {"type": "string"}}, {"description": "You can check the current version of media type in responses.\\n", "in": "header", "name": "X-GitHub-Media-Type", "schema": {"type": "string"}}, {"description": "Is used to set specified media type.", "in": "header", "name": "Accept", "schema": {"type": "string"}}, {"in": "header", "name": "X-RateLimit-Limit", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Remaining", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Reset", "schema": {"type": "integer"}}, {"in": "header", "name": "X-GitHub-Request-Id", "schema": {"type": "integer"}}], "path": "/repos/{owner}/{repo}/issues", "requestBody": {}, "responses": {"403": {"content": {}, "description": "API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\\nfor details.\\n"}}}', 'metadata': {'filename': '0224_repos_owner_repo_issues_get_403.json'}}], form collection oas_github_fragments
2025-02-02 13:40:55,127 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-02 13:40:55,128 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-02 13:40:55,533 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-02 13:40:55,533 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-02 13:41:13,759 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-02 13:41:13,760 - karate_llm_test_gen - INFO - Generated test case:  Given the API endpoint information, here is a Karate DSL test script to check for potential Broken ...
2025-02-02 13:41:13,761 - __main__ - INFO - Generated Karate test for /orgs/{org}/issues GET at output/karate_feature_files/ID_001_krtestoas_orgs_org_issues_GET.feature
2025-02-02 13:41:13,761 - karate_compatibility_verifier - INFO - Original content:
2025-02-02 13:41:13,761 - karate_compatibility_verifier - INFO - Given the API endpoint information, here is a Karate DSL test script to check for potential Broken Authentication/Authorization vulnerabilities:

```java
Feature: Testing broken authentication and authorization on /orgs/{org}/issues access
  When user tries to fetch issues without proper credentials or permissions
  
Scenario: Attempt unautmized GET request with invalid token
    Given url 'http://oas_github.api/orgs/' + orgPath('validOrgId') // Replace validOrgId with a real organization ID for testing purposes
    
    * def user = read('classpath:users.json').find(function(_) { return _.id == invalidUserID })  // Invalid user to simulate unauthorized access, replace 'invalidUserID' accordingly
        
    And headers Authorization contains "Bearer <invalid_token>'
    
    When method get '/orgs/' + orgPath('validOrgId') + '/issues'
    
    Then status 401 or 403 // Expecting unauthorized access due to invalid token and user permissions
```

Scenario: Attempt GET request with expired session (broken authentication)
  
```java
Feature: Testing broken authentication on /orgs/{org}/issues access via an expired session
  When the client has a valid organization ID but uses an expired token for authorization
    
    Given url 'http://oas_github.api/orgs/' + orgPath('validOrgId') // Replace with actual organization id to test properly
        
    * def user = read('classpath:users.json').find(function(_) { return _.id == validUserID })  // Valid user for testing purposes, replace 'validUserID' accordingly
    
    And headers Authorization contains "Bearer <expired_token>'
        
    When method get '/orgs/' + orgPath('validOrgId') + '/issues'
    
    Then status should be 401 // Expecting unauthorized access due to expired session token
```

Scenario: Attempt GET request with insufficient permissions (broken authorization)
  
```java
Feature: Testing broken authorization on /orgs/{org}/issues access for a regular user without admin role
  When the client has valid organization ID but lacks sufficient permission to fetch issues
    
    Given url 'http://oas_github.api/orgs/' + orgPath('validOrgId') // Replace with actual organization id to test properly
        
    * def user = read('classpath:users.json').find(function(_) { return _.id == regularUserID })  // Regular user without admin role, replace 'regularUserID' accordingly
    
    And headers Authorization contains "Bearer <valid_token>'
        
    When method get '/orgs/' + orgPath('validOrgId') + '/issues'
    
    Then status should be 403 // Expecting unauthorized access due to insufficient permissions for fetching issues as a regular user without admin role
```
2025-02-02 13:41:20,235 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-02 13:41:20,236 - karate_compatibility_verifier - INFO -  Given url 'http://oas_github.api/orgs/' + orgPath('validOrgId')
    * def user = read('classpath:users.json').find(function(_) { return _.id == invalidUserID })  // Invalid user to simulate unauthorized access, replace 'invalidUserID' accordingly
    
    And headers Authorization contains "Bearer <invalid_token>'
    
    When method get '/orgs/' + orgPath('validOrgId') + '/issues'
    
    Then status 401 or 403 // Expecting unauthorized access due to invalid token and user permissions
2025-02-02 13:41:23,113 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-02 13:41:23,114 - karate_compatibility_verifier - INFO -  Given url 'http://oas_github.api/orgs/' + orgPath('validOrgId')
* def user = read('classpath:users.json').find(function(_) { return _.id == invalidUserID }) // Replace 'invalidUserID' with the actual ID to simulate unauthorized access

And headers Authorization contains "Bearer <token>"  // Use a valid token for authorization, replace '<token>' accordingly if needed

When method get '/orgs/' + orgPath('validOrgId') + '/issues'
Then status either 401 or 403
2025-02-02 13:41:23,114 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_001_krtestoas_orgs_org_issues_GET_verified.feature
2025-02-02 13:41:23,114 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_001_krtestoas_orgs_org_issues_GET.feature:  Given url 'http://oas_github.api/orgs/' + orgPath('validOrgId')
* def user = read('classpath:users.json').find(function(_) { return _.id == invalidUserID }) // Replace 'invalidUserID' with the actual ID to simulate unauthorized access

And headers Authorization contains "Bearer <token>"  // Use a valid token for authorization, replace '<token>' accordingly if needed

When method get '/orgs/' + orgPath('validOrgId') + '/issues'
Then status either 401 or 403
2025-02-02 13:41:23,115 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-02 13:41:23,116 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-02 13:41:23,144 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-02 13:41:23,147 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-02 13:41:28,084 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-02 13:41:28,085 - karate_llm_test_gen - INFO - Generated test case:  {
  "feature": "Test for Broken Authentication/Authorization on Organization Issues Access",
  "sce...
2025-02-02 13:41:28,086 - __main__ - INFO - Generated Karate test for /orgs/{org}/issues GET at output/karate_feature_files/ID_002_krtestoas_orgs_org_issues_GET.feature
2025-02-02 13:41:28,086 - karate_compatibility_verifier - INFO - Original content:
2025-02-02 13:41:28,086 - karate_compatibility_verifier - INFO - {
  "feature": "Test for Broken Authentication/Authorization on Organization Issues Access",
  "scenario": "User attempts to access organization issues without proper authentication or authorization.",
  "steps": [
    "Given url 'http://oas_github.api'",
    "And header Authorization = ''" , // Assuming no basic auth, as it is not specified in the API spec
    "When method get",
    "Then status code anyOf (401|403)", 
    "And match response contains 'Unauthenticated' or 'Forbidden'"
  ]
}
2025-02-02 13:41:30,881 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-02 13:41:30,882 - karate_compatibility_verifier - INFO -  Feature: Test for Broken Authentication/Authorization on Organization Issues Access
    Scenario: User attempts to access organization issues without proper authentication or authorization.
        Given url 'http://oas_github.api'
        And header Authorization = ''
        When method get
        Then status code anyOf (401|4x3)
        And match response contains 'Unauthenticated' or 'Forbidden'
2025-02-02 13:41:33,037 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-02 13:41:33,037 - karate_compatibility_verifier - INFO -  Feature: Test for Broken Authentication/Authorization on Organization Issues Access
    Scenario: User attempts to access organization issues without proper authentication or authorization.
        Given url 'http://oas_github.api'
        And header Authorization = ''
        When method get
        Then status code anyOf (401|500) // corrected from 4x3, assuming it was a typo for 5xx error codes range
2025-02-02 13:41:33,037 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_002_krtestoas_orgs_org_issues_GET_verified.feature
2025-02-02 13:41:33,038 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_002_krtestoas_orgs_org_issues_GET.feature:  Feature: Test for Broken Authentication/Authorization on Organization Issues Access
    Scenario: User attempts to access organization issues without proper authentication or authorization.
        Given url 'http://oas_github.api'
        And header Authorization = ''
        When method get
        Then status code anyOf (401|500) // corrected from 4x3, assuming it was a typo for 5xx error codes range
2025-02-02 13:41:33,039 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-02 13:41:33,039 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-02 13:41:33,061 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-02 13:41:33,065 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-02 13:41:38,742 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-02 13:41:38,743 - karate_llm_test_gen - INFO - Generated test case:  {
  "feature": "Broken Authentication/Authorization Vulnerabilities on Repos Issues Endpoint",
  "s...
2025-02-02 13:41:38,744 - __main__ - INFO - Generated Karate test for /repos/{owner}/{repo}/issues GET at output/karate_feature_files/ID_003_krtestoas_repos_owner_repo_issues_GET.feature
2025-02-02 13:41:38,744 - karate_compatibility_verifier - INFO - Original content:
2025-02-02 13:41:38,745 - karate_compatibility_verifier - INFO - {
  "feature": "Broken Authentication/Authorization Vulnerabilities on Repos Issues Endpoint",
  "scenario": "Test for potential Broken Authentication vulnerability by attempting to access without proper authentication.",
  "steps": [
    "Given url 'http://oas_github.api'",
    "When method get",
    "Then status is not equal (401 or 403)", // Assuming a broken auth/authorization would result in unauthorized access, but the API should still respond with an error code indicating such attempts are blocked.
    "And match response contains 'Unauthorized'", // This assumes that if authentication is indeed broken, it will return this message or similar indication of a failed attempt due to lacking proper credentials/permissions."
  ]
}
2025-02-02 13:41:43,239 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-02 13:41:43,239 - karate_compatibility_verifier - INFO -  Feature: Broken Authentication/Authorization Vulnerabilities on Repos Issues Endpoint
    Background: url 'http://oas_github.api'
    
    Scenario: Test for potential Broken Authentication vulnerability by attempting to access without proper authentication.
        Given url '/repos/{owner}/{repo}' // Replace with appropriate owner and repo values if needed, e.g., Given url '/repos/octocat/Hello-World'
        And header Authorization = 'Bearer unauthorized_token'
        When method get
        Then status is not equal (401 or 403)
        And match response contains 'Unauthorized'
2025-02-02 13:41:46,164 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-02 13:41:46,164 - karate_compatibility_verifier - INFO -  Feature: Broken Authentication/Authorization Vulnerabilities on Repos Issues Endpoint
    Background: url 'http://oas_github.api'
    
    Scenario: Test for potential Broken Authentication vulnerability by attempting to access without proper authentication.
        Given url '/repos/{owner}/{repo}' // Replace with appropriate owner and repo values if needed, e.g., Given url '/repos/octocat/Hello-World'
        And header Authorization = 'Bearer unauthorized_token'
        When method get
        Then status is not equal (401 or 403)
2025-02-02 13:41:46,165 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_003_krtestoas_repos_owner_repo_issues_GET_verified.feature
2025-02-02 13:41:46,165 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_003_krtestoas_repos_owner_repo_issues_GET.feature:  Feature: Broken Authentication/Authorization Vulnerabilities on Repos Issues Endpoint
    Background: url 'http://oas_github.api'
    
    Scenario: Test for potential Broken Authentication vulnerability by attempting to access without proper authentication.
        Given url '/repos/{owner}/{repo}' // Replace with appropriate owner and repo values if needed, e.g., Given url '/repos/octocat/Hello-World'
        And header Authorization = 'Bearer unauthorized_token'
        When method get
        Then status is not equal (401 or 403)
2025-02-02 13:41:46,165 - __main__ - INFO - Moving generated Karate feature files...
2025-02-02 13:41:46,166 - __main__ - INFO - Creating the Karate Test Framework with generated feature files
2025-02-02 13:41:49,208 - __main__ - INFO - Skipping karate test run.
