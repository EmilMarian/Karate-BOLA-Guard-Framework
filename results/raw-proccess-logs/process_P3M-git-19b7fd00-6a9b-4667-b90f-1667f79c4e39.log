2025-01-25 20:35:31,280 - __main__ - INFO - Skipping fragment creation: False
2025-01-25 20:35:31,339 - __main__ - DEBUG - Starting fragment retrieval process.
2025-01-25 20:35:31,610 - __main__ - DEBUG - Retrieved fragments: [{'content': '{"method": "GET", "parameters": [{"description": "Name of organisation.", "in": "path", "name": "org", "required": true, "schema": {"type": "string"}}, {"description": "Issues assigned to you / created by you / mentioning you / you\'re\\nsubscribed to updates for / All issues the authenticated user can see\\n", "in": "query", "name": "filter", "required": true, "schema": {"default": "all", "enum": ["assigned", "created", "mentioned", "subscribed", "all"], "type": "string"}}, {"in": "query", "name": "state", "required": true, "schema": {"default": "open", "enum": ["open", "closed"], "type": "string"}}, {"description": "String list of comma separated Label names. Example - bug,ui,@high.", "in": "query", "name": "labels", "required": true, "schema": {"type": "string"}}, {"in": "query", "name": "sort", "required": true, "schema": {"default": "created", "enum": ["created", "updated", "comments"], "type": "string"}}, {"in": "query", "name": "direction", "required": true, "schema": {"default": "desc", "enum": ["asc", "desc"], "type": "string"}}, {"description": "Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\\nOnly issues updated at or after this time are returned.\\n", "in": "query", "name": "since", "schema": {"type": "string"}}, {"description": "You can check the current version of media type in responses.\\n", "in": "header", "name": "X-GitHub-Media-Type", "schema": {"type": "string"}}, {"description": "Is used to set specified media type.", "in": "header", "name": "Accept", "schema": {"type": "string"}}, {"in": "header", "name": "X-RateLimit-Limit", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Remaining", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Reset", "schema": {"type": "integer"}}, {"in": "header", "name": "X-GitHub-Request-Id", "schema": {"type": "integer"}}], "path": "/orgs/{org}/issues", "requestBody": {}, "responses": {"200": {"content": {"application/json": {"schema": {"items": {"properties": {"assignee": {"properties": {"avatar_url": {"type": "string"}, "gravatar_id": {"type": "string"}, "id": {"type": "integer"}, "login": {"type": "string"}, "url": {"type": "string"}}, "type": "object"}, "body": {"type": "string"}, "closed_at": {"description": "ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ", "type": "string"}, "comments": {"type": "integer"}, "created_at": {"description": "ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ", "type": "string"}, "html_url": {"type": "string"}, "labels": {"items": {"properties": {"color": {"type": "string"}, "name": {"type": "string"}, "url": {"type": "string"}}, "type": "object"}, "type": "array"}, "milestone": {"properties": {"closed_issues": {"type": "integer"}, "created_at": {"description": "ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ", "type": "string"}, "creator": {"properties": {"avatar_url": {"type": "string"}, "gravatar_id": {"type": "string"}, "id": {"type": "integer"}, "login": {"type": "string"}, "url": {"type": "string"}}, "type": "object"}, "description": {"type": "string"}, "due_on": {"description": "ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ", "type": "string"}, "number": {"type": "integer"}, "open_issues": {"type": "integer"}, "state": {"type": "object"}, "title": {"type": "string"}, "url": {"type": "string"}}, "type": "object"}, "number": {"type": "integer"}, "pull_request": {"properties": {"diff_url": {"type": "string"}, "html_url": {"type": "string"}, "patch_url": {"type": "string"}}, "type": "object"}, "state": {"type": "object"}, "title": {"type": "string"}, "updated_at": {"description": "ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ", "type": "string"}, "url": {"type": "string"}, "user": {"properties": {"avatar_url": {"type": "string"}, "gravatar_id": {"type": "string"}, "id": {"type": "integer"}, "login": {"type": "string"}, "url": {"type": "string"}}, "type": "object"}}, "type": "object"}, "type": "array"}}}, "description": "OK"}}}', 'metadata': {'filename': '0083_orgs_org_issues_get_200.json'}}, {'content': '{"method": "GET", "parameters": [{"description": "Name of organisation.", "in": "path", "name": "org", "required": true, "schema": {"type": "string"}}, {"description": "Issues assigned to you / created by you / mentioning you / you\'re\\nsubscribed to updates for / All issues the authenticated user can see\\n", "in": "query", "name": "filter", "required": true, "schema": {"default": "all", "enum": ["assigned", "created", "mentioned", "subscribed", "all"], "type": "string"}}, {"in": "query", "name": "state", "required": true, "schema": {"default": "open", "enum": ["open", "closed"], "type": "string"}}, {"description": "String list of comma separated Label names. Example - bug,ui,@high.", "in": "query", "name": "labels", "required": true, "schema": {"type": "string"}}, {"in": "query", "name": "sort", "required": true, "schema": {"default": "created", "enum": ["created", "updated", "comments"], "type": "string"}}, {"in": "query", "name": "direction", "required": true, "schema": {"default": "desc", "enum": ["asc", "desc"], "type": "string"}}, {"description": "Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\\nOnly issues updated at or after this time are returned.\\n", "in": "query", "name": "since", "schema": {"type": "string"}}, {"description": "You can check the current version of media type in responses.\\n", "in": "header", "name": "X-GitHub-Media-Type", "schema": {"type": "string"}}, {"description": "Is used to set specified media type.", "in": "header", "name": "Accept", "schema": {"type": "string"}}, {"in": "header", "name": "X-RateLimit-Limit", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Remaining", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Reset", "schema": {"type": "integer"}}, {"in": "header", "name": "X-GitHub-Request-Id", "schema": {"type": "integer"}}], "path": "/orgs/{org}/issues", "requestBody": {}, "responses": {"403": {"content": {}, "description": "API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\\nfor details.\\n"}}}', 'metadata': {'filename': '0084_orgs_org_issues_get_403.json'}}, {'content': '{"method": "GET", "parameters": [{"description": "Name of repository owner.", "in": "path", "name": "owner", "required": true, "schema": {"type": "string"}}, {"description": "Name of repository.", "in": "path", "name": "repo", "required": true, "schema": {"type": "string"}}, {"description": "Issues assigned to you / created by you / mentioning you / you\'re\\nsubscribed to updates for / All issues the authenticated user can see\\n", "in": "query", "name": "filter", "required": true, "schema": {"default": "all", "enum": ["assigned", "created", "mentioned", "subscribed", "all"], "type": "string"}}, {"in": "query", "name": "state", "required": true, "schema": {"default": "open", "enum": ["open", "closed"], "type": "string"}}, {"description": "String list of comma separated Label names. Example - bug,ui,@high.", "in": "query", "name": "labels", "required": true, "schema": {"type": "string"}}, {"in": "query", "name": "sort", "required": true, "schema": {"default": "created", "enum": ["created", "updated", "comments"], "type": "string"}}, {"in": "query", "name": "direction", "required": true, "schema": {"default": "desc", "enum": ["asc", "desc"], "type": "string"}}, {"description": "Optional string of a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\\nOnly issues updated at or after this time are returned.\\n", "in": "query", "name": "since", "schema": {"type": "string"}}, {"description": "You can check the current version of media type in responses.\\n", "in": "header", "name": "X-GitHub-Media-Type", "schema": {"type": "string"}}, {"description": "Is used to set specified media type.", "in": "header", "name": "Accept", "schema": {"type": "string"}}, {"in": "header", "name": "X-RateLimit-Limit", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Remaining", "schema": {"type": "integer"}}, {"in": "header", "name": "X-RateLimit-Reset", "schema": {"type": "integer"}}, {"in": "header", "name": "X-GitHub-Request-Id", "schema": {"type": "integer"}}], "path": "/repos/{owner}/{repo}/issues", "requestBody": {}, "responses": {"403": {"content": {}, "description": "API rate limit exceeded. See http://developer.github.com/v3/#rate-limiting\\nfor details.\\n"}}}', 'metadata': {'filename': '0224_repos_owner_repo_issues_get_403.json'}}], form collection oas_github_fragments
2025-01-25 20:35:31,610 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-01-25 20:35:31,611 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-01-25 20:35:32,067 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-01-25 20:35:32,067 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-01-25 20:35:36,193 - karate_llm_test_gen - INFO - Response status code: 200
2025-01-25 20:35:36,194 - karate_llm_test_gen - INFO - Generated test case: ```yaml
feature: Broken Authentication/Authorization on Org Issues Retrieval
scenario: Attempt to ac...
2025-01-25 20:35:36,195 - __main__ - INFO - Generated Karate test for /orgs/{org}/issues GET at output/karate_feature_files/ID_001_krtestoas_orgs_org_issues_GET.feature
2025-01-25 20:35:36,196 - karate_compatibility_verifier - INFO - Original content:
2025-01-25 20:35:36,196 - karate_compatibility_verifier - INFO - ```yaml
feature: Broken Authentication/Authorization on Org Issues Retrieval
scenario: Attempt to access org issues without proper authentication or authorization
given url http://oas_github.api/orgs/{org}/issues
and def user = {username: 'unauthorized', password: ''} // Simulating an unautzhorized user with empty credentials
when method get
then status 401
and match response message contains "Unauthorized" or "Forbidden"
```
2025-01-25 20:35:42,007 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-01-25 20:35:42,007 - karate_compatibility_verifier - INFO - ```yaml
feature: Broken Authentication/Authorization on Org Issues Retrieval
scenario: Attempt to access org issues without proper authentication or authorization
    * url 'http://oas_github.api/orgs/{org}/issues'
    and def user = {username: '', password: ''} // Simulating an unauthorized user with empty credentials
when method get
then status 401
and match response message contains "Unauthorized" or "Forbidden"
```
2025-01-25 20:35:45,824 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-01-25 20:35:45,825 - karate_compatibility_verifier - INFO - ```yaml
feature: Broken Authentication/Authorization on Org Issues Retrieval
scenario: Attempt to access org issues without proper authentication or authorization
    * url 'http://oas_github.api/orgs/{org}/issues'
    and def user = {username: '', password: ''} // Simulating an unauthorized user with empty credentials
when method get
then status 401
and match response message contains "Unauthorized" or "Forbidden"
```
2025-01-25 20:35:45,825 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_001_krtestoas_orgs_org_issues_GET_verified.feature
2025-01-25 20:35:45,825 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_001_krtestoas_orgs_org_issues_GET.feature: ```yaml
feature: Broken Authentication/Authorization on Org Issues Retrieval
scenario: Attempt to access org issues without proper authentication or authorization
    * url 'http://oas_github.api/orgs/{org}/issues'
    and def user = {username: '', password: ''} // Simulating an unauthorized user with empty credentials
when method get
then status 401
and match response message contains "Unauthorized" or "Forbidden"
```
2025-01-25 20:35:45,826 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-01-25 20:35:45,826 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-01-25 20:35:45,846 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-01-25 20:35:45,847 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-01-25 20:35:52,322 - karate_llm_test_gen - INFO - Response status code: 200
2025-01-25 20:35:52,322 - karate_llm_test_gen - INFO - Generated test case: ```yaml
feature: Broken Authentication/Authorization on Org Issues Retrieval
scenario: Attempt to ac...
2025-01-25 20:35:52,323 - __main__ - INFO - Generated Karate test for /orgs/{org}/issues GET at output/karate_feature_files/ID_002_krtestoas_orgs_org_issues_GET.feature
2025-01-25 20:35:52,323 - karate_compatibility_verifier - INFO - Original content:
2025-01-25 20:35:52,323 - karate_compatibility_verifier - INFO - ```yaml
feature: Broken Authentication/Authorization on Org Issues Retrieval
scenario: Attempt to access org issues without proper authentication or authorization
given url http://oas_github.api/orgs/{org}/issues
and def user = {username: 'unauthorized', password: ''} // Simulating an unautzhorized user with empty credentials
when method get
then status 401
and match response message contains "Unauthorized" or "Forbidden"
```
2025-01-25 20:35:58,221 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-01-25 20:35:58,221 - karate_compatibility_verifier - INFO - ```yaml
feature: Broken Authentication/Authorization on Org Issues Retrieval
scenario: Attempt to access org issues without proper authentication or authorization
    * url 'http://oas_github.api/orgs/{org}/issues'
    and def user = {username: '', password: ''} // Simulating an unauthorized user with empty credentials
when method get
then status 401
and match response message contains "Unauthorized" or "Forbidden"
```
2025-01-25 20:36:02,247 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-01-25 20:36:02,247 - karate_compatibility_verifier - INFO - ```yaml
feature: Broken Authentication/Authorization on Org Issues Retrieval
scenario: Attempt to access org issues without proper authentication or authorization
    * url 'http://oas_github.api/orgs/{org}/issues'
    and def user = {username: '', password: ''} // Simulating an unauthorized user with empty credentials
when method get
then status 401
and match response message contains "Unauthorized" or "Forbidden"
```
2025-01-25 20:36:02,247 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_002_krtestoas_orgs_org_issues_GET_verified.feature
2025-01-25 20:36:02,248 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_002_krtestoas_orgs_org_issues_GET.feature: ```yaml
feature: Broken Authentication/Authorization on Org Issues Retrieval
scenario: Attempt to access org issues without proper authentication or authorization
    * url 'http://oas_github.api/orgs/{org}/issues'
    and def user = {username: '', password: ''} // Simulating an unauthorized user with empty credentials
when method get
then status 401
and match response message contains "Unauthorized" or "Forbidden"
```
2025-01-25 20:36:02,248 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-01-25 20:36:02,248 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-01-25 20:36:02,303 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-01-25 20:36:02,304 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-01-25 20:36:10,851 - karate_llm_test_gen - INFO - Response status code: 200
2025-01-25 20:36:10,851 - karate_llm_test_gen - INFO - Generated test case: ```yaml
feature: Broken Authentication/Authorization on Repos Issues Retrieval
scenario: Attempt to ...
2025-01-25 20:36:10,852 - __main__ - INFO - Generated Karate test for /repos/{owner}/{repo}/issues GET at output/karate_feature_files/ID_003_krtestoas_repos_owner_repo_issues_GET.feature
2025-01-25 20:36:10,852 - karate_compatibility_verifier - INFO - Original content:
2025-01-25 20:36:10,853 - karate_compatibility_verifier - INFO - ```yaml
feature: Broken Authentication/Authorization on Repos Issues Retrieval
scenario: Attempt to access a repository issue without proper authentication or authorization
given url http://oas_github.api/repos/{owner}/{repo}/issues
and header Authorization = 'Bearer invalid_token' // Replace with an actual token that is known to be invalid for the test case
when method get
then status 401 or 403
expect {response}.contains('"message": "Authentication credentials were not provided or are missing'"}
or expect {response}.contains('"detail": ["Missing authorization header"}') // Adjust based on actual error messages from the API for unauthorized access attempts.
# This scenario checks if there's a vulnerability that allows users to bypass authentication, potentially accessing sensitive repository issues without proper credentials or permissions. It ensures robustness in handling failed login scenarios and enforces strict authorization controls against such attacks.
```
2025-01-25 20:36:26,137 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-01-25 20:36:26,137 - karate_compatibility_verifier - INFO - Given url 'http://oas_github.api/repos/{owner}/{repo}/issues'
And header Authorization = 'Bearer invalid_token' // Replace with an actual token that is known to be invalid for the test case
When method get
Then status 401 or 403
Expect {response} contains ('"message": "Authentication credentials were not provided or are missing"')
2025-01-25 20:36:28,077 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-01-25 20:36:28,077 - karate_compatibility_verifier - INFO - Given url 'http://oas_github.api/repos/{owner}/{repo}/issues'
And header Authorization = 'Bearer invalidtoken' // Replace with an actual token that is known to be invalid for the test case
When method get
Then status 401 or 4 fear-factor
2025-01-25 20:36:28,078 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_003_krtestoas_repos_owner_repo_issues_GET_verified.feature
2025-01-25 20:36:28,078 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_003_krtestoas_repos_owner_repo_issues_GET.feature: Given url 'http://oas_github.api/repos/{owner}/{repo}/issues'
And header Authorization = 'Bearer invalidtoken' // Replace with an actual token that is known to be invalid for the test case
When method get
Then status 401 or 4 fear-factor
2025-01-25 20:36:28,078 - __main__ - INFO - Moving generated Karate feature files...
2025-01-25 20:36:28,079 - __main__ - INFO - Creating the Karate Test Framework with generated feature files
2025-01-25 20:36:30,277 - __main__ - INFO - Skipping karate test run.
