2025-02-01 12:23:33,737 - __main__ - INFO - Skipping fragment creation: False
2025-02-01 12:23:33,827 - __main__ - DEBUG - Starting fragment retrieval process.
2025-02-01 12:23:34,096 - __main__ - DEBUG - Retrieved fragments: [{'content': '{"method": "GET", "parameters": [{"description": "Type of merchant location. Options are \\"acceptance.paypass\\" \\"topup.repower\\" \\"products.prepaidtravelcard\\" \\"offers.easysavings\\" and \\"features.cashback\\". Cash Back is currently only available in the US.", "in": "query", "name": "Details", "required": true, "type": "string", "x-example": "acceptance.paypass", "x-explorer": true}, {"description": "Zero-based offset where the response will start. The actual start position is this value +1. An offset of 10 starts at item 11. Combined with the PageLength option this allows pagination to be supported through the service requests.", "in": "query", "name": "PageOffset", "required": true, "type": "integer", "x-example": "0", "x-explorer": true}, {"description": "Maximum number of items to retrieve within the current \\"page\\" of results.", "in": "query", "name": "PageLength", "required": true, "type": "integer", "x-example": "5", "x-explorer": true}, {"description": "Category of the merchant location. See the Categories (Merchant) resource for a list of valid categories. This parameter is only valid for merchant queries with Details = \\"acceptance.paypass\\" or \\"features.cashback\\".", "in": "query", "name": "Category", "required": false, "type": "string", "x-example": "features.cashback", "x-explorer": false}, {"description": "Line 1 of the street address for the merchant location.  Usually includes the street number and name. This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter.", "in": "query", "name": "AddressLine1", "required": false, "type": "string", "x-example": "42 Elm Street", "x-explorer": false}, {"description": "Line 2 of the street address usually an apartment number or suite number. This parameter is used rarely and is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter.", "in": "query", "name": "AddressLine2", "required": false, "type": "string", "x-example": "Suite 101", "x-explorer": false}, {"description": "Name of the city for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.", "in": "query", "name": "City", "required": false, "type": "string", "x-example": "New York", "x-explorer": false}, {"description": "State or province for a merchant location (only supported for US and Canada locations).  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.", "in": "query", "name": "CountrySubdivision", "required": false, "type": "string", "x-example": "NY", "x-explorer": false}, {"description": "Zip code or postal code for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.", "in": "query", "name": "PostalCode", "required": false, "type": "string", "x-example": "11001", "x-explorer": false}, {"description": "Any three digit country code for an ATM location.  Valid values are Three digit alpha country code as defined in ISO 3166-1.  This parameter is ignored if latitude and longitude are provided. This parameter is required if any other address information is provided including AddressLine1 AddressLine2 City PostalCode or CountrySubdivision. By default we supply ATM location data for United States ATMs for up to twenty-five records per request.", "in": "query", "name": "Country", "required": false, "type": "string", "x-example": "USA", "x-explorer": false}, {"description": "Latitude of a merchant location.  If latitude is provided longitude must also be provided.", "format": "double", "in": "query", "name": "Latitude", "required": false, "type": "number", "x-example": "38.53463", "x-explorer": true}, {"description": "Longitude of a merchant location.  If longitude is provided latitude must also be provided.", "format": "double", "in": "query", "name": "Longitude", "required": false, "type": "number", "x-example": "-90.286781", "x-explorer": true}, {"description": "Indicates the unit for the radius as well as the units of the distance of each location from the basepoint in the response.", "in": "query", "name": "DistanceUnit", "required": false, "type": "string", "x-example": "MILE", "x-explorer": false}, {"description": "This is the radius from the search point in the distance unit you set.  For example if you want to search for locations within 50 miles of a certain point you would set DistanceUnit=mile and Radius=50.  This parameter is ignored in non-geocoded countries.", "in": "query", "name": "Radius", "required": false, "type": "integer", "x-example": "25", "x-explorer": false}, {"description": "Unique identifier that represents the merhcant sponsor of an offer. Any valid merchant ID.", "in": "query", "name": "OfferMerchantID", "required": false, "type": "string", "x-example": "34760", "x-explorer": false}], "path": "/merchants/v1/merchant", "requestBody": {}, "responses": {"200": {"description": "An array of Merchant locations", "schema": {"properties": {"Merchants": {"$ref": "#/definitions/Merchants"}}}}}}', 'metadata': {'filename': '0013_merchants_v1_merchant_get_200.json'}}, {'content': '{"method": "GET", "parameters": [{"description": "Type of merchant location. Options are \\"acceptance.paypass\\" \\"topup.repower\\" \\"products.prepaidtravelcard\\" \\"offers.easysavings\\" and \\"features.cashback\\". Cash Back is currently only available in the US.", "in": "query", "name": "Details", "required": true, "type": "string", "x-example": "acceptance.paypass", "x-explorer": true}, {"description": "Zero-based offset where the response will start. The actual start position is this value +1. An offset of 10 starts at item 11. Combined with the PageLength option this allows pagination to be supported through the service requests.", "in": "query", "name": "PageOffset", "required": true, "type": "integer", "x-example": "0", "x-explorer": true}, {"description": "Maximum number of items to retrieve within the current \\"page\\" of results.", "in": "query", "name": "PageLength", "required": true, "type": "integer", "x-example": "5", "x-explorer": true}, {"description": "Category of the merchant location. See the Categories (Merchant) resource for a list of valid categories. This parameter is only valid for merchant queries with Details = \\"acceptance.paypass\\" or \\"features.cashback\\".", "in": "query", "name": "Category", "required": false, "type": "string", "x-example": "features.cashback", "x-explorer": false}, {"description": "Line 1 of the street address for the merchant location.  Usually includes the street number and name. This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter.", "in": "query", "name": "AddressLine1", "required": false, "type": "string", "x-example": "42 Elm Street", "x-explorer": false}, {"description": "Line 2 of the street address usually an apartment number or suite number. This parameter is used rarely and is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter and either City parameter or PostalCode parameter.", "in": "query", "name": "AddressLine2", "required": false, "type": "string", "x-example": "Suite 101", "x-explorer": false}, {"description": "Name of the city for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.", "in": "query", "name": "City", "required": false, "type": "string", "x-example": "New York", "x-explorer": false}, {"description": "State or province for a merchant location (only supported for US and Canada locations).  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.", "in": "query", "name": "CountrySubdivision", "required": false, "type": "string", "x-example": "NY", "x-explorer": false}, {"description": "Zip code or postal code for a merchant location.  This parameter is ignored if latitude and longitude are provided. If you provide this parameter you must also provide the Country parameter.", "in": "query", "name": "PostalCode", "required": false, "type": "string", "x-example": "11001", "x-explorer": false}, {"description": "Any three digit country code for an ATM location.  Valid values are Three digit alpha country code as defined in ISO 3166-1.  This parameter is ignored if latitude and longitude are provided. This parameter is required if any other address information is provided including AddressLine1 AddressLine2 City PostalCode or CountrySubdivision. By default we supply ATM location data for United States ATMs for up to twenty-five records per request.", "in": "query", "name": "Country", "required": false, "type": "string", "x-example": "USA", "x-explorer": false}, {"description": "Latitude of a merchant location.  If latitude is provided longitude must also be provided.", "format": "double", "in": "query", "name": "Latitude", "required": false, "type": "number", "x-example": "38.53463", "x-explorer": true}, {"description": "Longitude of a merchant location.  If longitude is provided latitude must also be provided.", "format": "double", "in": "query", "name": "Longitude", "required": false, "type": "number", "x-example": "-90.286781", "x-explorer": true}, {"description": "Indicates the unit for the radius as well as the units of the distance of each location from the basepoint in the response.", "in": "query", "name": "DistanceUnit", "required": false, "type": "string", "x-example": "MILE", "x-explorer": false}, {"description": "This is the radius from the search point in the distance unit you set.  For example if you want to search for locations within 50 miles of a certain point you would set DistanceUnit=mile and Radius=50.  This parameter is ignored in non-geocoded countries.", "in": "query", "name": "Radius", "required": false, "type": "integer", "x-example": "25", "x-explorer": false}, {"description": "Unique identifier that represents the merhcant sponsor of an offer. Any valid merchant ID.", "in": "query", "name": "OfferMerchantID", "required": false, "type": "string", "x-example": "34760", "x-explorer": false}], "path": "/merchants/v1/merchant", "requestBody": {}, "responses": {"default": {"description": "Unexpected error", "schema": {"properties": {"Errors": {"$ref": "#/definitions/Errors"}}}}}}', 'metadata': {'filename': '0014_merchants_v1_merchant_get_default.json'}}, {'content': '{"method": "GET", "parameters": [{"description": "This is the type of merchant location. Options  \\"acceptance.paypass\\" \\"topup.repower\\"  \\"products.prepaidtravelcard\\"  and \\"offers.easysavings\\"", "in": "query", "name": "details", "required": true, "type": "string", "x-example": "topup.repower", "x-explorer": true}, {"description": "Any three digit country code as defined in ISO 3166-1. For example \\"USA or \\"CAN\\"", "in": "query", "name": "country", "required": true, "type": "string", "x-example": "USA", "x-explorer": true}], "path": "/merchants/v1/countrysubdivision", "requestBody": {}, "responses": {"200": {"description": "A list of all the CountrySubdivisions", "schema": {"properties": {"CountrySubdivisions": {"$ref": "#/definitions/CountrySubdivisions"}}}}}}', 'metadata': {'filename': '0011_merchants_v1_countrysubdivision_get_200.json'}}], form collection oas_london_trafffic_fragments
2025-02-01 12:23:34,097 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-01 12:23:34,097 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-01 12:23:34,524 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-01 12:23:34,525 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-01 12:25:45,085 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-01 12:25:45,086 - karate_llm_test_gen - INFO - Generated test case: ```yaml

# Given API URL and Path: /merchants/v1/merchant

Given url 'http://oas_london_traffic.api/...
2025-02-01 12:25:45,086 - __main__ - INFO - Generated Karate test for /merchants/v1/merchant GET at output/karate_feature_files/ID_001_krtestoas_merchants_v1_merchant_GET.feature
2025-02-01 12:25:45,087 - karate_compatibility_verifier - INFO - Original content:
2025-02-01 12:25:45,087 - karate_compatibility_verifier - INFO - ```yaml

# Given API URL and Path: /merchants/v1/merchant

Given url 'http://oas_london_traffic.api/merchants/v1/merchant'

Scenario: Attempt to access a merchant without proper authentication or authorization

  * def unautmizedAccess = try { callonce read('classpath:helpers/unauthorizedMerchantAccess.feature') } catch (e) {}

  When method get

  Then status code is not 200 and match response contains 'Unauthorized' or '401 Unauthenticated'

```
2025-02-01 12:27:52,662 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-01 12:27:52,662 - karate_compatibility_verifier - INFO - Given url 'http://oas_london_traffic.api/merchants/v1/merchant'

Scenario: Attempt to access a merchant without proper authentication or authorization
  * def unauthorizedAccess = callonce read('classpath:helpers/unauthorizedMerchantAccess')
  When method get
  Then status code is not 200 and match response contains 'Unauthenticated'
2025-02-01 12:28:31,534 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-01 12:28:31,534 - karate_compatibility_verifier - INFO - Given url 'http://oas_london_traffic.api/merchants/v1/merchant'

Scenario: Attempt to access a merchant without proper authentication or authorization
  * def unauthorizedAccess = callonce read('classpath:helpers/unauthorizedMerchantAccess')
  When method get
  Then status code is not equalTo(200) and match response contains 'Unauthenticated'
2025-02-01 12:28:31,535 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_001_krtestoas_merchants_v1_merchant_GET_verified.feature
2025-02-01 12:28:31,536 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_001_krtestoas_merchants_v1_merchant_GET.feature: Given url 'http://oas_london_traffic.api/merchants/v1/merchant'

Scenario: Attempt to access a merchant without proper authentication or authorization
  * def unauthorizedAccess = callonce read('classpath:helpers/unauthorizedMerchantAccess')
  When method get
  Then status code is not equalTo(200) and match response contains 'Unauthenticated'
2025-02-01 12:28:31,537 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-01 12:28:31,538 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-01 12:28:31,583 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-01 12:28:31,585 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-01 12:31:56,073 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-01 12:31:56,074 - karate_llm_test_gen - INFO - Generated test case: {
    "feature": "Test API Endpoint Merchant Access",
    "scenario": "Checking broken authenticatio...
2025-02-01 12:31:56,075 - __main__ - INFO - Generated Karate test for /merchants/v1/merchant GET at output/karate_feature_files/ID_002_krtestoas_merchants_v1_merchant_GET.feature
2025-02-01 12:31:56,076 - karate_compatibility_verifier - INFO - Original content:
2025-02-01 12:31:56,076 - karate_compatibility_verifier - INFO - {
    "feature": "Test API Endpoint Merchant Access",
    "scenario": "Checking broken authentication and authorization on merchant access endpoint",
    "given_url": "/merchants/v1/merchant",
    "steps": [
        "When method get",
        // Test case 1: Attempt to access with invalid credentials (e.g., empty username or password)
        "* def response = call(http://oas_london_traffic.api?method=GET&url=/merchants/v1/merchant)",
        "And status matches 401", // Assuming a basic check for unauthorized access (HTTP 401) due to missing credentials in the request headers or body
        
        // Test case 2: Attempting with no authentication specified, expecting an error response from API if it's not publicly accessible without auth checks.
        "* def invalidAuthResponse = call(http://oas_london_traffic.api?method=GET&url=/merchants/v1/merchant)",
        "And status matches 403", // Assuming the API returns HTTP 403 Forbidden when no authentication is provided for a potentially secured endpoint (though not specified in this case)
        
        "* def validCredentials = { username: 'admin', password: 'securepassword' }",
        "And header Authorization contains \"Bearer \${validCredentials.username}: \${validCredentials.password}\"", // Assuming API uses Bearer token for authentication, though not specified in the details; this step is hypothetical to demonstrate how one might test with valid credentials if they were required and provided
        "When method get using Authorization header with valid credentials",
        "Then status matches 200", // Expecting a successful response (HTTP 200 OK) when access control checks pass, though this is speculative based on the given info.
        
    ],
}
2025-02-01 12:35:19,210 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-01 12:35:19,210 - karate_compatibility_verifier - INFO - {
    "feature": "Test API Endpoint Merchant Access",
    "scenario": "Checking broken authentication and authorization on merchant access endpoint",
    "given_url": "/merchants/v1/merchant",
    "steps": [
        "* def invalidAuthResponse = call('/merchants/v1/merchant')", // Assuming the API returns an error when no credentials are provided, though not specified in this case.
        "And status matches 403" // Expecting a Forbidden (HTTP 4 fault) response for unauthorized access attempts without proper authentication headers or body content as per typical RESTful APIs' behavior.
    ],
}
2025-02-01 12:36:13,810 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-01 12:36:13,810 - karate_compatibility_verifier - INFO - {
    "feature": "Test API Endpoint Merchant Access",
    "scenario": "Checking broken authentication and authorization on merchant access endpoint",
    "given_url": "/merchants/v1/merchant",
    "steps": [
        "* def invalidAuthResponse = call('/merchants/v1/merchant')" // Assuming the API returns an error when no credentials are provided, though not specified in this case.
        "And status matches 403" // Expecting a Forbidden (HTTP 403) response for unauthorized access attempts without proper authentication headers or body content as per typical RESTful APIs' behavior.
    ],
}
2025-02-01 12:36:13,810 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_002_krtestoas_merchants_v1_merchant_GET_verified.feature
2025-02-01 12:36:13,810 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_002_krtestoas_merchants_v1_merchant_GET.feature: {
    "feature": "Test API Endpoint Merchant Access",
    "scenario": "Checking broken authentication and authorization on merchant access endpoint",
    "given_url": "/merchants/v1/merchant",
    "steps": [
        "* def invalidAuthResponse = call('/merchants/v1/merchant')" // Assuming the API returns an error when no credentials are provided, though not specified in this case.
        "And status matches 403" // Expecting a Forbidden (HTTP 403) response for unauthorized access attempts without proper authentication headers or body content as per typical RESTful APIs' behavior.
    ],
}
2025-02-01 12:36:13,811 - karate_llm_test_gen - INFO - Generating Karate test for prompt: 
Given the following API endpoint information:

  ...
2025-02-01 12:36:13,812 - karate_llm_test_gen - INFO - Getting relevant examples for: 
Given the following API endpoint information:

  ...
2025-02-01 12:36:13,849 - karate_llm_test_gen - INFO - Found 3 relevant examples.
2025-02-01 12:36:13,850 - karate_llm_test_gen - INFO - Sending request to http://192.168.1.108:4893/v1/chat/completions
2025-02-01 12:38:29,566 - karate_llm_test_gen - INFO - Response status code: 200
2025-02-01 12:38:29,567 - karate_llm_test_gen - INFO - Generated test case: {
    "feature": "Test API Endpoint /merchants/v1/countrysubdivision for Broken Authentication/Autho...
2025-02-01 12:38:29,568 - __main__ - INFO - Generated Karate test for /merchants/v1/countrysubdivision GET at output/karate_feature_files/ID_003_krtestoas_merchants_v1_countrysubdivision_GET.feature
2025-02-01 12:38:29,568 - karate_compatibility_verifier - INFO - Original content:
2025-02-01 12:38:29,568 - karate_compatibility_verifier - INFO - {
    "feature": "Test API Endpoint /merchants/v1/countrysubdivision for Broken Authentication/Authorization",
    "scenario": "User attempts access without proper authentication or authorization.",
    "given url": "/merchants/v1/countrysubdivision",
    "steps": [
        "And def userCredentials = { username: 'admin', password: '' } // Assuming admin credentials are available but empty for testing purposes",
        
        "When method get with headers {'Authorization': f'Basic {Base64.encode('{userCredentials.username}:')}'}",
        
        "Then status 401 or 500"
    ],
}
2025-02-01 12:40:09,500 - karate_compatibility_verifier - INFO - 
Content after compatibility check:
2025-02-01 12:40:09,500 - karate_compatibility_verifier - INFO - Feature: Test API Endpoint /merchants/v1/countrysubdivision for Broken Authentication/Authorization
    
Background:
* url '/merchants/v1/countrysubdivision'

Scenario: User attempts access without proper authentication or authorization.

    * def userCredentials = { username: 'admin', password: '' } // Assuming admin credentials are available but empty for testing purposes
    
    When method get with headers {'Authorization': f'Basic {Base64.encode(userCredentials.username + ":")}'}
    
    Then status 501 or 403
2025-02-01 12:41:00,250 - karate_compatibility_verifier - INFO - 
Final verified content:
2025-02-01 12:41:00,250 - karate_compatibility_verifier - INFO - Feature: Test API Endpoint /merchants/v1/countrysubdivision for Broken Authentication/Authorization
Background:
* url '/merchants/v1/countrysubdivision'

Scenario: User attempts access without proper authentication or authorization.
    
    * def userCredentials = { username: 'admin', password: '' } // Assuming admin credentials are available but empty for testing purposes
    
    When method get with headers {'Authorization': f'Basic {Base64.encode(userCredentials.username + ":")}'}
    
    Then status 501 or 403
2025-02-01 12:41:00,251 - karate_compatibility_verifier - INFO - 
Verified content written to: output/karate_feature_files/ID_003_krtestoas_merchants_v1_countrysubdivision_GET_verified.feature
2025-02-01 12:41:00,251 - __main__ - WARNING - Compatibility issues found in output/karate_feature_files/ID_003_krtestoas_merchants_v1_countrysubdivision_GET.feature: Feature: Test API Endpoint /merchants/v1/countrysubdivision for Broken Authentication/Authorization
Background:
* url '/merchants/v1/countrysubdivision'

Scenario: User attempts access without proper authentication or authorization.
    
    * def userCredentials = { username: 'admin', password: '' } // Assuming admin credentials are available but empty for testing purposes
    
    When method get with headers {'Authorization': f'Basic {Base64.encode(userCredentials.username + ":")}'}
    
    Then status 501 or 403
2025-02-01 12:41:00,251 - __main__ - INFO - Moving generated Karate feature files...
2025-02-01 12:41:00,253 - __main__ - INFO - Creating the Karate Test Framework with generated feature files
2025-02-01 12:41:03,197 - __main__ - INFO - Skipping karate test run.
