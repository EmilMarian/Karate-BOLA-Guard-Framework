openapi: 3.0.1
info:
  title: Transport for London Unified
  description: >-
    Our unified API brings together data across all modes of transport into a
    single RESTful API. This API provides access to the most highly requested
    realtime and status infomation across all the modes of transport, in a
    single and consistent way. Access to the developer documentation is
    available at https://api.tfl.gov.uk
  version: v1
  x-apisguru-categories:
    - transport
    - open_data
  x-logo:
    url: >-
      https://api.apis.guru/v2/cache/logo/https_twitter.com_TfL_profile_image.jpeg
  x-origin:
    - format: swagger
      url: 'https://api.tfl.gov.uk/swagger/docs/v1'
      version: '2.0'
  x-preferred: true
  x-providerName: tfl.gov.uk
  x-datafire:
    name: tfl_gov_uk
    type: openapi
servers:
  - url: 'https://api.tfl.gov.uk/'
paths:
  '/AccidentStats/{year}':
    get:
      tags:
        - AccidentStats
      summary: Gets all accident details for accidents occuring in the specified year
      operationId: AccidentStats_Get
      parameters:
        - name: year
          in: path
          description: The year for which to filter the accidents on.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.AccidentStats.AccidentDetail
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.AccidentStats.AccidentDetail
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.AccidentStats.AccidentDetail
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.AccidentStats.AccidentDetail
      deprecated: false
  /AirQuality:
    get:
      tags:
        - AirQuality
      summary: Gets air quality data feed
      operationId: AirQuality_Get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
      deprecated: false
  /BikePoint:
    get:
      tags:
        - BikePoint
      summary: "Gets all bike point locations. The Place object has an addtionalProperties array which contains the nbBikes, nbDocks and nbSpaces\r\n            numbers which give the status of the BikePoint. A mismatch in these numbers i.e. nbDocks - (nbBikes + nbSpaces) != 0 indicates broken docks."
      operationId: BikePoint_GetAll
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
      deprecated: false
  /BikePoint/Search:
    get:
      tags:
        - BikePoint
      summary: "Search for bike stations by their name, a bike point's name often contains information about the name of the street\r\n            or nearby landmarks, for example. Note that the search result does not contain the PlaceProperties i.e. the status\r\n            or occupancy of the BikePoint, to get that information you should retrieve the BikePoint by its id on /BikePoint/id."
      operationId: BikePoint_Search
      parameters:
        - name: query
          in: query
          description: The search term e.g. "St. James"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
      deprecated: false
  '/BikePoint/{id}':
    get:
      tags:
        - BikePoint
      summary: Gets the bike point with the given id.
      operationId: BikePoint_Get
      parameters:
        - name: id
          in: path
          description: >-
            A bike point id (a list of ids can be obtained from the above
            BikePoint call)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
      deprecated: false
  /Cabwise/search:
    get:
      tags:
        - Cabwise
      summary: Gets taxis and minicabs contact information
      operationId: Cabwise_Get
      parameters:
        - name: lat
          in: query
          description: Latitude
          required: true
          schema:
            type: number
            format: double
        - name: lon
          in: query
          description: Longitude
          required: true
          schema:
            type: number
            format: double
        - name: optype
          in: query
          description: 'Operator Type e.g Minicab, Executive, Limousine'
          schema:
            type: string
        - name: wc
          in: query
          description: Wheelchair accessible
          schema:
            type: string
        - name: radius
          in: query
          description: The radius of the bounding circle in metres
          schema:
            type: number
            format: double
        - name: name
          in: query
          description: Trading name of operating company
          schema:
            type: string
        - name: maxResults
          in: query
          description: >-
            An optional parameter to limit the number of results return. Default
            and maximum is 20.
          schema:
            type: integer
            format: int32
        - name: legacyFormat
          in: query
          description: Legacy Format
          schema:
            type: boolean
        - name: forceXml
          in: query
          description: Force Xml
          schema:
            type: boolean
        - name: twentyFourSevenOnly
          in: query
          description: Twenty Four Seven Only
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
      deprecated: false
  '/Journey/JourneyResults/{from}/to/{to}':
    get:
      tags:
        - Journey
      summary: >-
        Perform a Journey Planner search from the parameters specified in simple
        types
      operationId: Journey_JourneyResults
      parameters:
        - name: from
          in: path
          description: >-
            Origin of the journey. Can be WGS84 coordinates expressed as
            "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId,
            or a free-text string (will cause disambiguation unless it exactly
            matches a point of interest name).
          required: true
          schema:
            type: string
        - name: to
          in: path
          description: >-
            Destination of the journey. Can be WGS84 coordinates expressed as
            "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId,
            or a free-text string (will cause disambiguation unless it exactly
            matches a point of interest name).
          required: true
          schema:
            type: string
        - name: via
          in: query
          description: >-
            Travel through point on the journey. Can be WGS84 coordinates
            expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an
            ICS StopId, or a free-text string (will cause disambiguation unless
            it exactly matches a point of interest name).
          schema:
            type: string
        - name: nationalSearch
          in: query
          description: >-
            Does the journey cover stops outside London? eg.
            "nationalSearch=true"
          schema:
            type: boolean
        - name: date
          in: query
          description: The date must be in yyyyMMdd format
          schema:
            type: string
        - name: time
          in: query
          description: The time must be in HHmm format
          schema:
            type: string
        - name: timeIs
          in: query
          description: >-
            Does the time given relate to arrival or leaving time? Possible
            options: "departing" | "arriving"
          schema:
            type: string
            enum:
              - Arriving
              - Departing
        - name: journeyPreference
          in: query
          description: >-
            The journey preference eg possible options: "leastinterchange" |
            "leasttime" | "leastwalking"
          schema:
            type: string
            enum:
              - LeastInterchange
              - LeastTime
              - LeastWalking
        - name: mode
          in: query
          description: >-
            The mode must be a comma separated list of modes. eg possible
            options:
            "public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle"
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: accessibilityPreference
          in: query
          description: >-
            The accessibility preference must be a comma separated list eg.
            "noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform"
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - NoRequirements
                - NoSolidStairs
                - NoEscalators
                - NoElevators
                - StepFreeToVehicle
                - StepFreeToPlatform
        - name: fromName
          in: query
          description: >-
            An optional name to associate with the origin of the journey in the
            results.
          schema:
            type: string
        - name: toName
          in: query
          description: >-
            An optional name to associate with the destination of the journey in
            the results.
          schema:
            type: string
        - name: viaName
          in: query
          description: >-
            An optional name to associate with the via point of the journey in
            the results.
          schema:
            type: string
        - name: maxTransferMinutes
          in: query
          description: The max walking time in minutes for transfer eg. "120"
          schema:
            type: string
        - name: maxWalkingMinutes
          in: query
          description: The max walking time in minutes for journeys eg. "120"
          schema:
            type: string
        - name: walkingSpeed
          in: query
          description: 'The walking speed. eg possible options: "slow" | "average" | "fast".'
          schema:
            type: string
            enum:
              - Slow
              - Average
              - Fast
        - name: cyclePreference
          in: query
          description: >-
            The cycle preference. eg possible options: "allTheWay" |
            "leaveAtStation" | "takeOnTransport" | "cycleHire"
          schema:
            type: string
            enum:
              - None
              - LeaveAtStation
              - TakeOnTransport
              - AllTheWay
              - CycleHire
        - name: adjustment
          in: query
          description: >-
            Time adjustment command. eg possible options: "TripFirst" |
            "TripLast"
          schema:
            type: string
        - name: bikeProficiency
          in: query
          description: >-
            A comma separated list of cycling proficiency levels. eg possible
            options: "easy,moderate,fast"
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - Easy
                - Moderate
                - Fast
        - name: alternativeCycle
          in: query
          description: Option to determine whether to return alternative cycling journey
          schema:
            type: boolean
        - name: alternativeWalking
          in: query
          description: Option to determine whether to return alternative walking journey
          schema:
            type: boolean
        - name: applyHtmlMarkup
          in: query
          description: >-
            Flag to determine whether certain text (e.g. walking instructions)
            should be output with HTML tags or not.
          schema:
            type: boolean
        - name: useMultiModalCall
          in: query
          description: >-
            A boolean to indicate whether or not to return 3 public transport
            journeys, a bus journey, a cycle hire journey, a personal cycle
            journey and a walking journey
          schema:
            type: boolean
        - name: walkingOptimization
          in: query
          description: A boolean to indicate whether to optimize journeys using walking
          schema:
            type: boolean
        - name: taxiOnlyTrip
          in: query
          description: >-
            A boolean to indicate whether to return one or more taxi journeys.
            Note, setting this to true will override "useMultiModalCall".
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.ItineraryResult
            text/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.ItineraryResult
            application/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.ItineraryResult
            text/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.ItineraryResult
      deprecated: false
  /Journey/Meta/Modes:
    get:
      tags:
        - Journey
      summary: Gets a list of all of the available journey planner modes
      operationId: Journey_Meta
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
      deprecated: false
  /Line/Meta/DisruptionCategories:
    get:
      tags:
        - Line
      summary: Gets a list of valid disruption categories
      operationId: Line_MetaDisruptionCategories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            application/xml:
              schema:
                type: array
                items:
                  type: string
            text/xml:
              schema:
                type: array
                items:
                  type: string
      deprecated: false
  /Line/Meta/Modes:
    get:
      tags:
        - Line
      summary: Gets a list of valid modes
      operationId: Line_MetaModes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
      deprecated: false
  /Line/Meta/ServiceTypes:
    get:
      tags:
        - Line
      summary: Gets a list of valid ServiceTypes to filter on
      operationId: Line_MetaServiceTypes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            application/xml:
              schema:
                type: array
                items:
                  type: string
            text/xml:
              schema:
                type: array
                items:
                  type: string
      deprecated: false
  /Line/Meta/Severity:
    get:
      tags:
        - Line
      summary: Gets a list of valid severity codes
      operationId: Line_MetaSeverity
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.StatusSeverity
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.StatusSeverity
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.StatusSeverity
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.StatusSeverity
      deprecated: false
  '/Line/Mode/{modes}':
    get:
      tags:
        - Line
      summary: Gets lines that serve the given modes.
      operationId: Line_GetByMode
      parameters:
        - name: modes
          in: path
          description: 'A comma-separated list of modes e.g. tube,dlr'
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
      deprecated: false
  '/Line/Mode/{modes}/Disruption':
    get:
      tags:
        - Line
      summary: Get disruptions for all lines of the given modes.
      operationId: Line_DisruptionByMode
      parameters:
        - name: modes
          in: path
          description: 'A comma-separated list of modes e.g. tube,dlr'
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Disruption
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Disruption
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Disruption
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Disruption
      deprecated: false
  '/Line/Mode/{modes}/Route':
    get:
      tags:
        - Line
      summary: >-
        Gets all lines and their valid routes for given modes, including the
        name and id of the originating and terminating stops for each route
      operationId: Line_RouteByMode
      parameters:
        - name: modes
          in: path
          description: 'A comma-separated list of modes e.g. tube,dlr'
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: serviceTypes
          in: query
          description: >-
            A comma seperated list of service types to filter on. Supported
            values: Regular, Night. Defaulted to 'Regular' if not specified
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - Regular
                - Night
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
      deprecated: false
  '/Line/Mode/{modes}/Status':
    get:
      tags:
        - Line
      summary: Gets the line status of for all lines for the given modes
      operationId: Line_StatusByMode
      parameters:
        - name: modes
          in: path
          description: 'A comma-separated list of modes to filter by. e.g. tube,dlr'
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: detail
          in: query
          description: >-
            Include details of the disruptions that are causing the line status
            including the affected stops and routes
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
      deprecated: false
  /Line/Route:
    get:
      tags:
        - Line
      summary: >-
        Get all valid routes for all lines, including the name and id of the
        originating and terminating stops for each route.
      operationId: Line_Route
      parameters:
        - name: serviceTypes
          in: query
          description: >-
            A comma seperated list of service types to filter on. Supported
            values: Regular, Night. Defaulted to 'Regular' if not specified
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - Regular
                - Night
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
      deprecated: false
  '/Line/Search/{query}':
    get:
      tags:
        - Line
      summary: Search for lines or routes matching the query string
      operationId: Line_Search
      parameters:
        - name: query
          in: path
          description: Search term e.g victoria
          required: true
          schema:
            type: string
        - name: modes
          in: query
          description: Optionally filter by the specified modes
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: serviceTypes
          in: query
          description: >-
            A comma seperated list of service types to filter on. Supported
            values: Regular, Night. Defaulted to 'Regular' if not specified
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - Regular
                - Night
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.RouteSearchResponse
            text/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.RouteSearchResponse
            application/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.RouteSearchResponse
            text/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.RouteSearchResponse
      deprecated: false
  '/Line/Status/{severity}':
    get:
      tags:
        - Line
      summary: "Gets the line status for all lines with a given severity\r\n            A list of valid severity codes can be obtained from a call to Line/Meta/Severity"
      operationId: Line_StatusBySeverity
      parameters:
        - name: severity
          in: path
          description: 'The level of severity (eg: a number from 0 to 14)'
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
      deprecated: false
  '/Line/{ids}':
    get:
      tags:
        - Line
      summary: Gets lines that match the specified line ids.
      operationId: Line_Get
      parameters:
        - name: ids
          in: path
          description: >-
            A comma-separated list of line ids e.g. victoria,circle,N133. Max.
            approx. 20 ids.
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
      deprecated: false
  '/Line/{ids}/Arrivals/{stopPointId}':
    get:
      tags:
        - Line
      summary: >-
        Get the list of arrival predictions for given line ids based at the
        given stop
      operationId: Line_Arrivals
      parameters:
        - name: ids
          in: path
          description: >-
            A comma-separated list of line ids e.g. victoria,circle,N133. Max.
            approx. 20 ids.
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: stopPointId
          in: path
          description: >-
            Optional. Id of stop to get arrival predictions for (station naptan
            code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query}
            endpoint to find a stop point id from a station name)
          required: true
          schema:
            type: string
        - name: direction
          in: query
          description: >-
            Optional. The direction of travel. Can be inbound or outbound or
            all. If left blank, and destinationStopId is set, will default to
            all
          schema:
            type: string
            enum:
              - inbound
              - outbound
              - all
        - name: destinationStationId
          in: query
          description: Optional. Id of destination stop
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Prediction
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Prediction
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Prediction
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Prediction
      deprecated: false
  '/Line/{ids}/Disruption':
    get:
      tags:
        - Line
      summary: Get disruptions for the given line ids
      operationId: Line_Disruption
      parameters:
        - name: ids
          in: path
          description: >-
            A comma-separated list of line ids e.g. victoria,circle,N133. Max.
            approx. 20 ids.
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Disruption
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Disruption
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Disruption
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Disruption
      deprecated: false
  '/Line/{ids}/Route':
    get:
      tags:
        - Line
      summary: >-
        Get all valid routes for given line ids, including the name and id of
        the originating and terminating stops for each route.
      operationId: Line_LineRoutesByIds
      parameters:
        - name: ids
          in: path
          description: >-
            A comma-separated list of line ids e.g. victoria,circle,N133. Max.
            approx. 20 ids.
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: serviceTypes
          in: query
          description: >-
            A comma seperated list of service types to filter on. Supported
            values: Regular, Night. Defaulted to 'Regular' if not specified
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - Regular
                - Night
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
      deprecated: false
  '/Line/{ids}/Status':
    get:
      tags:
        - Line
      summary: Gets the line status of for given line ids e.g Minor Delays
      operationId: Line_StatusByIds
      parameters:
        - name: ids
          in: path
          description: >-
            A comma-separated list of line ids e.g. victoria,circle,N133. Max.
            approx. 20 ids.
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: detail
          in: query
          description: >-
            Include details of the disruptions that are causing the line status
            including the affected stops and routes
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
      deprecated: false
  '/Line/{ids}/Status/{StartDate}/to/{EndDate}':
    get:
      tags:
        - Line
      summary: >-
        Gets the line status for given line ids during the provided dates e.g
        Minor Delays
      operationId: Line_Status
      parameters:
        - name: ids
          in: path
          description: >-
            A comma-separated list of line ids e.g. victoria,circle,N133. Max.
            approx. 20 ids.
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: detail
          in: query
          description: >-
            Include details of the disruptions that are causing the line status
            including the affected stops and routes
          schema:
            type: boolean
        - name: startDate
          in: query
          required: true
          schema:
            type: string
        - name: endDate
          in: query
          required: true
          schema:
            type: string
        - name: dateRange.startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: dateRange.endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: StartDate
          in: path
          required: true
          schema:
            type: string
        - name: EndDate
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
      deprecated: false
  '/Line/{id}/Route/Sequence/{direction}':
    get:
      tags:
        - Line
      summary: >-
        Gets all valid routes for given line id, including the sequence of stops
        on each route.
      operationId: Line_RouteSequence
      parameters:
        - name: id
          in: path
          description: A single line id e.g. victoria
          required: true
          schema:
            type: string
        - name: direction
          in: path
          description: The direction of travel. Can be inbound or outbound.
          required: true
          schema:
            type: string
            enum:
              - inbound
              - outbound
              - all
        - name: serviceTypes
          in: query
          description: >-
            A comma seperated list of service types to filter on. Supported
            values: Regular, Night. Defaulted to 'Regular' if not specified
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - Regular
                - Night
        - name: excludeCrowding
          in: query
          description: That excludes crowding from line disruptions. Can be true or false.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.RouteSequence
            text/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.RouteSequence
            application/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.RouteSequence
            text/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.RouteSequence
      deprecated: false
  '/Line/{id}/StopPoints':
    get:
      tags:
        - Line
      summary: Gets a list of the stations that serve the given line id
      operationId: Line_StopPoints
      parameters:
        - name: id
          in: path
          description: A single line id e.g. victoria
          required: true
          schema:
            type: string
        - name: tflOperatedNationalRailStationsOnly
          in: query
          description: >-
            If the national-rail line is requested, this flag will filter the
            national rail stations so that only those operated by TfL are
            returned
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
      deprecated: false
  '/Line/{id}/Timetable/{fromStopPointId}':
    get:
      tags:
        - Line
      summary: Gets the timetable for a specified station on the give line
      operationId: Line_Timetable
      parameters:
        - name: fromStopPointId
          in: path
          description: >-
            The originating station's stop point id (station naptan code e.g.
            940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find
            a stop point id from a station name)
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: A single line id e.g. victoria
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.TimetableResponse
            text/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.TimetableResponse
            application/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.TimetableResponse
            text/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.TimetableResponse
      deprecated: false
  '/Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}':
    get:
      tags:
        - Line
      summary: >-
        Gets the timetable for a specified station on the give line with
        specified destination
      operationId: Line_TimetableTo
      parameters:
        - name: fromStopPointId
          in: path
          description: >-
            The originating station's stop point id (station naptan code e.g.
            940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find
            a stop point id from a station name)
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: A single line id e.g. victoria
          required: true
          schema:
            type: string
        - name: toStopPointId
          in: path
          description: The destination stations's Naptan code
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.TimetableResponse
            text/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.TimetableResponse
            application/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.TimetableResponse
            text/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.TimetableResponse
      deprecated: false
  /Mode/ActiveServiceTypes:
    get:
      tags:
        - Mode
      summary: "Returns the service type active for a mode.\r\n            Currently only supports tube"
      operationId: Mode_GetActiveServiceTypes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.ActiveServiceType
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.ActiveServiceType
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.ActiveServiceType
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.ActiveServiceType
      deprecated: false
  '/Mode/{mode}/Arrivals':
    get:
      tags:
        - Mode
      summary: Gets the next arrival predictions for all stops of a given mode
      operationId: Mode_Arrivals
      parameters:
        - name: mode
          in: path
          description: 'A mode name e.g. tube, dlr'
          required: true
          schema:
            type: string
        - name: count
          in: query
          description: >-
            A number of arrivals to return for each stop, -1 to return all
            available.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Prediction
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Prediction
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Prediction
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Prediction
      deprecated: false
  '/Occupancy/BikePoints/{ids}':
    get:
      tags:
        - Occupancy
      summary: Get the occupancy for bike points.
      operationId: Occupancy_GetBikePointsOccupancies
      parameters:
        - name: ids
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.BikePointOccupancy
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.BikePointOccupancy
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.BikePointOccupancy
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.BikePointOccupancy
      deprecated: false
  /Occupancy/CarPark:
    get:
      tags:
        - Occupancy
      summary: Gets the occupancy for all car parks that have occupancy data
      operationId: Occupancy.CarPark.get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.CarParkOccupancy
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.CarParkOccupancy
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.CarParkOccupancy
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.CarParkOccupancy
      deprecated: false
  '/Occupancy/CarPark/{id}':
    get:
      tags:
        - Occupancy
      summary: Gets the occupancy for a car park with a given id
      operationId: Occupancy.CarPark.id.get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.CarParkOccupancy
            text/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.CarParkOccupancy
            application/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.CarParkOccupancy
            text/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.CarParkOccupancy
      deprecated: false
  /Occupancy/ChargeConnector:
    get:
      tags:
        - Occupancy
      summary: Gets the occupancy for all charge connectors
      operationId: Occupancy_GetAllChargeConnectorStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy
      deprecated: false
  '/Occupancy/ChargeConnector/{ids}':
    get:
      tags:
        - Occupancy
      summary: >-
        Gets the occupancy for a charge connectors with a given id
        (sourceSystemPlaceId)
      operationId: Occupancy_GetChargeConnectorStatus
      parameters:
        - name: ids
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy
      deprecated: false
  /Place:
    get:
      tags:
        - Place
      summary: "Gets the places that lie within a geographic region. The geographic region of interest can either be specified\r\n            by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of\r\n            its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.\r\n            Optionally filters on type and can strip properties for a smaller payload."
      operationId: Place_GetByGeo
      parameters:
        - name: radius
          in: query
          description: >-
            The radius of the bounding circle in metres when only lat/lon are
            specified.
          schema:
            type: number
            format: double
        - name: categories
          in: query
          description: >-
            An optional list of comma separated property categories to return in
            the Place's property bag. If null or empty, all categories of
            property are returned. Pass the keyword "none" to return no
            properties (a valid list of categories can be obtained from the
            /Place/Meta/categories endpoint)
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: includeChildren
          in: query
          description: >-
            Defaults to false. If true child places e.g. individual charging
            stations at a charge point while be included, otherwise just the
            URLs of any child places will be returned
          schema:
            type: boolean
        - name: type
          in: query
          description: 'Place types to filter on, or null to return all types'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: activeOnly
          in: query
          description: >-
            An optional parameter to limit the results to active records only
            (Currently only the 'VariableMessageSign' place type is supported)
          schema:
            type: boolean
        - name: numberOfPlacesToReturn
          in: query
          description: >-
            If specified, limits the number of returned places equal to the
            given value
          schema:
            type: integer
            format: int32
        - name: placeGeo.swLat
          in: query
          schema:
            type: number
            format: double
        - name: placeGeo.swLon
          in: query
          schema:
            type: number
            format: double
        - name: placeGeo.neLat
          in: query
          schema:
            type: number
            format: double
        - name: placeGeo.neLon
          in: query
          schema:
            type: number
            format: double
        - name: placeGeo.lat
          in: query
          schema:
            type: number
            format: double
        - name: placeGeo.lon
          in: query
          schema:
            type: number
            format: double
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
      deprecated: false
  '/Place/Address/Streets/{Postcode}':
    get:
      tags:
        - Place
      summary: Gets the set of streets associated with a post code.
      operationId: Place_GetStreetsByPostCode
      parameters:
        - name: postcode
          in: query
          required: true
          schema:
            type: string
        - name: postcodeInput.postcode
          in: query
          schema:
            pattern: >-
              ^(([gG][iI][rR]
              {0,}0[aA]{2})|((([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y]?[0-9][0-9]?)|(([a-pr-uwyzA-PR-UWYZ][0-9][a-hjkstuwA-HJKSTUW])|([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y][0-9][abehmnprv-yABEHMNPRV-Y])))
              {0,}[0-9][abd-hjlnp-uw-zABD-HJLNP-UW-Z]{2}))$
            type: string
        - name: Postcode
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
      deprecated: false
  /Place/Meta/Categories:
    get:
      tags:
        - Place
      summary: Gets a list of all of the available place property categories and keys.
      operationId: Place_MetaCategories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.PlaceCategory
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.PlaceCategory
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.PlaceCategory
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.PlaceCategory
      deprecated: false
  /Place/Meta/PlaceTypes:
    get:
      tags:
        - Place
      summary: Gets a list of the available types of Place.
      operationId: Place_MetaPlaceTypes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.PlaceCategory
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.PlaceCategory
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.PlaceCategory
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.PlaceCategory
      deprecated: false
  /Place/Search:
    get:
      tags:
        - Place
      summary: Gets all places that matches the given query
      operationId: Place_Search
      parameters:
        - name: name
          in: query
          description: >-
            The name of the place, you can use the /Place/Types/{types} endpoint
            to get a list of places for a given type including their names.
          required: true
          schema:
            type: string
        - name: types
          in: query
          description: A comma-separated list of the types to return. Max. approx 12 types.
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
      deprecated: false
  '/Place/Type/{types}':
    get:
      tags:
        - Place
      summary: Gets all places of a given type
      operationId: Place_GetByType
      parameters:
        - name: types
          in: path
          description: "A comma-separated list of the types to return. Max. approx 12 types.\r\n            A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint."
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: activeOnly
          in: query
          description: >-
            An optional parameter to limit the results to active records only
            (Currently only the 'VariableMessageSign' place type is supported)
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
      deprecated: false
  '/Place/{id}':
    get:
      tags:
        - Place
      summary: Gets the place with the given id.
      operationId: Place_Get
      parameters:
        - name: id
          in: path
          description: >-
            The id of the place, you can use the /Place/Types/{types} endpoint
            to get a list of places for a given type including their ids
          required: true
          schema:
            type: string
        - name: includeChildren
          in: query
          description: >-
            Defaults to false. If true child places e.g. individual charging
            stations at a charge point while be included, otherwise just the
            URLs of any child places will be returned
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
      deprecated: false
  '/Place/{type}/At/{Lat}/{Lon}':
    get:
      tags:
        - Place
      summary: "Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place\r\n            must be polygonal e.g. a BoroughBoundary."
      operationId: Place_GetAt
      parameters:
        - name: type
          in: path
          description: >-
            The place type (a valid list of place types can be obtained from the
            /Place/Meta/placeTypes endpoint)
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: lat
          in: query
          required: true
          schema:
            type: string
        - name: lon
          in: query
          required: true
          schema:
            type: string
        - name: location.lat
          in: query
          required: true
          schema:
            type: number
            format: double
        - name: location.lon
          in: query
          required: true
          schema:
            type: number
            format: double
        - name: Lat
          in: path
          required: true
          schema:
            type: string
        - name: Lon
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
      deprecated: false
  '/Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}':
    get:
      tags:
        - Place
      summary: >-
        Gets the place overlay for a given set of co-ordinates and a given
        width/height.
      operationId: Place_GetOverlay
      parameters:
        - name: z
          in: path
          description: The zoom level
          required: true
          schema:
            type: integer
            format: int32
        - name: type
          in: path
          description: >-
            The place type (a valid list of place types can be obtained from the
            /Place/Meta/placeTypes endpoint)
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: width
          in: path
          description: The width of the requested overlay.
          required: true
          schema:
            type: integer
            format: int32
        - name: height
          in: path
          description: The height of the requested overlay.
          required: true
          schema:
            type: integer
            format: int32
        - name: lat
          in: query
          required: true
          schema:
            type: string
        - name: lon
          in: query
          required: true
          schema:
            type: string
        - name: location.lat
          in: query
          required: true
          schema:
            type: number
            format: double
        - name: location.lon
          in: query
          required: true
          schema:
            type: number
            format: double
        - name: Lat
          in: path
          required: true
          schema:
            type: string
        - name: Lon
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
      deprecated: false
  /Road:
    get:
      tags:
        - Road
      summary: Gets all roads managed by TfL
      operationId: Road.get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor
      deprecated: false
  /Road/Meta/Categories:
    get:
      tags:
        - Road
      summary: Gets a list of valid RoadDisruption categories
      operationId: Road_MetaCategories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            application/xml:
              schema:
                type: array
                items:
                  type: string
            text/xml:
              schema:
                type: array
                items:
                  type: string
      deprecated: false
  /Road/Meta/Severities:
    get:
      tags:
        - Road
      summary: Gets a list of valid RoadDisruption severity codes
      operationId: Road_MetaSeverities
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.StatusSeverity
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.StatusSeverity
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.StatusSeverity
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.StatusSeverity
      deprecated: false
  '/Road/all/Disruption/{disruptionIds}':
    get:
      tags:
        - Road
      summary: Gets a list of active disruptions filtered by disruption Ids.
      operationId: Road_DisruptionById
      parameters:
        - name: disruptionIds
          in: path
          description: Comma-separated list of disruption identifiers to filter by.
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: stripContent
          in: query
          description: >-
            Optional, defaults to false. When true, removes every property/node
            except for id, point, severity, severityDescription, startDate,
            endDate, corridor details, location and comments.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruption
            text/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruption
            application/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruption
            text/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruption
            application/geo+json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruption
      deprecated: false
  /Road/all/Street/Disruption:
    get:
      tags:
        - Road
      summary: >-
        Gets a list of disrupted streets. If no date filters are provided,
        current disruptions are returned.
      operationId: Road_DisruptedStreets
      parameters:
        - name: startDate
          in: query
          description: 'Optional, the start time to filter on.'
          required: true
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: 'Optional, The end time to filter on.'
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
      deprecated: false
  '/Road/{ids}':
    get:
      tags:
        - Road
      summary: Gets the road with the specified id (e.g. A1)
      operationId: Road.ids.get
      parameters:
        - name: ids
          in: path
          description: >-
            Comma-separated list of road identifiers e.g. "A406, A2" (a full
            list of supported road identifiers can be found at the /Road/
            endpoint)
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor
      deprecated: false
  '/Road/{ids}/Disruption':
    get:
      tags:
        - Road
      summary: 'Get active disruptions, filtered by road ids'
      operationId: Road_Disruption
      parameters:
        - name: ids
          in: path
          description: >-
            Comma-separated list of road identifiers e.g. "A406, A2" use all for
            all to ignore id filter (a full list of supported road identifiers
            can be found at the /Road/ endpoint)
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: stripContent
          in: query
          description: >-
            Optional, defaults to false. When true, removes every property/node
            except for id, point, severity, severityDescription, startDate,
            endDate, corridor details, location, comments and streets
          schema:
            type: boolean
        - name: severities
          in: query
          description: >-
            an optional list of Severity names to filter on (a valid list of
            severities can be obtained from the /Road/Meta/severities endpoint)
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: categories
          in: query
          description: >-
            an optional list of category names to filter on (a valid list of
            categories can be obtained from the /Road/Meta/categories endpoint)
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: closures
          in: query
          description: >-
            Optional, defaults to true. When true, always includes disruptions
            that have road closures, regardless of the severity filter. When
            false, the severity filter works as normal.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruption
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruption
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruption
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruption
            application/geo+json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruption
      deprecated: false
  '/Road/{ids}/Status':
    get:
      tags:
        - Road
      summary: >-
        Gets the specified roads with the status aggregated over the date range
        specified, or now until the end of today if no dates are passed.
      operationId: Road_Status
      parameters:
        - name: ids
          in: path
          description: >-
            Comma-separated list of road identifiers e.g. "A406, A2" or use
            "all" to ignore id filter (a full list of supported road identifiers
            can be found at the /Road/ endpoint)
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: dateRangeNullable.startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: dateRangeNullable.endDate
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor
      deprecated: false
  /Search:
    get:
      tags:
        - Search
      summary: "Search the site for occurrences of the query string. The maximum number of results returned is equal to the maximum page size\r\n            of 100. To return subsequent pages, use the paginated overload."
      operationId: Search_Get
      parameters:
        - name: query
          in: query
          description: The search query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse
            text/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse
            application/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse
            text/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse
      deprecated: false
  /Search/BusSchedules:
    get:
      tags:
        - Search
      summary: Searches the bus schedules folder on S3 for a given bus number.
      operationId: Search_BusSchedules
      parameters:
        - name: query
          in: query
          description: The search query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse
            text/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse
            application/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse
            text/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse
      deprecated: false
  /Search/Meta/Categories:
    get:
      tags:
        - Search
      summary: Gets the available search categories.
      operationId: Search_MetaCategories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            application/xml:
              schema:
                type: array
                items:
                  type: string
            text/xml:
              schema:
                type: array
                items:
                  type: string
      deprecated: false
  /Search/Meta/SearchProviders:
    get:
      tags:
        - Search
      summary: Gets the available searchProvider names.
      operationId: Search_MetaSearchProviders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            application/xml:
              schema:
                type: array
                items:
                  type: string
            text/xml:
              schema:
                type: array
                items:
                  type: string
      deprecated: false
  /Search/Meta/Sorts:
    get:
      tags:
        - Search
      summary: Gets the available sorting options.
      operationId: Search_MetaSorts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            application/xml:
              schema:
                type: array
                items:
                  type: string
            text/xml:
              schema:
                type: array
                items:
                  type: string
      deprecated: false
  /StopPoint:
    get:
      tags:
        - StopPoint
      summary: 'Gets a list of StopPoints within {radius} by the specified criteria'
      operationId: StopPoint_GetByGeoPoint
      parameters:
        - name: stopTypes
          in: query
          description: >-
            a list of stopTypes that should be returned (a list of valid stop
            types can be obtained from the StopPoint/meta/stoptypes endpoint)
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: radius
          in: query
          description: 'the radius of the bounding circle in metres (default : 200)'
          schema:
            type: integer
            format: int32
        - name: useStopPointHierarchy
          in: query
          description: Re-arrange the output into a parent/child hierarchy
          schema:
            type: boolean
        - name: modes
          in: query
          description: >-
            the list of modes to search (comma separated mode names e.g.
            tube,dlr)
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: categories
          in: query
          description: >-
            an optional list of comma separated property categories to return in
            the StopPoint's property bag. If null or empty, all categories of
            property are returned. Pass the keyword "none" to return no
            properties (a valid list of categories can be obtained from the
            /StopPoint/Meta/categories endpoint)
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: returnLines
          in: query
          description: >-
            true to return the lines that each stop point serves as a nested
            resource
          schema:
            type: boolean
        - name: location.lat
          in: query
          required: true
          schema:
            type: number
            format: double
        - name: location.lon
          in: query
          required: true
          schema:
            type: number
            format: double
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.StopPointsResponse
            text/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.StopPointsResponse
            application/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.StopPointsResponse
            text/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.StopPointsResponse
      deprecated: false
  /StopPoint/Meta/Categories:
    get:
      tags:
        - StopPoint
      summary: Gets the list of available StopPoint additional information categories
      operationId: StopPoint_MetaCategories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.StopPointCategory
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.StopPointCategory
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.StopPointCategory
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.StopPointCategory
      deprecated: false
  /StopPoint/Meta/Modes:
    get:
      tags:
        - StopPoint
      summary: Gets the list of available StopPoint modes
      operationId: StopPoint_MetaModes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
      deprecated: false
  /StopPoint/Meta/StopTypes:
    get:
      tags:
        - StopPoint
      summary: Gets the list of available StopPoint types
      operationId: StopPoint_MetaStopTypes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            application/xml:
              schema:
                type: array
                items:
                  type: string
            text/xml:
              schema:
                type: array
                items:
                  type: string
      deprecated: false
  '/StopPoint/Mode/{modes}':
    get:
      tags:
        - StopPoint
      summary: >-
        Gets a list of StopPoints filtered by the modes available at that
        StopPoint.
      operationId: StopPoint_GetByMode
      parameters:
        - name: modes
          in: path
          description: 'A comma-seperated list of modes e.g. tube,dlr'
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: page
          in: query
          description: >-
            The data set page to return. Page 1 equates to the first 1000 stop
            points, page 2 equates to 1001-2000 etc. Must be entered for bus
            mode as data set is too large.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.StopPointsResponse
            text/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.StopPointsResponse
            application/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.StopPointsResponse
            text/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.StopPointsResponse
      deprecated: false
  '/StopPoint/Mode/{modes}/Disruption':
    get:
      tags:
        - StopPoint
      summary: Gets a distinct list of disrupted stop points for the given modes
      operationId: StopPoint_DisruptionByMode
      parameters:
        - name: modes
          in: path
          description: 'A comma-seperated list of modes e.g. tube,dlr'
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: includeRouteBlockedStops
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.DisruptedPoint
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.DisruptedPoint
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.DisruptedPoint
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.DisruptedPoint
      deprecated: false
  /StopPoint/Search:
    get:
      tags:
        - StopPoint
      summary: >-
        Search StopPoints by their common name, or their 5-digit Countdown Bus
        Stop Code.
      operationId: StopPoint.Search.get
      parameters:
        - name: query
          in: query
          description: >-
            The query string, case-insensitive. Leading and trailing wildcards
            are applied automatically.
          required: true
          schema:
            type: string
        - name: modes
          in: query
          description: 'An optional, parameter separated list of the modes to filter by'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: faresOnly
          in: query
          description: >-
            True to only return stations in that have Fares data available for
            single fares to another station.
          schema:
            type: boolean
        - name: maxResults
          in: query
          description: "An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,\r\n            it is possible that the flattened result set will contain more than 50 items."
          schema:
            type: integer
            format: int32
        - name: lines
          in: query
          description: 'An optional, parameter separated list of the lines to filter by'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: includeHubs
          in: query
          description: 'If true, returns results including HUBs.'
          schema:
            type: boolean
        - name: tflOperatedNationalRailStationsOnly
          in: query
          description: >-
            If the national-rail mode is included, this flag will filter the
            national rail stations so that only those operated by TfL are
            returned
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse
            text/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse
            application/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse
            text/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse
      deprecated: false
  '/StopPoint/Search/{query}':
    get:
      tags:
        - StopPoint
      summary: >-
        Search StopPoints by their common name, or their 5-digit Countdown Bus
        Stop Code.
      operationId: StopPoint.Search.query.get
      parameters:
        - name: query
          in: path
          description: >-
            The query string, case-insensitive. Leading and trailing wildcards
            are applied automatically.
          required: true
          schema:
            type: string
        - name: modes
          in: query
          description: 'An optional, parameter separated list of the modes to filter by'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: faresOnly
          in: query
          description: >-
            True to only return stations in that have Fares data available for
            single fares to another station.
          schema:
            type: boolean
        - name: maxResults
          in: query
          description: "An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,\r\n            it is possible that the flattened result set will contain more than 50 items."
          schema:
            type: integer
            format: int32
        - name: lines
          in: query
          description: 'An optional, parameter separated list of the lines to filter by'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: includeHubs
          in: query
          description: 'If true, returns results including HUBs.'
          schema:
            type: boolean
        - name: tflOperatedNationalRailStationsOnly
          in: query
          description: >-
            If the national-rail mode is included, this flag will filter the
            national rail stations so that only those operated by TfL are
            returned
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse
            text/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse
            application/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse
            text/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse
      deprecated: false
  /StopPoint/ServiceTypes:
    get:
      tags:
        - StopPoint
      summary: Gets the service types for a given stoppoint
      operationId: StopPoint_GetServiceTypes
      parameters:
        - name: id
          in: query
          description: The Naptan id of the stop
          required: true
          schema:
            type: string
        - name: lineIds
          in: query
          description: >-
            The lines which contain the given Naptan id (all lines relevant to
            the given stoppoint if empty)
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: modes
          in: query
          description: The modes which the lines are relevant to (all if empty)
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.LineServiceType
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.LineServiceType
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.LineServiceType
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.LineServiceType
      deprecated: false
  '/StopPoint/Sms/{id}':
    get:
      tags:
        - StopPoint
      summary: Gets a StopPoint for a given sms code.
      operationId: StopPoint_GetBySms
      parameters:
        - name: id
          in: path
          description: 'A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334.'
          required: true
          schema:
            type: string
        - name: output
          in: query
          description: >-
            If set to "web", a 302 redirect to relevant website bus stop page is
            returned. Valid values are : web. All other values are ignored.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
      deprecated: false
  '/StopPoint/Type/{types}':
    get:
      tags:
        - StopPoint
      summary: Gets all stop points of a given type
      operationId: StopPoint_GetByType
      parameters:
        - name: types
          in: path
          description: "A comma-separated list of the types to return. Max. approx. 12 types. \r\n            A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint."
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
      deprecated: false
  '/StopPoint/Type/{types}/page/{page}':
    get:
      tags:
        - StopPoint
      summary: Gets all the stop points of given type(s) with a page number
      operationId: StopPoint_GetByTypeWithPagination
      parameters:
        - name: types
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: page
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
      deprecated: false
  '/StopPoint/{ids}':
    get:
      tags:
        - StopPoint
      summary: Gets a list of StopPoints corresponding to the given list of stop ids.
      operationId: StopPoint.ids.get
      parameters:
        - name: ids
          in: path
          description: "A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.\r\n            You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name."
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: includeCrowdingData
          in: query
          description: >-
            Include the crowding data (static). To Filter further use:
            /StopPoint/{ids}/Crowding/{line}
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
      deprecated: false
  '/StopPoint/{ids}/Disruption':
    get:
      tags:
        - StopPoint
      summary: >-
        Gets all disruptions for the specified StopPointId, plus disruptions for
        any child Naptan records it may have.
      operationId: StopPoint_Disruption
      parameters:
        - name: ids
          in: path
          description: "A comma-seperated list of stop point ids. Max. approx. 20 ids.\r\n            You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name."
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: getFamily
          in: query
          description: >-
            Specify true to return disruptions for entire family, or false to
            return disruptions for just this stop point. Defaults to false.
          schema:
            type: boolean
        - name: includeRouteBlockedStops
          in: query
          schema:
            type: boolean
        - name: flattenResponse
          in: query
          description: >-
            Specify true to associate all disruptions with parent stop point.
            (Only applicable when getFamily is true).
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.DisruptedPoint
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.DisruptedPoint
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.DisruptedPoint
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.DisruptedPoint
      deprecated: false
  '/StopPoint/{id}/ArrivalDepartures':
    get:
      tags:
        - StopPoint
      summary: >-
        Gets the list of arrival and departure predictions for the given stop
        point id (overground and tfl rail only)
      operationId: StopPoint_ArrivalDepartures
      parameters:
        - name: id
          in: path
          description: >-
            A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use
            /StopPoint/Search/{query} endpoint to find a stop point id from a
            station name)
          required: true
          schema:
            type: string
        - name: lineIds
          in: query
          description: 'A comma-separated list of line ids e.g. tfl-rail, london-overground'
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.ArrivalDeparture
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.ArrivalDeparture
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.ArrivalDeparture
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.ArrivalDeparture
      deprecated: false
  '/StopPoint/{id}/Arrivals':
    get:
      tags:
        - StopPoint
      summary: Gets the list of arrival predictions for the given stop point id
      operationId: StopPoint_Arrivals
      parameters:
        - name: id
          in: path
          description: >-
            A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use
            /StopPoint/Search/{query} endpoint to find a stop point id from a
            station name)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Prediction
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Prediction
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Prediction
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Prediction
      deprecated: false
  '/StopPoint/{id}/CanReachOnLine/{lineId}':
    get:
      tags:
        - StopPoint
      summary: Gets Stopoints that are reachable from a station/line combination.
      operationId: StopPoint_ReachableFrom
      parameters:
        - name: id
          in: path
          description: >-
            The id (station naptan code e.g. 940GZZLUASL, you can use
            /StopPoint/Search/{query} endpoint to find a stop point id from a
            station name) of the stop point to filter by
          required: true
          schema:
            type: string
        - name: lineId
          in: path
          description: Line id of the line to filter by (e.g. victoria)
          required: true
          schema:
            type: string
        - name: serviceTypes
          in: query
          description: >-
            A comma-separated list of service types to filter on. If not
            specified. Supported values: Regular, Night. Defaulted to 'Regular'
            if not specified
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - Regular
                - Night
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
      deprecated: false
  '/StopPoint/{id}/Crowding/{line}':
    get:
      tags:
        - StopPoint
      summary: >-
        Gets all the Crowding data (static) for the StopPointId, plus crowding
        data for a given line and optionally a particular direction.
      operationId: StopPoint_Crowding
      parameters:
        - name: id
          in: path
          description: The Naptan id of the stop
          required: true
          schema:
            type: string
        - name: line
          in: path
          description: 'A particular line e.g. victoria, circle, northern etc.'
          required: true
          schema:
            type: string
        - name: direction
          in: query
          description: The direction of travel. Can be inbound or outbound.
          required: true
          schema:
            type: string
            enum:
              - inbound
              - outbound
              - all
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
      deprecated: false
  '/StopPoint/{id}/DirectionTo/{toStopPointId}':
    get:
      tags:
        - StopPoint
      summary: >-
        Returns the canonical direction, "inbound" or "outbound", for a given
        pair of stop point Ids in the direction from -&gt; to.
      operationId: StopPoint_Direction
      parameters:
        - name: id
          in: path
          description: >-
            Originating stop id (station naptan code e.g. 940GZZLUASL, you can
            use /StopPoint/Search/{query} endpoint to find a stop point id from
            a station name)
          required: true
          schema:
            type: string
        - name: toStopPointId
          in: path
          description: >-
            Destination stop id (station naptan code e.g. 940GZZLUASL, you can
            use /StopPoint/Search/{query} endpoint to find a stop point id from
            a station name)
          required: true
          schema:
            type: string
        - name: lineId
          in: query
          description: Optional line id filter e.g. victoria
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
            text/xml:
              schema:
                type: string
      deprecated: false
  '/StopPoint/{id}/Route':
    get:
      tags:
        - StopPoint
      summary: >-
        Returns the route sections for all the lines that service the given stop
        point ids
      operationId: StopPoint_Route
      parameters:
        - name: id
          in: path
          description: >-
            A stop point id (station naptan codes e.g. 940GZZLUASL, you can use
            /StopPoint/Search/{query} endpoint to find a stop point id from a
            station name)
          required: true
          schema:
            type: string
        - name: serviceTypes
          in: query
          description: >-
            A comma-separated list of service types to filter on. If not
            specified. Supported values: Regular, Night. Defaulted to 'Regular'
            if not specified
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - Regular
                - Night
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.StopPointRouteSection
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.StopPointRouteSection
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.StopPointRouteSection
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.StopPointRouteSection
      deprecated: false
  '/StopPoint/{id}/placeTypes':
    get:
      tags:
        - StopPoint
      summary: Get a list of places corresponding to a given id and place types.
      operationId: StopPoint.id.placeTypes.get
      parameters:
        - name: id
          in: path
          description: A naptan id for a stop point (station naptan code e.g. 940GZZLUASL).
          required: true
          schema:
            type: string
        - name: placeTypes
          in: query
          description: A comcomma-separated value representing the place types.
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
      deprecated: false
  '/StopPoint/{stopPointId}/CarParks':
    get:
      tags:
        - StopPoint
      summary: Get car parks corresponding to the given stop point id.
      operationId: StopPoint_GetCarParksById
      parameters:
        - name: stopPointId
          in: path
          description: stopPointId is required to get the car parks.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
      deprecated: false
  '/StopPoint/{stopPointId}/TaxiRanks':
    get:
      tags:
        - StopPoint
      summary: Gets a list of taxi ranks corresponding to the given stop point id.
      operationId: StopPoint_GetTaxiRanksByIds
      parameters:
        - name: stopPointId
          in: path
          description: stopPointId is required to get the taxi ranks.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
      deprecated: false
  '/TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}':
    get:
      tags:
        - TravelTime
      summary: Gets the TravelTime overlay.
      operationId: TravelTime_GetCompareOverlay
      parameters:
        - name: z
          in: path
          description: The zoom level.
          required: true
          schema:
            type: integer
            format: int32
        - name: pinLat
          in: path
          description: The latitude of the pin.
          required: true
          schema:
            type: number
            format: double
        - name: pinLon
          in: path
          description: The longitude of the pin.
          required: true
          schema:
            type: number
            format: double
        - name: mapCenterLat
          in: path
          description: The map center latitude.
          required: true
          schema:
            type: number
            format: double
        - name: mapCenterLon
          in: path
          description: The map center longitude.
          required: true
          schema:
            type: number
            format: double
        - name: scenarioTitle
          in: query
          description: The title of the scenario.
          required: true
          schema:
            type: string
        - name: timeOfDayId
          in: query
          description: The id for the time of day (AM/INTER/PM)
          required: true
          schema:
            type: string
        - name: modeId
          in: query
          description: The id of the mode.
          required: true
          schema:
            type: string
        - name: width
          in: path
          description: The width of the requested overlay.
          required: true
          schema:
            type: integer
            format: int32
        - name: height
          in: path
          description: The height of the requested overlay.
          required: true
          schema:
            type: integer
            format: int32
        - name: direction
          in: query
          description: The direction of travel.
          required: true
          schema:
            type: string
            enum:
              - Average
              - From
              - To
        - name: travelTimeInterval
          in: query
          description: The total minutes between the travel time bands
          required: true
          schema:
            type: integer
            format: int32
        - name: compareType
          in: query
          required: true
          schema:
            type: string
        - name: compareValue
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
      deprecated: false
  '/TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}':
    get:
      tags:
        - TravelTime
      summary: Gets the TravelTime overlay.
      operationId: TravelTime_GetOverlay
      parameters:
        - name: z
          in: path
          description: The zoom level.
          required: true
          schema:
            type: integer
            format: int32
        - name: pinLat
          in: path
          description: The latitude of the pin.
          required: true
          schema:
            type: number
            format: double
        - name: pinLon
          in: path
          description: The longitude of the pin.
          required: true
          schema:
            type: number
            format: double
        - name: mapCenterLat
          in: path
          description: The map center latitude.
          required: true
          schema:
            type: number
            format: double
        - name: mapCenterLon
          in: path
          description: The map center longitude.
          required: true
          schema:
            type: number
            format: double
        - name: scenarioTitle
          in: query
          description: The title of the scenario.
          required: true
          schema:
            type: string
        - name: timeOfDayId
          in: query
          description: The id for the time of day (AM/INTER/PM)
          required: true
          schema:
            type: string
        - name: modeId
          in: query
          description: The id of the mode.
          required: true
          schema:
            type: string
        - name: width
          in: path
          description: The width of the requested overlay.
          required: true
          schema:
            type: integer
            format: int32
        - name: height
          in: path
          description: The height of the requested overlay.
          required: true
          schema:
            type: integer
            format: int32
        - name: direction
          in: query
          description: The direction of travel.
          required: true
          schema:
            type: string
            enum:
              - Average
              - From
              - To
        - name: travelTimeInterval
          in: query
          description: The total minutes between the travel time bands
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
      deprecated: false
  /Vehicle/EmissionSurcharge:
    get:
      tags:
        - Vehicle
      summary: Gets the Emissions Surcharge compliance for the Vehicle
      operationId: Vehicle_GetEmissionsSurchargeCompliance
      parameters:
        - name: vrm
          in: query
          description: The Vehicle Registration Mark
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.VehicleMatch
            text/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.VehicleMatch
            application/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.VehicleMatch
            text/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.VehicleMatch
      deprecated: false
  /Vehicle/UlezCompliance:
    get:
      tags:
        - Vehicle
      summary: Gets the Ulez Surcharge compliance for the Vehicle
      operationId: Vehicle_GetUlezCompliance
      parameters:
        - name: vrm
          in: query
          description: The Vehicle Registration Mark
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.VehicleMatch
            text/json:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.VehicleMatch
            application/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.VehicleMatch
            text/xml:
              schema:
                $ref: >-
                  #/components/schemas/Tfl.Api.Presentation.Entities.VehicleMatch
      deprecated: false
  '/Vehicle/{ids}/Arrivals':
    get:
      tags:
        - Vehicle
      summary: Gets the predictions for a given list of vehicle Id's.
      operationId: Vehicle_Get
      parameters:
        - name: ids
          in: path
          description: >-
            A comma-separated list of vehicle ids e.g. LX58CFV,LX11AZB,LX58CFE.
            Max approx. 25 ids.
          required: true
          style: simple
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Prediction
            text/json:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Prediction
            application/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Prediction
            text/xml:
              schema:
                type: array
                items:
                  $ref: >-
                    #/components/schemas/Tfl.Api.Presentation.Entities.Prediction
      deprecated: false
components:
  schemas:
    System.Data.Spatial.DbGeography:
      type: object
      properties:
        geography:
          $ref: '#/components/schemas/System.Data.Spatial.DbGeographyWellKnownValue'
    System.Data.Spatial.DbGeographyWellKnownValue:
      type: object
      properties:
        coordinateSystemId:
          type: integer
          format: int32
        wellKnownBinary:
          pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$'
          type: string
          format: byte
        wellKnownText:
          type: string
    System.Object:
      type: object
    Tfl.Api.Common.ApiVersionInfo:
      type: object
      properties:
        assemblies:
          type: array
          items:
            type: string
        label:
          type: string
        timestamp:
          type: string
          format: date-time
        version:
          type: string
    Tfl.Api.Common.DateRange:
      type: object
      properties:
        endDate:
          type: string
          format: date-time
        startDate:
          type: string
          format: date-time
    Tfl.Api.Common.DateRangeNullable:
      type: object
      properties:
        endDate:
          type: string
          format: date-time
        startDate:
          type: string
          format: date-time
    Tfl.Api.Common.GeoPoint:
      required:
        - lat
        - lon
      type: object
      properties:
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
    Tfl.Api.Common.JourneyPlanner.JpElevation:
      type: object
      properties:
        distance:
          type: integer
          format: int32
        endLat:
          type: number
          format: double
        endLon:
          type: number
          format: double
        gradient:
          type: number
          format: double
        heightFromPreviousPoint:
          type: integer
          format: int32
        startLat:
          type: number
          format: double
        startLon:
          type: number
          format: double
    Tfl.Api.Common.PlaceGeo:
      type: object
      properties:
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        neLat:
          type: number
          format: double
        neLon:
          type: number
          format: double
        swLat:
          type: number
          format: double
        swLon:
          type: number
          format: double
    Tfl.Api.Common.PostcodeInput:
      type: object
      properties:
        postcode:
          pattern: >-
            ^(([gG][iI][rR]
            {0,}0[aA]{2})|((([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y]?[0-9][0-9]?)|(([a-pr-uwyzA-PR-UWYZ][0-9][a-hjkstuwA-HJKSTUW])|([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y][0-9][abehmnprv-yABEHMNPRV-Y])))
            {0,}[0-9][abd-hjlnp-uw-zABD-HJLNP-UW-Z]{2}))$
          type: string
    Tfl.Api.Presentation.Entities.AccidentStats.AccidentDetail:
      type: object
      properties:
        borough:
          type: string
        casualties:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.AccidentStats.Casualty
        date:
          type: string
          format: date-time
        id:
          type: integer
          format: int32
        lat:
          type: number
          format: double
        location:
          type: string
        lon:
          type: number
          format: double
        severity:
          type: string
        vehicles:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.AccidentStats.Vehicle
    Tfl.Api.Presentation.Entities.AccidentStats.AccidentStatsOrderedSummary:
      type: object
      properties:
        accidents:
          type: integer
          format: int32
        borough:
          type: string
        year:
          type: integer
          format: int32
    Tfl.Api.Presentation.Entities.AccidentStats.Casualty:
      type: object
      properties:
        age:
          type: integer
          format: int32
        ageBand:
          type: string
        class:
          type: string
        mode:
          type: string
        severity:
          type: string
    Tfl.Api.Presentation.Entities.AccidentStats.Vehicle:
      type: object
      properties:
        type:
          type: string
    Tfl.Api.Presentation.Entities.ActiveServiceType:
      type: object
      properties:
        mode:
          type: string
        serviceType:
          type: string
    Tfl.Api.Presentation.Entities.AdditionalProperties:
      type: object
      properties:
        category:
          type: string
        key:
          type: string
        modified:
          type: string
          format: date-time
        sourceSystemKey:
          type: string
        value:
          type: string
    Tfl.Api.Presentation.Entities.ArrivalDeparture:
      type: object
      properties:
        cause:
          type: string
          description: Reason for cancellation or delay
        departureStatus:
          type: string
          description: Status of departure
          enum:
            - OnTime
            - Delayed
            - Cancelled
            - NotStoppingAtStation
        destinationName:
          type: string
          description: Name of the destination
        destinationNaptanId:
          type: string
          description: Naptan Identifier for the prediction's destination
        estimatedTimeOfArrival:
          type: string
          description: Estimated time of arrival
          format: date-time
        estimatedTimeOfDeparture:
          type: string
          description: Estimated time of arrival
          format: date-time
        minutesAndSecondsToArrival:
          type: string
          description: Estimated time of arrival
        minutesAndSecondsToDeparture:
          type: string
          description: Estimated time of arrival
        naptanId:
          type: string
          description: Identifier for the prediction
        platformName:
          type: string
          description: 'Platform name (for bus, this is the stop letter)'
        scheduledTimeOfArrival:
          type: string
          description: Estimated time of arrival
          format: date-time
        scheduledTimeOfDeparture:
          type: string
          description: Estimated time of arrival
          format: date-time
        stationName:
          type: string
          description: Station name
        timing:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.PredictionTiming'
      description: DTO to capture the prediction details
    Tfl.Api.Presentation.Entities.Bay:
      type: object
      properties:
        bayCount:
          type: integer
          format: int32
        bayType:
          type: string
        free:
          type: integer
          format: int32
        occupied:
          type: integer
          format: int32
    Tfl.Api.Presentation.Entities.BikePointOccupancy:
      type: object
      properties:
        bikesCount:
          type: integer
          description: Total bike counts
          format: int32
        emptyDocks:
          type: integer
          description: Empty docks
          format: int32
        id:
          type: string
          description: Id of the bike point such as BikePoints_1
        name:
          type: string
          description: Name / Common name of the bike point
        totalDocks:
          type: integer
          description: Total docks available
          format: int32
      description: Bike point occupancy
    Tfl.Api.Presentation.Entities.CarParkOccupancy:
      type: object
      properties:
        bays:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Bay'
        carParkDetailsUrl:
          type: string
        id:
          type: string
        name:
          type: string
    Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy:
      type: object
      properties:
        id:
          type: integer
          description: ''
          format: int32
        sourceSystemPlaceId:
          type: string
          description: ''
        status:
          type: string
          description: ''
      description: ''
    Tfl.Api.Presentation.Entities.Coordinate:
      type: object
      properties:
        easting:
          type: number
          format: double
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        northing:
          type: number
          format: double
        xCoord:
          type: integer
          format: int32
        yCoord:
          type: integer
          format: int32
    Tfl.Api.Presentation.Entities.Crowding:
      type: object
      properties:
        passengerFlows:
          type: array
          description: Busiest times at a station (static information)
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.PassengerFlow'
        trainLoadings:
          type: array
          description: >-
            Train Loading on a scale 1-6, 1 being "Very quiet" and 6 being
            "Exceptionally busy" (static information)
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.TrainLoading'
    Tfl.Api.Presentation.Entities.CycleSuperhighway:
      type: object
      properties:
        geography:
          $ref: '#/components/schemas/System.Data.Spatial.DbGeography'
        id:
          type: string
          description: The Id
        label:
          type: string
          description: The long label to show on maps when zoomed in
        labelShort:
          type: string
          description: The short label to show on maps
        modified:
          type: string
          description: When the data was last updated
          format: date-time
        routeType:
          type: string
          description: >-
            Type of cycle route e.g CycleSuperhighways, Quietways, MiniHollands
            etc
          enum:
            - Unknown
            - All
            - Cycle Superhighways
            - Quietways
            - Cycleways
            - Mini-Hollands
            - Central London Grid
        segmented:
          type: boolean
          description: True if the route is split into segments
        status:
          type: string
          description: 'Cycle route status i.e Proposed, Existing etc'
          enum:
            - Unknown
            - All
            - Open
            - In Progress
            - Planned
            - Planned - Subject to feasibility and consultation.
            - Not Open
      description: ''
    Tfl.Api.Presentation.Entities.DisruptedPoint:
      type: object
      properties:
        additionalInformation:
          type: string
        appearance:
          type: string
        atcoCode:
          type: string
        commonName:
          type: string
        description:
          type: string
        fromDate:
          type: string
          format: date-time
        mode:
          type: string
        stationAtcoCode:
          type: string
        toDate:
          type: string
          format: date-time
        type:
          type: string
    Tfl.Api.Presentation.Entities.Disruption:
      type: object
      properties:
        additionalInfo:
          type: string
          description: Gets or sets the additionaInfo of this disruption.
        affectedRoutes:
          type: array
          description: Gets or sets the routes affected by this disruption
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RouteSection'
        affectedStops:
          type: array
          description: Gets or sets the stops affected by this disruption
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
        category:
          type: string
          description: Gets or sets the category of this dispruption.
          enum:
            - Undefined
            - RealTime
            - PlannedWork
            - Information
            - Event
            - Crowding
            - StatusAlert
        categoryDescription:
          type: string
          description: Gets or sets the description of the category.
        closureText:
          type: string
          description: Text describing the closure type
        created:
          type: string
          description: Gets or sets the date/time when this disruption was created.
          format: date-time
        description:
          type: string
          description: Gets or sets the description of this disruption.
        lastUpdate:
          type: string
          description: Gets or sets the date/time when this disruption was last updated.
          format: date-time
        summary:
          type: string
          description: Gets or sets the summary of this disruption.
        type:
          type: string
          description: Gets or sets the disruption type of this dispruption.
      description: Represents a disruption to a route within the transport network.
    Tfl.Api.Presentation.Entities.Fares.Fare:
      type: object
      properties:
        cap:
          type: number
          format: double
        cost:
          type: string
        description:
          type: string
        id:
          type: integer
          format: int32
        mode:
          type: string
        passengerType:
          type: string
        ticketTime:
          type: string
        ticketType:
          type: string
        validFrom:
          type: string
          format: date-time
        validUntil:
          type: string
          format: date-time
        zone:
          type: string
    Tfl.Api.Presentation.Entities.Fares.FareBounds:
      type: object
      properties:
        description:
          type: string
        displayName:
          type: string
        displayOrder:
          type: integer
          format: int32
        from:
          type: string
        id:
          type: integer
          format: int32
        isPopularFare:
          type: boolean
        isPopularTravelCard:
          type: boolean
        isTour:
          type: boolean
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Message'
        operator:
          type: string
        routeCode:
          type: string
        to:
          type: string
        via:
          type: string
    Tfl.Api.Presentation.Entities.Fares.FareDetails:
      type: object
      properties:
        boundsId:
          type: integer
          format: int32
        contactlessPAYGOnlyFare:
          type: boolean
        displayName:
          type: string
        displayOrder:
          type: integer
          format: int32
        endDate:
          type: string
          format: date-time
        from:
          type: string
        fromStation:
          type: string
        isTour:
          type: boolean
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Message'
        mode:
          type: string
        operator:
          type: string
        passengerType:
          type: string
        routeCode:
          type: string
        routeDescription:
          type: string
        specialFare:
          type: boolean
        startDate:
          type: string
          format: date-time
        throughFare:
          type: boolean
        ticketsAvailable:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Fares.Ticket'
        to:
          type: string
        toStation:
          type: string
        validatorInformation:
          type: string
        via:
          type: string
    Tfl.Api.Presentation.Entities.Fares.FareStation:
      type: object
      properties:
        atcoCode:
          type: string
        commonName:
          type: string
        fareCategory:
          type: string
          enum:
            - Cash
            - Oyster
            - Contactless
            - ContactlessOnly
            - All
    Tfl.Api.Presentation.Entities.Fares.FaresMode:
      type: object
      properties:
        description:
          type: string
        id:
          type: integer
          format: int32
        name:
          type: string
    Tfl.Api.Presentation.Entities.Fares.FaresPeriod:
      type: object
      properties:
        endDate:
          type: string
          format: date-time
        id:
          type: integer
          format: int32
        isFuture:
          type: boolean
        startDate:
          type: string
          format: date-time
        viewableDate:
          type: string
          format: date-time
    Tfl.Api.Presentation.Entities.Fares.FaresSection:
      type: object
      properties:
        header:
          type: string
        index:
          type: integer
          format: int32
        journey:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Fares.Journey'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Message'
        rows:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.Fares.FareDetails
    Tfl.Api.Presentation.Entities.Fares.Journey:
      type: object
      properties:
        fromStation:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Fares.FareStation'
        toStation:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Fares.FareStation'
    Tfl.Api.Presentation.Entities.Fares.PassengerType:
      type: object
      properties:
        description:
          type: string
        displayName:
          type: string
        displayOrder:
          type: integer
          format: int32
        type:
          type: string
    Tfl.Api.Presentation.Entities.Fares.Recommendation:
      type: object
      properties:
        cost:
          type: string
        discountCard:
          type: string
        fareType:
          type: string
        gettingYourTicket:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Message'
        id:
          type: integer
          format: int32
        keyFeatures:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Message'
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Message'
        priceComparison:
          type: string
        priceDescription:
          type: string
        product:
          type: string
        productType:
          type: string
        rank:
          type: integer
          format: int32
        recommendedTopUp:
          type: string
        rule:
          type: integer
          format: int32
        singleFare:
          type: number
          format: double
        ticketTime:
          type: string
        ticketType:
          type: string
        zones:
          type: string
    Tfl.Api.Presentation.Entities.Fares.RecommendationResponse:
      type: object
      properties:
        recommendations:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.Fares.Recommendation
    Tfl.Api.Presentation.Entities.Fares.Ticket:
      type: object
      properties:
        cost:
          type: string
        description:
          type: string
        displayOrder:
          type: integer
          format: int32
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Message'
        mode:
          type: string
        passengerType:
          type: string
        ticketTime:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Fares.TicketTime'
        ticketType:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Fares.TicketType'
    Tfl.Api.Presentation.Entities.Fares.TicketTime:
      type: object
      properties:
        description:
          type: string
        type:
          type: string
    Tfl.Api.Presentation.Entities.Fares.TicketType:
      type: object
      properties:
        description:
          type: string
        type:
          type: string
    Tfl.Api.Presentation.Entities.GeoCodeSearchMatch:
      type: object
      properties:
        address:
          type: string
          description: >-
            A string describing the formatted address of the place. Adds
            additional context to the place's Name.
        id:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        name:
          type: string
        types:
          type: array
          description: The type of the place e.g. "street_address"
          items:
            type: string
        url:
          type: string
    Tfl.Api.Presentation.Entities.Identifier:
      type: object
      properties:
        crowding:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Crowding'
        fullName:
          type: string
        id:
          type: string
        name:
          type: string
        routeType:
          type: string
          enum:
            - Unknown
            - All
            - Cycle Superhighways
            - Quietways
            - Cycleways
            - Mini-Hollands
            - Central London Grid
        status:
          type: string
          enum:
            - Unknown
            - All
            - Open
            - In Progress
            - Planned
            - Planned - Subject to feasibility and consultation.
            - Not Open
        type:
          type: string
        uri:
          type: string
    Tfl.Api.Presentation.Entities.Instruction:
      type: object
      properties:
        detailed:
          type: string
        steps:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.InstructionStep'
        summary:
          type: string
    Tfl.Api.Presentation.Entities.InstructionStep:
      type: object
      properties:
        cumulativeDistance:
          type: integer
          format: int32
        cumulativeTravelTime:
          type: integer
          format: int32
        description:
          type: string
        descriptionHeading:
          type: string
        distance:
          type: integer
          format: int32
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        pathAttribute:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.PathAttribute'
        skyDirection:
          type: integer
          format: int32
        skyDirectionDescription:
          type: string
          enum:
            - North
            - NorthEast
            - East
            - SouthEast
            - South
            - SouthWest
            - West
            - NorthWest
        streetName:
          type: string
        trackType:
          type: string
          enum:
            - CycleSuperHighway
            - CanalTowpath
            - QuietRoad
            - ProvisionForCyclists
            - BusyRoads
            - None
            - PushBike
            - Quietway
        turnDirection:
          type: string
    Tfl.Api.Presentation.Entities.Interval:
      type: object
      properties:
        stopId:
          type: string
        timeToArrival:
          type: number
          format: double
    Tfl.Api.Presentation.Entities.JourneyPlanner.Fare:
      type: object
      properties:
        chargeLevel:
          type: string
        chargeProfileName:
          type: string
        cost:
          type: integer
          format: int32
        highZone:
          type: integer
          format: int32
        isHopperFare:
          type: boolean
        lowZone:
          type: integer
          format: int32
        offPeak:
          type: integer
          format: int32
        peak:
          type: integer
          format: int32
        taps:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.FareTap
    Tfl.Api.Presentation.Entities.JourneyPlanner.FareCaveat:
      type: object
      properties:
        text:
          type: string
        type:
          type: string
    Tfl.Api.Presentation.Entities.JourneyPlanner.FareTap:
      type: object
      properties:
        atcoCode:
          type: string
        tapDetails:
          $ref: >-
            #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.FareTapDetails
    Tfl.Api.Presentation.Entities.JourneyPlanner.FareTapDetails:
      type: object
      properties:
        busRouteId:
          type: string
        hostDeviceType:
          type: string
        modeType:
          type: string
        nationalLocationCode:
          type: integer
          format: int32
        tapTimestamp:
          type: string
          format: date-time
        validationType:
          type: string
    Tfl.Api.Presentation.Entities.JourneyPlanner.ItineraryResult:
      type: object
      properties:
        cycleHireDockingStationData:
          $ref: >-
            #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyPlannerCycleHireDockingStationData
        journeyVector:
          $ref: >-
            #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyVector
        journeys:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.Journey
        lines:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
        recommendedMaxAgeMinutes:
          type: integer
          format: int32
        searchCriteria:
          $ref: >-
            #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.SearchCriteria
        stopMessages:
          type: array
          items:
            type: string
      description: A DTO representing a list of possible journeys.
    Tfl.Api.Presentation.Entities.JourneyPlanner.Journey:
      type: object
      properties:
        arrivalDateTime:
          type: string
          format: date-time
        duration:
          type: integer
          format: int32
        fare:
          $ref: >-
            #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyFare
        legs:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.Leg
        startDateTime:
          type: string
          format: date-time
      description: Object that represents an end to end journey (see schematic).
    Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyFare:
      type: object
      properties:
        caveats:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.FareCaveat
        fares:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.Fare
        totalCost:
          type: integer
          format: int32
    Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyPlannerCycleHireDockingStationData:
      type: object
      properties:
        destinationId:
          type: string
        destinationNumberOfBikes:
          type: integer
          format: int32
        destinationNumberOfEmptySlots:
          type: integer
          format: int32
        originId:
          type: string
        originNumberOfBikes:
          type: integer
          format: int32
        originNumberOfEmptySlots:
          type: integer
          format: int32
    Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyVector:
      type: object
      properties:
        from:
          type: string
        to:
          type: string
        uri:
          type: string
        via:
          type: string
    Tfl.Api.Presentation.Entities.JourneyPlanner.Leg:
      type: object
      properties:
        arrivalPoint:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Point'
        arrivalTime:
          type: string
          format: date-time
        departurePoint:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Point'
        departureTime:
          type: string
          format: date-time
        disruptions:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Disruption'
        distance:
          type: number
          format: double
        duration:
          type: integer
          format: int32
        hasFixedLocations:
          type: boolean
          readOnly: true
        instruction:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Instruction'
        isDisrupted:
          type: boolean
          readOnly: true
        mode:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Identifier'
        obstacles:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.Obstacle
        path:
          $ref: >-
            #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.Path
        plannedWorks:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.PlannedWork
        routeOptions:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.RouteOption
        speed:
          type: string
    Tfl.Api.Presentation.Entities.JourneyPlanner.Obstacle:
      type: object
      properties:
        incline:
          type: string
        position:
          type: string
        stopId:
          type: integer
          format: int32
        type:
          type: string
    Tfl.Api.Presentation.Entities.JourneyPlanner.Path:
      type: object
      properties:
        elevation:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Common.JourneyPlanner.JpElevation'
        lineString:
          type: string
        stopPoints:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Identifier'
    Tfl.Api.Presentation.Entities.JourneyPlanner.PlannedWork:
      type: object
      properties:
        createdDateTime:
          type: string
          format: date-time
        description:
          type: string
        id:
          type: string
        lastUpdateDateTime:
          type: string
          format: date-time
    Tfl.Api.Presentation.Entities.JourneyPlanner.RouteOption:
      type: object
      properties:
        directions:
          type: array
          items:
            type: string
        id:
          type: string
          description: The Id of the route
        lineIdentifier:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Identifier'
        name:
          type: string
          description: Name such as "72"
    Tfl.Api.Presentation.Entities.JourneyPlanner.SearchCriteria:
      type: object
      properties:
        dateTime:
          type: string
          format: date-time
        dateTimeType:
          type: string
          enum:
            - Arriving
            - Departing
        timeAdjustments:
          $ref: >-
            #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustments
    Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustment:
      type: object
      properties:
        date:
          type: string
        time:
          type: string
        timeIs:
          type: string
        uri:
          type: string
    Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustments:
      type: object
      properties:
        earlier:
          $ref: >-
            #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustment
        earliest:
          $ref: >-
            #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustment
        later:
          $ref: >-
            #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustment
        latest:
          $ref: >-
            #/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustment
    Tfl.Api.Presentation.Entities.KnownJourney:
      type: object
      properties:
        hour:
          type: string
        intervalId:
          type: integer
          format: int32
        minute:
          type: string
    Tfl.Api.Presentation.Entities.Line:
      type: object
      properties:
        created:
          type: string
          format: date-time
        crowding:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Crowding'
        disruptions:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Disruption'
        id:
          type: string
        lineStatuses:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.LineStatus'
        modeName:
          type: string
        modified:
          type: string
          format: date-time
        name:
          type: string
        routeSections:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.MatchedRoute'
        serviceTypes:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.LineServiceTypeInfo
    Tfl.Api.Presentation.Entities.LineGroup:
      type: object
      properties:
        lineIdentifier:
          type: array
          items:
            type: string
        naptanIdReference:
          type: string
        stationAtcoCode:
          type: string
    Tfl.Api.Presentation.Entities.LineModeGroup:
      type: object
      properties:
        lineIdentifier:
          type: array
          items:
            type: string
        modeName:
          type: string
    Tfl.Api.Presentation.Entities.LineRouteSection:
      type: object
      properties:
        destination:
          type: string
        direction:
          type: string
        fromStation:
          type: string
        routeId:
          type: integer
          format: int32
        serviceType:
          type: string
        toStation:
          type: string
        vehicleDestinationText:
          type: string
    Tfl.Api.Presentation.Entities.LineServiceType:
      type: object
      properties:
        lineName:
          type: string
        lineSpecificServiceTypes:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.LineSpecificServiceType
    Tfl.Api.Presentation.Entities.LineServiceTypeInfo:
      type: object
      properties:
        name:
          type: string
        uri:
          type: string
    Tfl.Api.Presentation.Entities.LineSpecificServiceType:
      type: object
      properties:
        serviceType:
          $ref: >-
            #/components/schemas/Tfl.Api.Presentation.Entities.LineServiceTypeInfo
        stopServesServiceType:
          type: boolean
    Tfl.Api.Presentation.Entities.LineStatus:
      type: object
      properties:
        created:
          type: string
          format: date-time
        disruption:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Disruption'
        id:
          type: integer
          format: int32
        lineId:
          type: string
        modified:
          type: string
          format: date-time
        reason:
          type: string
        statusSeverity:
          type: integer
          format: int32
        statusSeverityDescription:
          type: string
        validityPeriods:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.ValidityPeriod'
    Tfl.Api.Presentation.Entities.MatchedRoute:
      type: object
      properties:
        destination:
          type: string
          description: The Id (NaPTAN code) or the Destination StopPoint
        destinationName:
          type: string
          description: The name of the Destination StopPoint
        direction:
          type: string
          description: Inbound or Outbound
        name:
          type: string
          description: Name such as "72"
        originationName:
          type: string
          description: The name of the Origin StopPoint
        originator:
          type: string
          description: The Id (NaPTAN code) of the Origin StopPoint
        routeCode:
          type: string
          description: The route code
        serviceType:
          type: string
          description: Regular or Night
        validFrom:
          type: string
          description: The DateTime that the Service containing this Route is valid from.
          format: date-time
        validTo:
          type: string
          description: The DateTime that the Service containing this Route is valid until.
          format: date-time
      description: Description of a Route used in Route search results.
    Tfl.Api.Presentation.Entities.MatchedRouteSections:
      type: object
      properties:
        id:
          type: integer
          format: int32
    Tfl.Api.Presentation.Entities.MatchedStop:
      type: object
      properties:
        accessibilitySummary:
          type: string
        direction:
          type: string
        hasDisruption:
          type: boolean
        icsId:
          type: string
        id:
          type: string
        lat:
          type: number
          format: double
        lines:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Identifier'
        lon:
          type: number
          format: double
        modes:
          type: array
          items:
            type: string
        name:
          type: string
        parentId:
          type: string
        routeId:
          type: integer
          format: int32
        stationId:
          type: string
        status:
          type: boolean
        stopLetter:
          type: string
        stopType:
          type: string
        topMostParentId:
          type: string
        towards:
          type: string
        url:
          type: string
        zone:
          type: string
    Tfl.Api.Presentation.Entities.Message:
      type: object
      properties:
        bulletOrder:
          type: integer
          format: int32
        header:
          type: boolean
        linkText:
          type: string
        messageText:
          type: string
        url:
          type: string
    Tfl.Api.Presentation.Entities.Mode:
      type: object
      properties:
        isFarePaying:
          type: boolean
        isScheduledService:
          type: boolean
        isTflService:
          type: boolean
        modeName:
          type: string
    Tfl.Api.Presentation.Entities.NetworkStatus:
      type: object
      properties:
        message:
          type: string
        operator:
          type: string
        status:
          type: string
        statusLevel:
          type: integer
          format: int32
      description: Represent travel network status
    Tfl.Api.Presentation.Entities.OrderedRoute:
      type: object
      properties:
        name:
          type: string
        naptanIds:
          type: array
          items:
            type: string
        serviceType:
          type: string
    Tfl.Api.Presentation.Entities.PassengerFlow:
      type: object
      properties:
        timeSlice:
          type: string
          description: >-
            Time in 24hr format with 15 minute intervals e.g. 0500-0515,
            0515-0530 etc.
        value:
          type: integer
          description: Count of passenger flow towards a platform
          format: int32
    Tfl.Api.Presentation.Entities.PathAttribute:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    Tfl.Api.Presentation.Entities.Period:
      type: object
      properties:
        frequency:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.ServiceFrequency'
        fromTime:
          $ref: >-
            #/components/schemas/Tfl.Api.Presentation.Entities.TwentyFourHourClockTime
        toTime:
          $ref: >-
            #/components/schemas/Tfl.Api.Presentation.Entities.TwentyFourHourClockTime
        type:
          type: string
          enum:
            - Normal
            - FrequencyHours
            - FrequencyMinutes
            - Unknown
    Tfl.Api.Presentation.Entities.Place:
      type: object
      properties:
        additionalProperties:
          type: array
          description: >-
            A bag of additional key/value pairs with extra information about
            this place.
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.AdditionalProperties
        children:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
        childrenUrls:
          type: array
          items:
            type: string
        commonName:
          type: string
          description: A human readable name.
        distance:
          type: number
          description: "The distance of the place from its search point, if this is the result\r\n            of a geographical search, otherwise zero."
          format: double
        id:
          type: string
          description: A unique identifier.
        lat:
          type: number
          description: WGS84 latitude of the location.
          format: double
        lon:
          type: number
          description: WGS84 longitude of the location.
          format: double
        placeType:
          type: string
          description: The type of Place. See /Place/Meta/placeTypes for possible values.
        url:
          type: string
          description: The unique location of this resource.
    Tfl.Api.Presentation.Entities.PlaceCategory:
      type: object
      properties:
        availableKeys:
          type: array
          items:
            type: string
        category:
          type: string
    Tfl.Api.Presentation.Entities.PlacePolygon:
      type: object
      properties:
        commonName:
          type: string
        geoPoints:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Common.GeoPoint'
    Tfl.Api.Presentation.Entities.Point:
      type: object
      properties:
        lat:
          type: number
          description: WGS84 latitude of the location.
          format: double
        lon:
          type: number
          description: WGS84 longitude of the location.
          format: double
      description: >-
        Represents a point located at a latitude and longitude using the WGS84
        co-ordinate system.
    Tfl.Api.Presentation.Entities.Prediction:
      type: object
      properties:
        bearing:
          type: string
          description: Bearing (between 0 to 359)
        currentLocation:
          type: string
          description: The current location of the vehicle.
        destinationName:
          type: string
          description: Name of the destination
        destinationNaptanId:
          type: string
          description: Naptan Identifier for the prediction's destination
        direction:
          type: string
          description: Direction (unified to inbound/outbound)
        expectedArrival:
          type: string
          description: The expected arrival time of the vehicle at the stop/station
          format: date-time
        id:
          type: string
          description: The identitier for the prediction
        lineId:
          type: string
          description: Unique identifier for the Line
        lineName:
          type: string
          description: Line Name
        modeName:
          type: string
          description: The mode name of the station/line the prediction relates to
        naptanId:
          type: string
          description: Identifier for the prediction
        operationType:
          type: integer
          description: >-
            The type of the operation (1: is new or has been updated, 2: should
            be deleted from any client cache)
          format: int32
        platformName:
          type: string
          description: 'Platform name (for bus, this is the stop letter)'
        stationName:
          type: string
          description: Station name
        timeToLive:
          type: string
          description: The expiry time for the prediction
          format: date-time
        timeToStation:
          type: integer
          description: Prediction of the Time to station in seconds
          format: int32
        timestamp:
          type: string
          description: >-
            Timestamp for when the prediction was inserted/modified (source
            column drives what objects are broadcast on each iteration)
          format: date-time
        timing:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.PredictionTiming'
        towards:
          type: string
          description: >-
            Routing information or other descriptive text about the path of the
            vehicle towards the destination
        vehicleId:
          type: string
          description: >-
            The actual vehicle in transit (for train modes, the leading car of
            the rolling set)
      description: DTO to capture the prediction details
    Tfl.Api.Presentation.Entities.PredictionTiming:
      type: object
      properties:
        countdownServerAdjustment:
          type: string
        insert:
          type: string
          format: date-time
        read:
          type: string
          format: date-time
        received:
          type: string
          format: date-time
        sent:
          type: string
          format: date-time
        source:
          type: string
          format: date-time
    Tfl.Api.Presentation.Entities.Redirect:
      type: object
      properties:
        active:
          type: boolean
        longUrl:
          type: string
        shortUrl:
          type: string
    Tfl.Api.Presentation.Entities.RoadCorridor:
      type: object
      properties:
        bounds:
          type: string
          description: "The Bounds of the Corridor, given by the south-east followed by the north-west co-ordinate\r\n            pair in geoJSON format e.g. \"[[-1.241531,51.242151],[1.641223,53.765721]]\""
        displayName:
          type: string
          description: "The display name of the Corridor e.g. \"North Circular (A406)\". This\r\n            may be identical to the Id."
        envelope:
          type: string
          description: "The Envelope of the Corridor, given by the corner co-ordinates of a rectangular (four-point) polygon\r\n            in geoJSON format e.g. \"[[-1.241531,51.242151],[-1.241531,53.765721],[1.641223,53.765721],[1.641223,51.242151]]\""
        group:
          type: string
          description: >-
            The group name of the Corridor e.g. "Central London". Most corridors
            are not grouped, in which case this field can be null.
        id:
          type: string
          description: The Id of the Corridor e.g. "A406"
        statusAggregationEndDate:
          type: string
          description: >-
            The end of the period over which status has been aggregated, or null
            if this is the current corridor status.
          format: date-time
        statusAggregationStartDate:
          type: string
          description: >-
            The start of the period over which status has been aggregated, or
            null if this is the current corridor status.
          format: date-time
        statusSeverity:
          type: string
          description: Standard multi-mode status severity code
        statusSeverityDescription:
          type: string
          description: Description of the status severity as applied to RoadCorridors
        url:
          type: string
          description: URL to retrieve this Corridor.
    Tfl.Api.Presentation.Entities.RoadDisruption:
      type: object
      properties:
        category:
          type: string
          description: 'Describes the nature of disruption e.g. Traffic Incidents, Works'
        comments:
          type: string
          description: >-
            Full text of comments describing the disruption, including details
            of any road closures and diversions, where appropriate.
        corridorIds:
          type: array
          description: 'The Ids of affected corridors, if any.'
          items:
            type: string
        currentUpdate:
          type: string
          description: "Text of the most recent update from the LSTCC on the state of the\r\n             disruption, including the current traffic impact and any advice to\r\n             road users."
        currentUpdateDateTime:
          type: string
          description: "The time when the last CurrentUpdate description was recorded, \r\n            or null if no CurrentUpdate has been applied."
          format: date-time
        endDateTime:
          type: string
          description: "The date and time on which the disruption ended. For planned disruptions, this date will have a valid value. For unplanned \r\n            disruptions in progress, this field will be omitted."
          format: date-time
        geography:
          $ref: '#/components/schemas/System.Data.Spatial.DbGeography'
        geometry:
          $ref: '#/components/schemas/System.Data.Spatial.DbGeography'
        hasClosures:
          type: boolean
          description: "True if any of the affected Streets have a \"Full Closure\" status, false otherwise. A RoadDisruption that has HasClosures is considered a \r\n            Severe or Serious disruption for severity filtering purposes."
        id:
          type: string
          description: Unique identifier for the road disruption
        isProvisional:
          type: boolean
          description: >-
            True if the disruption is planned on a future date that is open to
            change
        lastModifiedTime:
          type: string
          description: "The date and time on which the disruption was last modified in the system. This information can reliably be used by a developer to quickly\r\n            compare two instances of the same disruption to determine if it has been changed."
          format: date-time
        levelOfInterest:
          type: string
          description: "This describes the level of potential impact on traffic operations of the disruption. \r\n            High = e.g. a one-off disruption on a major or high profile route which will require a high level of operational attention \r\n            Medium = This is the default value \r\n            Low = e.g. a frequently occurring disruption which is well known"
        linkText:
          type: string
          description: The text of any associated link
        linkUrl:
          type: string
          description: The url of any associated link
        location:
          type: string
          description: >-
            Main road name / number (borough) or preset area name where the
            disruption is located. This might be useful for a map popup where
            space is limited.
        ordinal:
          type: integer
          description: >-
            An ordinal of the disruption based on severity, level of interest
            and corridor.
          format: int32
        point:
          type: string
          description: >-
            Latitude and longitude (WGS84) of the centroid of the disruption,
            stored in a geoJSON-formatted string.
        publishEndDate:
          type: string
          format: date-time
        publishStartDate:
          type: string
          description: TDM Additional properties
          format: date-time
        recurringSchedules:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruptionSchedule
        roadDisruptionImpactAreas:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruptionImpactArea
        roadDisruptionLines:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruptionLine
        roadProject:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadProject'
        severity:
          type: string
          description: A description of the severity of the disruption.
        startDateTime:
          type: string
          description: "The date and time which the disruption started. For a planned disruption (i.e. planned road works) this date will be in the future.\r\n            For unplanned disruptions, this will default to the date on which the disruption was first recorded, but may be adjusted by the operator."
          format: date-time
        status:
          type: string
          description: "This describes the status of the disruption.  \r\n            Active = currently in progress \r\n            Active Long Term = currently in progress and long term\r\n            Scheduled = scheduled to start within the next 180 days\r\n            Recurring Works = planned maintenance works that follow a regular routine or pattern and whose next occurrence is to start within the next 180 days.\r\n            Recently Cleared = recently cleared in the last 24 hours\r\n            Note that the status of Scheduled or Recurring Works disruptions will change to Active when they start, and will change status again when they end."
        streets:
          type: array
          description: A collection of zero or more streets affected by the disruption.
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Street'
        subCategory:
          type: string
          description: >-
            Describes the sub-category of disruption e.g. Collapsed Manhole,
            Abnormal Load
        timeFrame:
          type: string
        url:
          type: string
          description: URL to retrieve this road disruption
    Tfl.Api.Presentation.Entities.RoadDisruptionImpactArea:
      type: object
      properties:
        endDate:
          type: string
          format: date-time
        endTime:
          type: string
        id:
          type: integer
          format: int32
        polygon:
          $ref: '#/components/schemas/System.Data.Spatial.DbGeography'
        roadDisruptionId:
          type: string
        startDate:
          type: string
          format: date-time
        startTime:
          type: string
    Tfl.Api.Presentation.Entities.RoadDisruptionLine:
      type: object
      properties:
        endDate:
          type: string
          format: date-time
        endTime:
          type: string
        id:
          type: integer
          format: int32
        isDiversion:
          type: boolean
        multiLineString:
          $ref: '#/components/schemas/System.Data.Spatial.DbGeography'
        roadDisruptionId:
          type: string
        startDate:
          type: string
          format: date-time
        startTime:
          type: string
    Tfl.Api.Presentation.Entities.RoadDisruptionSchedule:
      type: object
      properties:
        endTime:
          type: string
          format: date-time
        startTime:
          type: string
          format: date-time
    Tfl.Api.Presentation.Entities.RoadProject:
      type: object
      properties:
        boroughsBenefited:
          type: array
          items:
            type: string
        constructionEndDate:
          type: string
          format: date-time
        constructionStartDate:
          type: string
          format: date-time
        consultationEndDate:
          type: string
          format: date-time
        consultationPageUrl:
          type: string
        consultationStartDate:
          type: string
          format: date-time
        contactEmail:
          type: string
        contactName:
          type: string
        cycleSuperhighwayId:
          type: string
        externalPageUrl:
          type: string
        phase:
          type: string
          enum:
            - Unscoped
            - Concept
            - ConsultationEnded
            - Consultation
            - Construction
            - Complete
        projectDescription:
          type: string
        projectId:
          type: string
        projectName:
          type: string
        projectPageUrl:
          type: string
        projectSummaryPageUrl:
          type: string
        schemeName:
          type: string
    Tfl.Api.Presentation.Entities.RouteSearchMatch:
      type: object
      properties:
        id:
          type: string
        lat:
          type: number
          format: double
        lineId:
          type: string
        lineName:
          type: string
        lineRouteSection:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.LineRouteSection
        lon:
          type: number
          format: double
        matchedRouteSections:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.MatchedRouteSections
        matchedStops:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.MatchedStop'
        mode:
          type: string
        name:
          type: string
        url:
          type: string
    Tfl.Api.Presentation.Entities.RouteSearchResponse:
      type: object
      properties:
        input:
          type: string
        searchMatches:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.RouteSearchMatch
    Tfl.Api.Presentation.Entities.RouteSection:
      type: object
      properties:
        destinationName:
          type: string
          description: The name of the Destination StopPoint
        direction:
          type: string
          description: Inbound or Outbound
        id:
          type: string
          description: The Id of the route
        lineId:
          type: string
          description: The Id of the Line
        lineString:
          type: string
          description: The co-ordinates of the route's path as a geoJSON lineString
        name:
          type: string
          description: Name such as "72"
        originationName:
          type: string
          description: The name of the Origin StopPoint
        routeCode:
          type: string
          description: The route code
        routeSectionNaptanEntrySequence:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.RouteSectionNaptanEntrySequence
        validFrom:
          type: string
          description: The DateTime that the Service containing this Route is valid from.
          format: date-time
        validTo:
          type: string
          description: The DateTime that the Service containing this Route is valid until.
          format: date-time
    Tfl.Api.Presentation.Entities.RouteSectionNaptanEntrySequence:
      type: object
      properties:
        ordinal:
          type: integer
          format: int32
        stopPoint:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
    Tfl.Api.Presentation.Entities.RouteSequence:
      type: object
      properties:
        direction:
          type: string
        isOutboundOnly:
          type: boolean
        lineId:
          type: string
        lineName:
          type: string
        lineStrings:
          type: array
          items:
            type: string
        mode:
          type: string
        orderedLineRoutes:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.OrderedRoute'
        stations:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.MatchedStop'
        stopPointSequences:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.StopPointSequence
    Tfl.Api.Presentation.Entities.Schedule:
      type: object
      properties:
        firstJourney:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.KnownJourney'
        knownJourneys:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.KnownJourney'
        lastJourney:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.KnownJourney'
        name:
          type: string
        periods:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Period'
    Tfl.Api.Presentation.Entities.SearchMatch:
      type: object
      properties:
        id:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        name:
          type: string
        url:
          type: string
    Tfl.Api.Presentation.Entities.SearchResponse:
      type: object
      properties:
        from:
          type: integer
          format: int32
        matches:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.SearchMatch'
        maxScore:
          type: number
          format: double
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        provider:
          type: string
        query:
          type: string
        total:
          type: integer
          format: int32
    Tfl.Api.Presentation.Entities.ServiceFrequency:
      type: object
      properties:
        highestFrequency:
          type: number
          format: double
        lowestFrequency:
          type: number
          format: double
    Tfl.Api.Presentation.Entities.StationInterval:
      type: object
      properties:
        id:
          type: string
        intervals:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Interval'
    Tfl.Api.Presentation.Entities.StatusSeverity:
      type: object
      properties:
        description:
          type: string
        modeName:
          type: string
        severityLevel:
          type: integer
          format: int32
    Tfl.Api.Presentation.Entities.StopPoint:
      type: object
      properties:
        accessibilitySummary:
          type: string
        additionalProperties:
          type: array
          description: >-
            A bag of additional key/value pairs with extra information about
            this place.
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.AdditionalProperties
        children:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
        childrenUrls:
          type: array
          items:
            type: string
        commonName:
          type: string
          description: A human readable name.
        distance:
          type: number
          description: "The distance of the place from its search point, if this is the result\r\n            of a geographical search, otherwise zero."
          format: double
        fullName:
          type: string
        hubNaptanCode:
          type: string
        icsCode:
          type: string
        id:
          type: string
          description: A unique identifier.
        indicator:
          type: string
          description: The indicator of the stop point e.g. "Stop K"
        lat:
          type: number
          description: WGS84 latitude of the location.
          format: double
        lineGroup:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.LineGroup'
        lineModeGroups:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.LineModeGroup'
        lines:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Identifier'
        lon:
          type: number
          description: WGS84 longitude of the location.
          format: double
        modes:
          type: array
          items:
            type: string
        naptanId:
          type: string
        naptanMode:
          type: string
        placeType:
          type: string
          description: The type of Place. See /Place/Meta/placeTypes for possible values.
        platformName:
          type: string
        smsCode:
          type: string
        stationNaptan:
          type: string
        status:
          type: boolean
        stopLetter:
          type: string
          description: 'The stop letter, if it could be cleansed from the Indicator e.g. "K"'
        stopType:
          type: string
        url:
          type: string
          description: The unique location of this resource.
    Tfl.Api.Presentation.Entities.StopPointCategory:
      type: object
      properties:
        availableKeys:
          type: array
          items:
            type: string
        category:
          type: string
    Tfl.Api.Presentation.Entities.StopPointRouteSection:
      type: object
      properties:
        destinationName:
          type: string
        direction:
          type: string
        isActive:
          type: boolean
        lineId:
          type: string
        lineString:
          type: string
        mode:
          type: string
        naptanId:
          type: string
        routeSectionName:
          type: string
        serviceType:
          type: string
        validFrom:
          type: string
          format: date-time
        validTo:
          type: string
          format: date-time
        vehicleDestinationText:
          type: string
    Tfl.Api.Presentation.Entities.StopPointSequence:
      type: object
      properties:
        branchId:
          type: integer
          description: The id of this branch.
          format: int32
        direction:
          type: string
        lineId:
          type: string
        lineName:
          type: string
        nextBranchIds:
          type: array
          description: "The ids of the next branch(es) in the sequence. Note that the next and previous branch id can be\r\n            identical in the case of a looped route e.g. the Circle line."
          items:
            type: integer
            format: int32
        prevBranchIds:
          type: array
          description: "The ids of the previous branch(es) in the sequence. Note that the next and previous branch id can be\r\n            identical in the case of a looped route e.g. the Circle line."
          items:
            type: integer
            format: int32
        serviceType:
          type: string
          enum:
            - Regular
            - Night
        stopPoint:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.MatchedStop'
    Tfl.Api.Presentation.Entities.StopPointsResponse:
      type: object
      properties:
        centrePoint:
          type: array
          description: The centre latitude/longitude of this list of StopPoints
          items:
            type: number
            format: double
        page:
          type: integer
          description: The index of this page
          format: int32
        pageSize:
          type: integer
          description: >-
            The maximum size of the page in this response i.e. the maximum
            number of StopPoints
          format: int32
        stopPoints:
          type: array
          description: Collection of stop points
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
        total:
          type: integer
          description: The total number of StopPoints available across all pages
          format: int32
      description: A paged response containing StopPoints
    Tfl.Api.Presentation.Entities.Street:
      type: object
      properties:
        closure:
          type: string
          description: "Type of road closure. Some example values:\r\n            Open = road is open, not blocked, not closed, not restricted. It maybe that the disruption has been moved out of the carriageway.\r\n            Partial Closure = road is partially blocked, closed or restricted. \r\n            Full Closure = road is fully blocked or closed."
        directions:
          type: string
          description: "The direction of the disruption on the street. Some example values:\r\n            All Directions\r\n            All Approaches\r\n            Clockwise\r\n            Anti-Clockwise\r\n            Northbound\r\n            Eastbound\r\n            Southbound\r\n            Westbound\r\n            Both Directions"
        name:
          type: string
          description: Street name
        segments:
          type: array
          description: >-
            Geographic description of the sections of this street that are
            affected.
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StreetSegment'
        sourceSystemId:
          type: integer
          description: >-
            The ID from the source system of the disruption that this street
            belongs to.
          format: int64
        sourceSystemKey:
          type: string
          description: >-
            The key of the source system of the disruption that this street
            belongs to.
    Tfl.Api.Presentation.Entities.StreetSegment:
      type: object
      properties:
        lineString:
          type: string
          description: >-
            geoJSON formatted LineString containing two latitude/longitude
            (WGS84) pairs that identify the start and end points of the street
            segment.
        sourceSystemId:
          type: integer
          description: >-
            The ID from the source system of the disruption that this street
            belongs to.
          format: int64
        sourceSystemKey:
          type: string
          description: >-
            The key of the source system of the disruption that this street
            belongs to.
        toid:
          type: string
          description: >-
            A 16 digit unique integer identifying a OS ITN (Ordnance Survey
            Integrated Transport Network) road link.
    Tfl.Api.Presentation.Entities.Timetable:
      type: object
      properties:
        departureStopId:
          type: string
        routes:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.TimetableRoute'
    Tfl.Api.Presentation.Entities.TimetableResponse:
      type: object
      properties:
        direction:
          type: string
        disambiguation:
          $ref: >-
            #/components/schemas/Tfl.Api.Presentation.Entities.Timetables.Disambiguation
        lineId:
          type: string
        lineName:
          type: string
        pdfUrl:
          type: string
        stations:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.MatchedStop'
        statusErrorMessage:
          type: string
        stops:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.MatchedStop'
        timetable:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Timetable'
    Tfl.Api.Presentation.Entities.TimetableRoute:
      type: object
      properties:
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Schedule'
        stationIntervals:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StationInterval'
    Tfl.Api.Presentation.Entities.Timetables.Disambiguation:
      type: object
      properties:
        disambiguationOptions:
          type: array
          items:
            $ref: >-
              #/components/schemas/Tfl.Api.Presentation.Entities.Timetables.DisambiguationOption
    Tfl.Api.Presentation.Entities.Timetables.DisambiguationOption:
      type: object
      properties:
        description:
          type: string
        uri:
          type: string
    Tfl.Api.Presentation.Entities.TrainLoading:
      type: object
      properties:
        direction:
          type: string
          description: Direction in regards to Journey Planner i.e. inbound or outbound
        line:
          type: string
          description: The Line Name e.g. "Victoria"
        lineDirection:
          type: string
          description: 'Direction of the Line e.g. NB, SB, WB etc.'
        naptanTo:
          type: string
          description: Naptan of the adjacent station
        platformDirection:
          type: string
          description: 'Direction displayed on the platform e.g. NB, SB, WB etc.'
        timeSlice:
          type: string
          description: >-
            Time in 24hr format with 15 minute intervals e.g. 0500-0515,
            0515-0530 etc.
        value:
          type: integer
          description: "Scale between 1-6, \r\n             1 = Very quiet, 2 = Quiet, 3 = Fairly busy, 4 = Busy, 5 = Very busy, 6 = Exceptionally busy"
          format: int32
    Tfl.Api.Presentation.Entities.TwentyFourHourClockTime:
      type: object
      properties:
        hour:
          type: string
        minute:
          type: string
    Tfl.Api.Presentation.Entities.ValidityPeriod:
      type: object
      properties:
        fromDate:
          type: string
          description: Gets or sets the start date.
          format: date-time
        isNow:
          type: boolean
          description: If true is a realtime status rather than planned or info
        toDate:
          type: string
          description: Gets or sets the end date.
          format: date-time
      description: Represents a period for which a planned works is valid.
    Tfl.Api.Presentation.Entities.VehicleMatch:
      type: object
      properties:
        colour:
          type: string
        compliance:
          type: string
          enum:
            - NotAvailable
            - NotCompliant
            - Compliant
            - Exempt
        make:
          type: string
        model:
          type: string
        type:
          type: string
        vrm:
          type: string
      description: ''
  securitySchemes:
    apiKey:
      type: apiKey
      description: API Key Authentication
      name: app_key
      in: query
    appId:
      type: apiKey
      description: Application ID
      name: app_id
      in: query
x-original-swagger-version: '2.0'
