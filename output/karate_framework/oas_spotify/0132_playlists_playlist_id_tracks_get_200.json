{
  "method": "GET",
  "parameters": [
    {
      "description": "A valid access token from the Spotify Accounts service: see the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/) for details. Both Public and Private playlists belonging to any user are retrievable on provision of a valid access token.",
      "in": "header",
      "name": "Authorization",
      "required": true,
      "schema": {
        "type": "string"
      }
    },
    {
      "description": "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.",
      "in": "path",
      "name": "playlist_id",
      "required": true,
      "schema": {
        "type": "string"
      }
    },
    {
      "description": "An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track\nRelinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/). For episodes, if a valid user access token is specified in the request header, the country associated with the user account will take priority over this parameter.  \n*Note: If neither market or user country are provided, the episode is considered unavailable for the client.*",
      "in": "query",
      "name": "market",
      "required": false,
      "schema": {
        "type": "string"
      }
    },
    {
      "description": "Filters for the query: a comma-separated list of the fields to return. If omitted, all fields are returned. For example, to get just the total number of items and the request limit:  \n`fields=total,limit`  \nA dot separator can be used to specify non-reoccurring fields, while parentheses can be used to specify reoccurring fields within objects. For example, to get just the added date and user ID of the adder:  \n`fields=items(added_at,added_by.id)`  \nUse multiple parentheses to drill down into nested objects, for example:  \n`fields=items(track(name,href,album(name,href)))`  \nFields can be excluded by prefixing them with an exclamation mark, for example:  \n`fields=items.track.album(!external_urls,images)`",
      "in": "query",
      "name": "fields",
      "required": false,
      "schema": {
        "type": "string"
      }
    },
    {
      "description": "The maximum number of items to return. Default: 100. Minimum: 1. Maximum: 100.",
      "in": "query",
      "name": "limit",
      "required": false,
      "schema": {
        "format": "int32",
        "type": "integer"
      }
    },
    {
      "description": "The index of the first item to return. Default: 0 (the first object).",
      "in": "query",
      "name": "offset",
      "required": false,
      "schema": {
        "format": "int32",
        "type": "integer"
      }
    },
    {
      "description": "A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`. **Note** : This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future. In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.",
      "in": "query",
      "name": "additional_types",
      "required": false,
      "schema": {
        "type": "string"
      }
    }
  ],
  "path": "/playlists/{playlist_id}/tracks",
  "requestBody": {},
  "responses": {
    "200": {
      "content": {
        "application/json": {
          "schema": {
            "externalDocs": {
              "description": "Find more info on the official Spotify Web API Reference",
              "url": "https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject"
            },
            "properties": {
              "href": {
                "description": "A link to the Web API endpoint returning the full result of the request",
                "type": "string"
              },
              "items": {
                "description": "The requested data.",
                "items": {
                  "externalDocs": {
                    "description": "Find more info on the official Spotify Web API Reference",
                    "url": "https://developer.spotify.com/documentation/web-api/reference/#object-playlisttrackobject"
                  },
                  "properties": {
                    "added_at": {
                      "description": "The date and time the track or episode was added. *Note that some very old playlists may return `null` in this field.*",
                      "format": "date-time",
                      "type": "string"
                    },
                    "added_by": {
                      "$ref": "#/components/schemas/PublicUserObject"
                    },
                    "is_local": {
                      "description": "Whether this track or episode is a [local file](https://developer.spotify.com/web-api/local-files-spotify-playlists/) or not.",
                      "type": "boolean"
                    },
                    "track": {
                      "description": "Information about the track or episode.",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TrackObject"
                        },
                        {
                          "$ref": "#/components/schemas/EpisodeObject"
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "limit": {
                "description": "The maximum number of items in the response (as set in the query or by default).",
                "format": "int32",
                "type": "integer"
              },
              "next": {
                "description": "URL to the next page of items. ( `null` if none)",
                "type": "string"
              },
              "offset": {
                "description": "The offset of the items returned (as set in the query or by default)",
                "format": "int32",
                "type": "integer"
              },
              "previous": {
                "description": "URL to the previous page of items. ( `null` if none)",
                "type": "string"
              },
              "total": {
                "description": "The total number of items available to return.",
                "format": "int32",
                "type": "integer"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "On success, the response body contains an array of [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject) and [episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject) (depends on the `additional_types` parameter), wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject) in JSON format and the HTTP status code in the response header is `200` OK. If an episode is unavailable in the given `market`, its information will not be included in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Requesting playlists that you do not have the user's authorization to access returns error `403` Forbidden."
    }
  }
}